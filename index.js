// Generated by purs bundle 0.14.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  }; 
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });                                                                                                     
  var fromRight$prime = function (v) {
      return function (v1) {
          if (v1 instanceof Right) {
              return v1.value0;
          };
          return v(Data_Unit.unit);
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isRight"] = isRight;
  exports["fromRight'"] = fromRight$prime;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $321 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $322 = Data_Eq.eq(dictEq);
          return function ($323) {
              return $321($322($323));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $324 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $325 = elem(dictFoldable)(dictEq)(x);
              return function ($326) {
                  return $324($325($326));
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var cons$prime = function (x) {
      return function (xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
      };
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["cons'"] = cons$prime;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  }; 
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative.Free"] = $PS["Control.Applicative.Free"] || {};
  var exports = $PS["Control.Applicative.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Ap = (function () {
      function Ap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ap.create = function (value0) {
          return function (value1) {
              return new Ap(value0, value1);
          };
      };
      return Ap;
  })();
  var mkAp = function (fba) {
      return function (fb) {
          return new Ap(fba, fb);
      };
  };
  var liftFreeAp = Lift.create;
  var goLeft = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_valStack) {
              return function ($copy_nat) {
                  return function ($copy_func) {
                      return function ($copy_count) {
                          var $tco_var_dictApplicative = $copy_dictApplicative;
                          var $tco_var_fStack = $copy_fStack;
                          var $tco_var_valStack = $copy_valStack;
                          var $tco_var_nat = $copy_nat;
                          var $tco_var_func = $copy_func;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                              if (func instanceof Pure) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: Control_Applicative.pure(dictApplicative)(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Lift) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: nat(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Ap) {
                                  $tco_var_dictApplicative = dictApplicative;
                                  $tco_var_fStack = fStack;
                                  $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                  $tco_var_nat = nat;
                                  $tco_var_func = func.value0;
                                  $copy_count = count + 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                          };
                          return $tco_result;
                      };
                  };
              };
          };
      };
  };
  var goApply = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_vals) {
              return function ($copy_gVal) {
                  var $tco_var_dictApplicative = $copy_dictApplicative;
                  var $tco_var_fStack = $copy_fStack;
                  var $tco_var_vals = $copy_vals;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictApplicative, fStack, vals, gVal) {
                      if (fStack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return new Data_Either.Left(gVal);
                      };
                      if (fStack instanceof Data_List_Types.Cons) {
                          var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                          var $14 = fStack.value0.count === 1;
                          if ($14) {
                              if (fStack.value1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return new Data_Either.Left(gRes);
                              };
                              $tco_var_dictApplicative = dictApplicative;
                              $tco_var_fStack = fStack.value1;
                              $tco_var_vals = vals;
                              $copy_gVal = gRes;
                              return;
                          };
                          if (vals instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Data_Either.Left(gRes);
                          };
                          if (vals instanceof Data_List_Types.Cons) {
                              $tco_done = true;
                              return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                  func: gRes,
                                  count: fStack.value0.count - 1 | 0
                              }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var functorFreeAp = new Data_Functor.Functor(function (f) {
      return function (x) {
          return mkAp(new Pure(f))(x);
      };
  });
  var foldFreeAp = function (dictApplicative) {
      return function (nat) {
          return function (z) {
              var go = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.value1.value0 instanceof Pure) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Lift) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Ap) {
                          var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                          $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                          return;
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
          };
      };
  };
  var retractFreeAp = function (dictApplicative) {
      return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyFreeAp = new Control_Apply.Apply(function () {
      return functorFreeAp;
  }, function (fba) {
      return function (fb) {
          return mkAp(fba)(fb);
      };
  });
  var applicativeFreeAp = new Control_Applicative.Applicative(function () {
      return applyFreeAp;
  }, Pure.create);
  var hoistFreeAp = function (f) {
      return foldFreeAp(applicativeFreeAp)(function ($37) {
          return liftFreeAp(f($37));
      });
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["unlessM"] = unlessM;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify'"] = modify$prime;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign["_fork"](false);
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["finally"] = $$finally;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Fork.Class"] = $PS["Control.Monad.Fork.Class"] || {};
  var exports = $PS["Control.Monad.Fork.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
      this.Functor1 = Functor1;
      this.Monad0 = Monad0;
      this.fork = fork;
      this.join = join;
      this.suspend = suspend;
  };
  var monadForkAff = new MonadFork(function () {
      return Effect_Aff.functorFiber;
  }, function () {
      return Effect_Aff.monadAff;
  }, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["monadForkAff"] = monadForkAff;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonad"] = freeMonad;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.Maybe.Trans"] = $PS["Control.Monad.Maybe.Trans"] || {};
  var exports = $PS["Control.Monad.Maybe.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                    
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  }; 
  var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $72 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
      return function ($73) {
          return MaybeT($72($73));
      };
  });
  var functorMaybeT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
          };
      });
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var v2 = f(v1.value0);
                      return v2;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 55, column 11 - line 57, column 42): " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, (function () {
          var $74 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($75) {
              return MaybeT($74(Data_Maybe.Just.create($75)));
          };
      })());
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var Data_Newtype = $PS["Data.Newtype"];              
  var runState = function (v) {
      var $16 = Data_Newtype.unwrap();
      return function ($17) {
          return $16(v($17));
      };
  };
  exports["runState"] = runState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["DOM.HTML.Indexed.ButtonType"] = $PS["DOM.HTML.Indexed.ButtonType"] || {};
  var exports = $PS["DOM.HTML.Indexed.ButtonType"];
  var ButtonButton = (function () {
      function ButtonButton() {

      };
      ButtonButton.value = new ButtonButton();
      return ButtonButton;
  })();
  var ButtonSubmit = (function () {
      function ButtonSubmit() {

      };
      ButtonSubmit.value = new ButtonSubmit();
      return ButtonSubmit;
  })();
  var ButtonReset = (function () {
      function ButtonReset() {

      };
      ButtonReset.value = new ButtonReset();
      return ButtonReset;
  })();
  var renderButtonType = function (v) {
      if (v instanceof ButtonButton) {
          return "button";
      };
      if (v instanceof ButtonSubmit) {
          return "submit";
      };
      if (v instanceof ButtonReset) {
          return "reset";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType (line 9, column 20 - line 12, column 25): " + [ v.constructor.name ]);
  };
  exports["ButtonSubmit"] = ButtonSubmit;
  exports["renderButtonType"] = renderButtonType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["DOM.HTML.Indexed.InputType"] = $PS["DOM.HTML.Indexed.InputType"] || {};
  var exports = $PS["DOM.HTML.Indexed.InputType"];
  var InputButton = (function () {
      function InputButton() {

      };
      InputButton.value = new InputButton();
      return InputButton;
  })();
  var InputCheckbox = (function () {
      function InputCheckbox() {

      };
      InputCheckbox.value = new InputCheckbox();
      return InputCheckbox;
  })();
  var InputColor = (function () {
      function InputColor() {

      };
      InputColor.value = new InputColor();
      return InputColor;
  })();
  var InputDate = (function () {
      function InputDate() {

      };
      InputDate.value = new InputDate();
      return InputDate;
  })();
  var InputDatetimeLocal = (function () {
      function InputDatetimeLocal() {

      };
      InputDatetimeLocal.value = new InputDatetimeLocal();
      return InputDatetimeLocal;
  })();
  var InputEmail = (function () {
      function InputEmail() {

      };
      InputEmail.value = new InputEmail();
      return InputEmail;
  })();
  var InputFile = (function () {
      function InputFile() {

      };
      InputFile.value = new InputFile();
      return InputFile;
  })();
  var InputHidden = (function () {
      function InputHidden() {

      };
      InputHidden.value = new InputHidden();
      return InputHidden;
  })();
  var InputImage = (function () {
      function InputImage() {

      };
      InputImage.value = new InputImage();
      return InputImage;
  })();
  var InputMonth = (function () {
      function InputMonth() {

      };
      InputMonth.value = new InputMonth();
      return InputMonth;
  })();
  var InputNumber = (function () {
      function InputNumber() {

      };
      InputNumber.value = new InputNumber();
      return InputNumber;
  })();
  var InputPassword = (function () {
      function InputPassword() {

      };
      InputPassword.value = new InputPassword();
      return InputPassword;
  })();
  var InputRadio = (function () {
      function InputRadio() {

      };
      InputRadio.value = new InputRadio();
      return InputRadio;
  })();
  var InputRange = (function () {
      function InputRange() {

      };
      InputRange.value = new InputRange();
      return InputRange;
  })();
  var InputReset = (function () {
      function InputReset() {

      };
      InputReset.value = new InputReset();
      return InputReset;
  })();
  var InputSearch = (function () {
      function InputSearch() {

      };
      InputSearch.value = new InputSearch();
      return InputSearch;
  })();
  var InputSubmit = (function () {
      function InputSubmit() {

      };
      InputSubmit.value = new InputSubmit();
      return InputSubmit;
  })();
  var InputTel = (function () {
      function InputTel() {

      };
      InputTel.value = new InputTel();
      return InputTel;
  })();
  var InputText = (function () {
      function InputText() {

      };
      InputText.value = new InputText();
      return InputText;
  })();
  var InputTime = (function () {
      function InputTime() {

      };
      InputTime.value = new InputTime();
      return InputTime;
  })();
  var InputUrl = (function () {
      function InputUrl() {

      };
      InputUrl.value = new InputUrl();
      return InputUrl;
  })();
  var InputWeek = (function () {
      function InputWeek() {

      };
      InputWeek.value = new InputWeek();
      return InputWeek;
  })();
  var renderInputType = function (v) {
      if (v instanceof InputButton) {
          return "button";
      };
      if (v instanceof InputCheckbox) {
          return "checkbox";
      };
      if (v instanceof InputColor) {
          return "color";
      };
      if (v instanceof InputDate) {
          return "date";
      };
      if (v instanceof InputDatetimeLocal) {
          return "datetime-local";
      };
      if (v instanceof InputEmail) {
          return "email";
      };
      if (v instanceof InputFile) {
          return "file";
      };
      if (v instanceof InputHidden) {
          return "hidden";
      };
      if (v instanceof InputImage) {
          return "image";
      };
      if (v instanceof InputMonth) {
          return "month";
      };
      if (v instanceof InputNumber) {
          return "number";
      };
      if (v instanceof InputPassword) {
          return "password";
      };
      if (v instanceof InputRadio) {
          return "radio";
      };
      if (v instanceof InputRange) {
          return "range";
      };
      if (v instanceof InputReset) {
          return "reset";
      };
      if (v instanceof InputSearch) {
          return "search";
      };
      if (v instanceof InputSubmit) {
          return "submit";
      };
      if (v instanceof InputTel) {
          return "tel";
      };
      if (v instanceof InputText) {
          return "text";
      };
      if (v instanceof InputTime) {
          return "time";
      };
      if (v instanceof InputUrl) {
          return "url";
      };
      if (v instanceof InputWeek) {
          return "week";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [ v.constructor.name ]);
  };
  exports["InputText"] = InputText;
  exports["renderInputType"] = renderInputType;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $102 = (function (dictPartial) {
                                  var $104 = Data_Maybe.fromJust();
                                  return function ($105) {
                                      return $104(last($105));
                                  };
                              })();
                              return function ($103) {
                                  return Data_Tuple.snd($102($103));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["some"] = some;
  exports["many"] = many;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["elemIndex"] = elemIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["modifyAt"] = modifyAt;
  exports["foldl"] = foldl;
  exports["sort"] = sort;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["nub"] = nub;
  exports["deleteBy"] = deleteBy;
  exports["zip"] = zip;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];               
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["BoundedEnum"] = BoundedEnum;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  } 

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal"] = $PS["Data.CodePoint.Unicode.Internal"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();
  var numSpaceBlocks = 7;
  var numLat1Blocks = 63;
  var numConvBlocks = 1332;
  var numBlocks = 3396;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS,
      unicodeCat: NUMCAT_ZS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var spacechars = [ {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  } ];
  var gencatZP = 67108864;
  var rule162 = {
      category: gencatZP,
      unicodeCat: NUMCAT_ZP.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule161 = {
      category: gencatZL,
      unicodeCat: NUMCAT_ZL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule170 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule171 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM,
      unicodeCat: NUMCAT_SM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK,
      unicodeCat: NUMCAT_SK.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC,
      unicodeCat: NUMCAT_SC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS,
      unicodeCat: NUMCAT_PS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO,
      unicodeCat: NUMCAT_PO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPI = 32768;
  var rule15 = {
      category: gencatPI,
      unicodeCat: NUMCAT_PI.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPF = 262144;
  var rule19 = {
      category: gencatPF,
      unicodeCat: NUMCAT_PF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE,
      unicodeCat: NUMCAT_PE.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD,
      unicodeCat: NUMCAT_PD.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC,
      unicodeCat: NUMCAT_PC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNO = 131072;
  var rule17 = {
      category: gencatNO,
      unicodeCat: NUMCAT_NO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule128 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule168 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule169 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND,
      unicodeCat: NUMCAT_ND.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule92 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule93 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatME = 4194304;
  var rule119 = {
      category: gencatME,
      unicodeCat: NUMCAT_ME.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule124 = {
      category: gencatMC,
      unicodeCat: NUMCAT_MC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule104 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule117 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule118 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule125 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule127 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38864,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3008 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule153 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule160 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule163 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule164 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule166 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule172 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule173 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule174 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule177 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule178 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule179 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule180 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule181 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule183 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule184 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule186 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42308 | 0,
      titledist: 0
  };
  var rule187 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42319 | 0,
      titledist: 0
  };
  var rule188 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42315 | 0,
      titledist: 0
  };
  var rule189 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42305 | 0,
      titledist: 0
  };
  var rule190 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42258 | 0,
      titledist: 0
  };
  var rule191 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42282 | 0,
      titledist: 0
  };
  var rule192 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42261 | 0,
      titledist: 0
  };
  var rule193 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 928,
      titledist: 0
  };
  var rule194 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -48 | 0,
      titledist: 0
  };
  var rule195 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42307 | 0,
      titledist: 0
  };
  var rule196 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35384 | 0,
      titledist: 0
  };
  var rule201 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule203 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 34,
      titledist: 0
  };
  var rule22 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule24 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule26 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule35 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule38 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule40 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule45 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule94 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 116,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule96 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule97 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule151 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule154 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLO = 16384;
  var rule14 = {
      category: gencatLO,
      unicodeCat: NUMCAT_LO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule91 = {
      category: gencatLM,
      unicodeCat: NUMCAT_LM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule105 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule108 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var rule109 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule110 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule112 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule114 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -116 | 0,
      lowdist: 0,
      titledist: -116 | 0
  };
  var rule116 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3008,
      lowdist: 0,
      titledist: 0
  };
  var rule129 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6254 | 0,
      lowdist: 0,
      titledist: -6254 | 0
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6253 | 0,
      lowdist: 0,
      titledist: -6253 | 0
  };
  var rule131 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6244 | 0,
      lowdist: 0,
      titledist: -6244 | 0
  };
  var rule132 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6242 | 0,
      lowdist: 0,
      titledist: -6242 | 0
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6243 | 0,
      lowdist: 0,
      titledist: -6243 | 0
  };
  var rule134 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6236 | 0,
      lowdist: 0,
      titledist: -6236 | 0
  };
  var rule135 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6181 | 0,
      lowdist: 0,
      titledist: -6181 | 0
  };
  var rule136 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35266,
      lowdist: 0,
      titledist: 35266
  };
  var rule138 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule139 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule140 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35384,
      lowdist: 0,
      titledist: 35384
  };
  var rule141 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule143 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule146 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule147 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule148 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule149 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule150 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule152 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule155 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule167 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule175 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule176 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule182 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule185 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 48,
      lowdist: 0,
      titledist: 48
  };
  var rule197 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -928 | 0,
      lowdist: 0,
      titledist: -928 | 0
  };
  var rule198 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38864 | 0,
      lowdist: 0,
      titledist: -38864 | 0
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule202 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule204 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -34 | 0,
      lowdist: 0,
      titledist: -34 | 0
  };
  var rule21 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule23 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule25 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule28 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule36 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule39 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule41 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42319,
      lowdist: 0,
      titledist: 42319
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42315,
      lowdist: 0,
      titledist: 42315
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42308,
      lowdist: 0,
      titledist: 42308
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42305,
      lowdist: 0,
      titledist: 42305
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule83 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42307,
      lowdist: 0,
      titledist: 42307
  };
  var rule84 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42282,
      lowdist: 0,
      titledist: 42282
  };
  var rule85 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule86 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule87 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule88 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule89 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42261,
      lowdist: 0,
      titledist: 42261
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42258,
      lowdist: 0,
      titledist: 42258
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var gencatCS = 134217728;
  var rule199 = {
      category: gencatCS,
      unicodeCat: NUMCAT_CS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule200 = {
      category: gencatCO,
      unicodeCat: NUMCAT_CO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCF = 65536;
  var rule16 = {
      category: gencatCF,
      unicodeCat: NUMCAT_CF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC,
      unicodeCat: NUMCAT_CC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k || i >= Data_Array.length(array)) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5611, column 5 - line 5617, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5588, column 1 - line 5588, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5601, column 8 - line 5603, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5678, column 8 - line 5680, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowupper = caseConv(function (v) {
      return v.updist;
  });
  var checkAttrS = function (categories) {
      return function ($$char) {
          var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5635, column 8 - line 5637, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswspace = checkAttrS([ gencatZS ]);
  var allchars = [ {
      start: 0,
      length: 32,
      convRule: rule0
  }, {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 33,
      length: 3,
      convRule: rule2
  }, {
      start: 36,
      length: 1,
      convRule: rule3
  }, {
      start: 37,
      length: 3,
      convRule: rule2
  }, {
      start: 40,
      length: 1,
      convRule: rule4
  }, {
      start: 41,
      length: 1,
      convRule: rule5
  }, {
      start: 42,
      length: 1,
      convRule: rule2
  }, {
      start: 43,
      length: 1,
      convRule: rule6
  }, {
      start: 44,
      length: 1,
      convRule: rule2
  }, {
      start: 45,
      length: 1,
      convRule: rule7
  }, {
      start: 46,
      length: 2,
      convRule: rule2
  }, {
      start: 48,
      length: 10,
      convRule: rule8
  }, {
      start: 58,
      length: 2,
      convRule: rule2
  }, {
      start: 60,
      length: 3,
      convRule: rule6
  }, {
      start: 63,
      length: 2,
      convRule: rule2
  }, {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 91,
      length: 1,
      convRule: rule4
  }, {
      start: 92,
      length: 1,
      convRule: rule2
  }, {
      start: 93,
      length: 1,
      convRule: rule5
  }, {
      start: 94,
      length: 1,
      convRule: rule10
  }, {
      start: 95,
      length: 1,
      convRule: rule11
  }, {
      start: 96,
      length: 1,
      convRule: rule10
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 123,
      length: 1,
      convRule: rule4
  }, {
      start: 124,
      length: 1,
      convRule: rule6
  }, {
      start: 125,
      length: 1,
      convRule: rule5
  }, {
      start: 126,
      length: 1,
      convRule: rule6
  }, {
      start: 127,
      length: 33,
      convRule: rule0
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 161,
      length: 1,
      convRule: rule2
  }, {
      start: 162,
      length: 4,
      convRule: rule3
  }, {
      start: 166,
      length: 1,
      convRule: rule13
  }, {
      start: 167,
      length: 1,
      convRule: rule2
  }, {
      start: 168,
      length: 1,
      convRule: rule10
  }, {
      start: 169,
      length: 1,
      convRule: rule13
  }, {
      start: 170,
      length: 1,
      convRule: rule14
  }, {
      start: 171,
      length: 1,
      convRule: rule15
  }, {
      start: 172,
      length: 1,
      convRule: rule6
  }, {
      start: 173,
      length: 1,
      convRule: rule16
  }, {
      start: 174,
      length: 1,
      convRule: rule13
  }, {
      start: 175,
      length: 1,
      convRule: rule10
  }, {
      start: 176,
      length: 1,
      convRule: rule13
  }, {
      start: 177,
      length: 1,
      convRule: rule6
  }, {
      start: 178,
      length: 2,
      convRule: rule17
  }, {
      start: 180,
      length: 1,
      convRule: rule10
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 182,
      length: 2,
      convRule: rule2
  }, {
      start: 184,
      length: 1,
      convRule: rule10
  }, {
      start: 185,
      length: 1,
      convRule: rule17
  }, {
      start: 186,
      length: 1,
      convRule: rule14
  }, {
      start: 187,
      length: 1,
      convRule: rule19
  }, {
      start: 188,
      length: 3,
      convRule: rule17
  }, {
      start: 191,
      length: 1,
      convRule: rule2
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 215,
      length: 1,
      convRule: rule6
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 223,
      length: 1,
      convRule: rule20
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 247,
      length: 1,
      convRule: rule6
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 312,
      length: 1,
      convRule: rule20
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 329,
      length: 1,
      convRule: rule20
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 397,
      length: 1,
      convRule: rule20
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 411,
      length: 1,
      convRule: rule20
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 426,
      length: 2,
      convRule: rule20
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 442,
      length: 1,
      convRule: rule20
  }, {
      start: 443,
      length: 1,
      convRule: rule14
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 446,
      length: 1,
      convRule: rule20
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 448,
      length: 4,
      convRule: rule14
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 496,
      length: 1,
      convRule: rule20
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 545,
      length: 1,
      convRule: rule20
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 564,
      length: 6,
      convRule: rule20
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 597,
      length: 1,
      convRule: rule20
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 600,
      length: 1,
      convRule: rule20
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 602,
      length: 1,
      convRule: rule20
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 605,
      length: 3,
      convRule: rule20
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 610,
      length: 1,
      convRule: rule20
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 612,
      length: 1,
      convRule: rule20
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 615,
      length: 1,
      convRule: rule20
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 621,
      length: 2,
      convRule: rule20
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 624,
      length: 1,
      convRule: rule20
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 627,
      length: 2,
      convRule: rule20
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 630,
      length: 7,
      convRule: rule20
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 638,
      length: 2,
      convRule: rule20
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 641,
      length: 1,
      convRule: rule20
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 644,
      length: 3,
      convRule: rule20
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 653,
      length: 5,
      convRule: rule20
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 659,
      length: 1,
      convRule: rule20
  }, {
      start: 660,
      length: 1,
      convRule: rule14
  }, {
      start: 661,
      length: 8,
      convRule: rule20
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 671,
      length: 17,
      convRule: rule20
  }, {
      start: 688,
      length: 18,
      convRule: rule91
  }, {
      start: 706,
      length: 4,
      convRule: rule10
  }, {
      start: 710,
      length: 12,
      convRule: rule91
  }, {
      start: 722,
      length: 14,
      convRule: rule10
  }, {
      start: 736,
      length: 5,
      convRule: rule91
  }, {
      start: 741,
      length: 7,
      convRule: rule10
  }, {
      start: 748,
      length: 1,
      convRule: rule91
  }, {
      start: 749,
      length: 1,
      convRule: rule10
  }, {
      start: 750,
      length: 1,
      convRule: rule91
  }, {
      start: 751,
      length: 17,
      convRule: rule10
  }, {
      start: 768,
      length: 69,
      convRule: rule92
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 838,
      length: 42,
      convRule: rule92
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 884,
      length: 1,
      convRule: rule91
  }, {
      start: 885,
      length: 1,
      convRule: rule10
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 890,
      length: 1,
      convRule: rule91
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 894,
      length: 1,
      convRule: rule2
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 900,
      length: 2,
      convRule: rule10
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 903,
      length: 1,
      convRule: rule2
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 912,
      length: 1,
      convRule: rule20
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 944,
      length: 1,
      convRule: rule20
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 978,
      length: 3,
      convRule: rule107
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1014,
      length: 1,
      convRule: rule6
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1020,
      length: 1,
      convRule: rule20
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1154,
      length: 1,
      convRule: rule13
  }, {
      start: 1155,
      length: 5,
      convRule: rule92
  }, {
      start: 1160,
      length: 2,
      convRule: rule119
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1369,
      length: 1,
      convRule: rule91
  }, {
      start: 1370,
      length: 6,
      convRule: rule2
  }, {
      start: 1376,
      length: 1,
      convRule: rule20
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 1415,
      length: 2,
      convRule: rule20
  }, {
      start: 1417,
      length: 1,
      convRule: rule2
  }, {
      start: 1418,
      length: 1,
      convRule: rule7
  }, {
      start: 1421,
      length: 2,
      convRule: rule13
  }, {
      start: 1423,
      length: 1,
      convRule: rule3
  }, {
      start: 1425,
      length: 45,
      convRule: rule92
  }, {
      start: 1470,
      length: 1,
      convRule: rule7
  }, {
      start: 1471,
      length: 1,
      convRule: rule92
  }, {
      start: 1472,
      length: 1,
      convRule: rule2
  }, {
      start: 1473,
      length: 2,
      convRule: rule92
  }, {
      start: 1475,
      length: 1,
      convRule: rule2
  }, {
      start: 1476,
      length: 2,
      convRule: rule92
  }, {
      start: 1478,
      length: 1,
      convRule: rule2
  }, {
      start: 1479,
      length: 1,
      convRule: rule92
  }, {
      start: 1488,
      length: 27,
      convRule: rule14
  }, {
      start: 1519,
      length: 4,
      convRule: rule14
  }, {
      start: 1523,
      length: 2,
      convRule: rule2
  }, {
      start: 1536,
      length: 6,
      convRule: rule16
  }, {
      start: 1542,
      length: 3,
      convRule: rule6
  }, {
      start: 1545,
      length: 2,
      convRule: rule2
  }, {
      start: 1547,
      length: 1,
      convRule: rule3
  }, {
      start: 1548,
      length: 2,
      convRule: rule2
  }, {
      start: 1550,
      length: 2,
      convRule: rule13
  }, {
      start: 1552,
      length: 11,
      convRule: rule92
  }, {
      start: 1563,
      length: 1,
      convRule: rule2
  }, {
      start: 1564,
      length: 1,
      convRule: rule16
  }, {
      start: 1566,
      length: 2,
      convRule: rule2
  }, {
      start: 1568,
      length: 32,
      convRule: rule14
  }, {
      start: 1600,
      length: 1,
      convRule: rule91
  }, {
      start: 1601,
      length: 10,
      convRule: rule14
  }, {
      start: 1611,
      length: 21,
      convRule: rule92
  }, {
      start: 1632,
      length: 10,
      convRule: rule8
  }, {
      start: 1642,
      length: 4,
      convRule: rule2
  }, {
      start: 1646,
      length: 2,
      convRule: rule14
  }, {
      start: 1648,
      length: 1,
      convRule: rule92
  }, {
      start: 1649,
      length: 99,
      convRule: rule14
  }, {
      start: 1748,
      length: 1,
      convRule: rule2
  }, {
      start: 1749,
      length: 1,
      convRule: rule14
  }, {
      start: 1750,
      length: 7,
      convRule: rule92
  }, {
      start: 1757,
      length: 1,
      convRule: rule16
  }, {
      start: 1758,
      length: 1,
      convRule: rule13
  }, {
      start: 1759,
      length: 6,
      convRule: rule92
  }, {
      start: 1765,
      length: 2,
      convRule: rule91
  }, {
      start: 1767,
      length: 2,
      convRule: rule92
  }, {
      start: 1769,
      length: 1,
      convRule: rule13
  }, {
      start: 1770,
      length: 4,
      convRule: rule92
  }, {
      start: 1774,
      length: 2,
      convRule: rule14
  }, {
      start: 1776,
      length: 10,
      convRule: rule8
  }, {
      start: 1786,
      length: 3,
      convRule: rule14
  }, {
      start: 1789,
      length: 2,
      convRule: rule13
  }, {
      start: 1791,
      length: 1,
      convRule: rule14
  }, {
      start: 1792,
      length: 14,
      convRule: rule2
  }, {
      start: 1807,
      length: 1,
      convRule: rule16
  }, {
      start: 1808,
      length: 1,
      convRule: rule14
  }, {
      start: 1809,
      length: 1,
      convRule: rule92
  }, {
      start: 1810,
      length: 30,
      convRule: rule14
  }, {
      start: 1840,
      length: 27,
      convRule: rule92
  }, {
      start: 1869,
      length: 89,
      convRule: rule14
  }, {
      start: 1958,
      length: 11,
      convRule: rule92
  }, {
      start: 1969,
      length: 1,
      convRule: rule14
  }, {
      start: 1984,
      length: 10,
      convRule: rule8
  }, {
      start: 1994,
      length: 33,
      convRule: rule14
  }, {
      start: 2027,
      length: 9,
      convRule: rule92
  }, {
      start: 2036,
      length: 2,
      convRule: rule91
  }, {
      start: 2038,
      length: 1,
      convRule: rule13
  }, {
      start: 2039,
      length: 3,
      convRule: rule2
  }, {
      start: 2042,
      length: 1,
      convRule: rule91
  }, {
      start: 2045,
      length: 1,
      convRule: rule92
  }, {
      start: 2046,
      length: 2,
      convRule: rule3
  }, {
      start: 2048,
      length: 22,
      convRule: rule14
  }, {
      start: 2070,
      length: 4,
      convRule: rule92
  }, {
      start: 2074,
      length: 1,
      convRule: rule91
  }, {
      start: 2075,
      length: 9,
      convRule: rule92
  }, {
      start: 2084,
      length: 1,
      convRule: rule91
  }, {
      start: 2085,
      length: 3,
      convRule: rule92
  }, {
      start: 2088,
      length: 1,
      convRule: rule91
  }, {
      start: 2089,
      length: 5,
      convRule: rule92
  }, {
      start: 2096,
      length: 15,
      convRule: rule2
  }, {
      start: 2112,
      length: 25,
      convRule: rule14
  }, {
      start: 2137,
      length: 3,
      convRule: rule92
  }, {
      start: 2142,
      length: 1,
      convRule: rule2
  }, {
      start: 2144,
      length: 11,
      convRule: rule14
  }, {
      start: 2208,
      length: 21,
      convRule: rule14
  }, {
      start: 2230,
      length: 18,
      convRule: rule14
  }, {
      start: 2259,
      length: 15,
      convRule: rule92
  }, {
      start: 2274,
      length: 1,
      convRule: rule16
  }, {
      start: 2275,
      length: 32,
      convRule: rule92
  }, {
      start: 2307,
      length: 1,
      convRule: rule124
  }, {
      start: 2308,
      length: 54,
      convRule: rule14
  }, {
      start: 2362,
      length: 1,
      convRule: rule92
  }, {
      start: 2363,
      length: 1,
      convRule: rule124
  }, {
      start: 2364,
      length: 1,
      convRule: rule92
  }, {
      start: 2365,
      length: 1,
      convRule: rule14
  }, {
      start: 2366,
      length: 3,
      convRule: rule124
  }, {
      start: 2369,
      length: 8,
      convRule: rule92
  }, {
      start: 2377,
      length: 4,
      convRule: rule124
  }, {
      start: 2381,
      length: 1,
      convRule: rule92
  }, {
      start: 2382,
      length: 2,
      convRule: rule124
  }, {
      start: 2384,
      length: 1,
      convRule: rule14
  }, {
      start: 2385,
      length: 7,
      convRule: rule92
  }, {
      start: 2392,
      length: 10,
      convRule: rule14
  }, {
      start: 2402,
      length: 2,
      convRule: rule92
  }, {
      start: 2404,
      length: 2,
      convRule: rule2
  }, {
      start: 2406,
      length: 10,
      convRule: rule8
  }, {
      start: 2416,
      length: 1,
      convRule: rule2
  }, {
      start: 2417,
      length: 1,
      convRule: rule91
  }, {
      start: 2418,
      length: 15,
      convRule: rule14
  }, {
      start: 2433,
      length: 1,
      convRule: rule92
  }, {
      start: 2434,
      length: 2,
      convRule: rule124
  }, {
      start: 2437,
      length: 8,
      convRule: rule14
  }, {
      start: 2447,
      length: 2,
      convRule: rule14
  }, {
      start: 2451,
      length: 22,
      convRule: rule14
  }, {
      start: 2474,
      length: 7,
      convRule: rule14
  }, {
      start: 2482,
      length: 1,
      convRule: rule14
  }, {
      start: 2486,
      length: 4,
      convRule: rule14
  }, {
      start: 2492,
      length: 1,
      convRule: rule92
  }, {
      start: 2493,
      length: 1,
      convRule: rule14
  }, {
      start: 2494,
      length: 3,
      convRule: rule124
  }, {
      start: 2497,
      length: 4,
      convRule: rule92
  }, {
      start: 2503,
      length: 2,
      convRule: rule124
  }, {
      start: 2507,
      length: 2,
      convRule: rule124
  }, {
      start: 2509,
      length: 1,
      convRule: rule92
  }, {
      start: 2510,
      length: 1,
      convRule: rule14
  }, {
      start: 2519,
      length: 1,
      convRule: rule124
  }, {
      start: 2524,
      length: 2,
      convRule: rule14
  }, {
      start: 2527,
      length: 3,
      convRule: rule14
  }, {
      start: 2530,
      length: 2,
      convRule: rule92
  }, {
      start: 2534,
      length: 10,
      convRule: rule8
  }, {
      start: 2544,
      length: 2,
      convRule: rule14
  }, {
      start: 2546,
      length: 2,
      convRule: rule3
  }, {
      start: 2548,
      length: 6,
      convRule: rule17
  }, {
      start: 2554,
      length: 1,
      convRule: rule13
  }, {
      start: 2555,
      length: 1,
      convRule: rule3
  }, {
      start: 2556,
      length: 1,
      convRule: rule14
  }, {
      start: 2557,
      length: 1,
      convRule: rule2
  }, {
      start: 2558,
      length: 1,
      convRule: rule92
  }, {
      start: 2561,
      length: 2,
      convRule: rule92
  }, {
      start: 2563,
      length: 1,
      convRule: rule124
  }, {
      start: 2565,
      length: 6,
      convRule: rule14
  }, {
      start: 2575,
      length: 2,
      convRule: rule14
  }, {
      start: 2579,
      length: 22,
      convRule: rule14
  }, {
      start: 2602,
      length: 7,
      convRule: rule14
  }, {
      start: 2610,
      length: 2,
      convRule: rule14
  }, {
      start: 2613,
      length: 2,
      convRule: rule14
  }, {
      start: 2616,
      length: 2,
      convRule: rule14
  }, {
      start: 2620,
      length: 1,
      convRule: rule92
  }, {
      start: 2622,
      length: 3,
      convRule: rule124
  }, {
      start: 2625,
      length: 2,
      convRule: rule92
  }, {
      start: 2631,
      length: 2,
      convRule: rule92
  }, {
      start: 2635,
      length: 3,
      convRule: rule92
  }, {
      start: 2641,
      length: 1,
      convRule: rule92
  }, {
      start: 2649,
      length: 4,
      convRule: rule14
  }, {
      start: 2654,
      length: 1,
      convRule: rule14
  }, {
      start: 2662,
      length: 10,
      convRule: rule8
  }, {
      start: 2672,
      length: 2,
      convRule: rule92
  }, {
      start: 2674,
      length: 3,
      convRule: rule14
  }, {
      start: 2677,
      length: 1,
      convRule: rule92
  }, {
      start: 2678,
      length: 1,
      convRule: rule2
  }, {
      start: 2689,
      length: 2,
      convRule: rule92
  }, {
      start: 2691,
      length: 1,
      convRule: rule124
  }, {
      start: 2693,
      length: 9,
      convRule: rule14
  }, {
      start: 2703,
      length: 3,
      convRule: rule14
  }, {
      start: 2707,
      length: 22,
      convRule: rule14
  }, {
      start: 2730,
      length: 7,
      convRule: rule14
  }, {
      start: 2738,
      length: 2,
      convRule: rule14
  }, {
      start: 2741,
      length: 5,
      convRule: rule14
  }, {
      start: 2748,
      length: 1,
      convRule: rule92
  }, {
      start: 2749,
      length: 1,
      convRule: rule14
  }, {
      start: 2750,
      length: 3,
      convRule: rule124
  }, {
      start: 2753,
      length: 5,
      convRule: rule92
  }, {
      start: 2759,
      length: 2,
      convRule: rule92
  }, {
      start: 2761,
      length: 1,
      convRule: rule124
  }, {
      start: 2763,
      length: 2,
      convRule: rule124
  }, {
      start: 2765,
      length: 1,
      convRule: rule92
  }, {
      start: 2768,
      length: 1,
      convRule: rule14
  }, {
      start: 2784,
      length: 2,
      convRule: rule14
  }, {
      start: 2786,
      length: 2,
      convRule: rule92
  }, {
      start: 2790,
      length: 10,
      convRule: rule8
  }, {
      start: 2800,
      length: 1,
      convRule: rule2
  }, {
      start: 2801,
      length: 1,
      convRule: rule3
  }, {
      start: 2809,
      length: 1,
      convRule: rule14
  }, {
      start: 2810,
      length: 6,
      convRule: rule92
  }, {
      start: 2817,
      length: 1,
      convRule: rule92
  }, {
      start: 2818,
      length: 2,
      convRule: rule124
  }, {
      start: 2821,
      length: 8,
      convRule: rule14
  }, {
      start: 2831,
      length: 2,
      convRule: rule14
  }, {
      start: 2835,
      length: 22,
      convRule: rule14
  }, {
      start: 2858,
      length: 7,
      convRule: rule14
  }, {
      start: 2866,
      length: 2,
      convRule: rule14
  }, {
      start: 2869,
      length: 5,
      convRule: rule14
  }, {
      start: 2876,
      length: 1,
      convRule: rule92
  }, {
      start: 2877,
      length: 1,
      convRule: rule14
  }, {
      start: 2878,
      length: 1,
      convRule: rule124
  }, {
      start: 2879,
      length: 1,
      convRule: rule92
  }, {
      start: 2880,
      length: 1,
      convRule: rule124
  }, {
      start: 2881,
      length: 4,
      convRule: rule92
  }, {
      start: 2887,
      length: 2,
      convRule: rule124
  }, {
      start: 2891,
      length: 2,
      convRule: rule124
  }, {
      start: 2893,
      length: 1,
      convRule: rule92
  }, {
      start: 2901,
      length: 2,
      convRule: rule92
  }, {
      start: 2903,
      length: 1,
      convRule: rule124
  }, {
      start: 2908,
      length: 2,
      convRule: rule14
  }, {
      start: 2911,
      length: 3,
      convRule: rule14
  }, {
      start: 2914,
      length: 2,
      convRule: rule92
  }, {
      start: 2918,
      length: 10,
      convRule: rule8
  }, {
      start: 2928,
      length: 1,
      convRule: rule13
  }, {
      start: 2929,
      length: 1,
      convRule: rule14
  }, {
      start: 2930,
      length: 6,
      convRule: rule17
  }, {
      start: 2946,
      length: 1,
      convRule: rule92
  }, {
      start: 2947,
      length: 1,
      convRule: rule14
  }, {
      start: 2949,
      length: 6,
      convRule: rule14
  }, {
      start: 2958,
      length: 3,
      convRule: rule14
  }, {
      start: 2962,
      length: 4,
      convRule: rule14
  }, {
      start: 2969,
      length: 2,
      convRule: rule14
  }, {
      start: 2972,
      length: 1,
      convRule: rule14
  }, {
      start: 2974,
      length: 2,
      convRule: rule14
  }, {
      start: 2979,
      length: 2,
      convRule: rule14
  }, {
      start: 2984,
      length: 3,
      convRule: rule14
  }, {
      start: 2990,
      length: 12,
      convRule: rule14
  }, {
      start: 3006,
      length: 2,
      convRule: rule124
  }, {
      start: 3008,
      length: 1,
      convRule: rule92
  }, {
      start: 3009,
      length: 2,
      convRule: rule124
  }, {
      start: 3014,
      length: 3,
      convRule: rule124
  }, {
      start: 3018,
      length: 3,
      convRule: rule124
  }, {
      start: 3021,
      length: 1,
      convRule: rule92
  }, {
      start: 3024,
      length: 1,
      convRule: rule14
  }, {
      start: 3031,
      length: 1,
      convRule: rule124
  }, {
      start: 3046,
      length: 10,
      convRule: rule8
  }, {
      start: 3056,
      length: 3,
      convRule: rule17
  }, {
      start: 3059,
      length: 6,
      convRule: rule13
  }, {
      start: 3065,
      length: 1,
      convRule: rule3
  }, {
      start: 3066,
      length: 1,
      convRule: rule13
  }, {
      start: 3072,
      length: 1,
      convRule: rule92
  }, {
      start: 3073,
      length: 3,
      convRule: rule124
  }, {
      start: 3076,
      length: 1,
      convRule: rule92
  }, {
      start: 3077,
      length: 8,
      convRule: rule14
  }, {
      start: 3086,
      length: 3,
      convRule: rule14
  }, {
      start: 3090,
      length: 23,
      convRule: rule14
  }, {
      start: 3114,
      length: 16,
      convRule: rule14
  }, {
      start: 3133,
      length: 1,
      convRule: rule14
  }, {
      start: 3134,
      length: 3,
      convRule: rule92
  }, {
      start: 3137,
      length: 4,
      convRule: rule124
  }, {
      start: 3142,
      length: 3,
      convRule: rule92
  }, {
      start: 3146,
      length: 4,
      convRule: rule92
  }, {
      start: 3157,
      length: 2,
      convRule: rule92
  }, {
      start: 3160,
      length: 3,
      convRule: rule14
  }, {
      start: 3168,
      length: 2,
      convRule: rule14
  }, {
      start: 3170,
      length: 2,
      convRule: rule92
  }, {
      start: 3174,
      length: 10,
      convRule: rule8
  }, {
      start: 3191,
      length: 1,
      convRule: rule2
  }, {
      start: 3192,
      length: 7,
      convRule: rule17
  }, {
      start: 3199,
      length: 1,
      convRule: rule13
  }, {
      start: 3200,
      length: 1,
      convRule: rule14
  }, {
      start: 3201,
      length: 1,
      convRule: rule92
  }, {
      start: 3202,
      length: 2,
      convRule: rule124
  }, {
      start: 3204,
      length: 1,
      convRule: rule2
  }, {
      start: 3205,
      length: 8,
      convRule: rule14
  }, {
      start: 3214,
      length: 3,
      convRule: rule14
  }, {
      start: 3218,
      length: 23,
      convRule: rule14
  }, {
      start: 3242,
      length: 10,
      convRule: rule14
  }, {
      start: 3253,
      length: 5,
      convRule: rule14
  }, {
      start: 3260,
      length: 1,
      convRule: rule92
  }, {
      start: 3261,
      length: 1,
      convRule: rule14
  }, {
      start: 3262,
      length: 1,
      convRule: rule124
  }, {
      start: 3263,
      length: 1,
      convRule: rule92
  }, {
      start: 3264,
      length: 5,
      convRule: rule124
  }, {
      start: 3270,
      length: 1,
      convRule: rule92
  }, {
      start: 3271,
      length: 2,
      convRule: rule124
  }, {
      start: 3274,
      length: 2,
      convRule: rule124
  }, {
      start: 3276,
      length: 2,
      convRule: rule92
  }, {
      start: 3285,
      length: 2,
      convRule: rule124
  }, {
      start: 3294,
      length: 1,
      convRule: rule14
  }, {
      start: 3296,
      length: 2,
      convRule: rule14
  }, {
      start: 3298,
      length: 2,
      convRule: rule92
  }, {
      start: 3302,
      length: 10,
      convRule: rule8
  }, {
      start: 3313,
      length: 2,
      convRule: rule14
  }, {
      start: 3328,
      length: 2,
      convRule: rule92
  }, {
      start: 3330,
      length: 2,
      convRule: rule124
  }, {
      start: 3332,
      length: 9,
      convRule: rule14
  }, {
      start: 3342,
      length: 3,
      convRule: rule14
  }, {
      start: 3346,
      length: 41,
      convRule: rule14
  }, {
      start: 3387,
      length: 2,
      convRule: rule92
  }, {
      start: 3389,
      length: 1,
      convRule: rule14
  }, {
      start: 3390,
      length: 3,
      convRule: rule124
  }, {
      start: 3393,
      length: 4,
      convRule: rule92
  }, {
      start: 3398,
      length: 3,
      convRule: rule124
  }, {
      start: 3402,
      length: 3,
      convRule: rule124
  }, {
      start: 3405,
      length: 1,
      convRule: rule92
  }, {
      start: 3406,
      length: 1,
      convRule: rule14
  }, {
      start: 3407,
      length: 1,
      convRule: rule13
  }, {
      start: 3412,
      length: 3,
      convRule: rule14
  }, {
      start: 3415,
      length: 1,
      convRule: rule124
  }, {
      start: 3416,
      length: 7,
      convRule: rule17
  }, {
      start: 3423,
      length: 3,
      convRule: rule14
  }, {
      start: 3426,
      length: 2,
      convRule: rule92
  }, {
      start: 3430,
      length: 10,
      convRule: rule8
  }, {
      start: 3440,
      length: 9,
      convRule: rule17
  }, {
      start: 3449,
      length: 1,
      convRule: rule13
  }, {
      start: 3450,
      length: 6,
      convRule: rule14
  }, {
      start: 3457,
      length: 1,
      convRule: rule92
  }, {
      start: 3458,
      length: 2,
      convRule: rule124
  }, {
      start: 3461,
      length: 18,
      convRule: rule14
  }, {
      start: 3482,
      length: 24,
      convRule: rule14
  }, {
      start: 3507,
      length: 9,
      convRule: rule14
  }, {
      start: 3517,
      length: 1,
      convRule: rule14
  }, {
      start: 3520,
      length: 7,
      convRule: rule14
  }, {
      start: 3530,
      length: 1,
      convRule: rule92
  }, {
      start: 3535,
      length: 3,
      convRule: rule124
  }, {
      start: 3538,
      length: 3,
      convRule: rule92
  }, {
      start: 3542,
      length: 1,
      convRule: rule92
  }, {
      start: 3544,
      length: 8,
      convRule: rule124
  }, {
      start: 3558,
      length: 10,
      convRule: rule8
  }, {
      start: 3570,
      length: 2,
      convRule: rule124
  }, {
      start: 3572,
      length: 1,
      convRule: rule2
  }, {
      start: 3585,
      length: 48,
      convRule: rule14
  }, {
      start: 3633,
      length: 1,
      convRule: rule92
  }, {
      start: 3634,
      length: 2,
      convRule: rule14
  }, {
      start: 3636,
      length: 7,
      convRule: rule92
  }, {
      start: 3647,
      length: 1,
      convRule: rule3
  }, {
      start: 3648,
      length: 6,
      convRule: rule14
  }, {
      start: 3654,
      length: 1,
      convRule: rule91
  }, {
      start: 3655,
      length: 8,
      convRule: rule92
  }, {
      start: 3663,
      length: 1,
      convRule: rule2
  }, {
      start: 3664,
      length: 10,
      convRule: rule8
  }, {
      start: 3674,
      length: 2,
      convRule: rule2
  }, {
      start: 3713,
      length: 2,
      convRule: rule14
  }, {
      start: 3716,
      length: 1,
      convRule: rule14
  }, {
      start: 3718,
      length: 5,
      convRule: rule14
  }, {
      start: 3724,
      length: 24,
      convRule: rule14
  }, {
      start: 3749,
      length: 1,
      convRule: rule14
  }, {
      start: 3751,
      length: 10,
      convRule: rule14
  }, {
      start: 3761,
      length: 1,
      convRule: rule92
  }, {
      start: 3762,
      length: 2,
      convRule: rule14
  }, {
      start: 3764,
      length: 9,
      convRule: rule92
  }, {
      start: 3773,
      length: 1,
      convRule: rule14
  }, {
      start: 3776,
      length: 5,
      convRule: rule14
  }, {
      start: 3782,
      length: 1,
      convRule: rule91
  }, {
      start: 3784,
      length: 6,
      convRule: rule92
  }, {
      start: 3792,
      length: 10,
      convRule: rule8
  }, {
      start: 3804,
      length: 4,
      convRule: rule14
  }, {
      start: 3840,
      length: 1,
      convRule: rule14
  }, {
      start: 3841,
      length: 3,
      convRule: rule13
  }, {
      start: 3844,
      length: 15,
      convRule: rule2
  }, {
      start: 3859,
      length: 1,
      convRule: rule13
  }, {
      start: 3860,
      length: 1,
      convRule: rule2
  }, {
      start: 3861,
      length: 3,
      convRule: rule13
  }, {
      start: 3864,
      length: 2,
      convRule: rule92
  }, {
      start: 3866,
      length: 6,
      convRule: rule13
  }, {
      start: 3872,
      length: 10,
      convRule: rule8
  }, {
      start: 3882,
      length: 10,
      convRule: rule17
  }, {
      start: 3892,
      length: 1,
      convRule: rule13
  }, {
      start: 3893,
      length: 1,
      convRule: rule92
  }, {
      start: 3894,
      length: 1,
      convRule: rule13
  }, {
      start: 3895,
      length: 1,
      convRule: rule92
  }, {
      start: 3896,
      length: 1,
      convRule: rule13
  }, {
      start: 3897,
      length: 1,
      convRule: rule92
  }, {
      start: 3898,
      length: 1,
      convRule: rule4
  }, {
      start: 3899,
      length: 1,
      convRule: rule5
  }, {
      start: 3900,
      length: 1,
      convRule: rule4
  }, {
      start: 3901,
      length: 1,
      convRule: rule5
  }, {
      start: 3902,
      length: 2,
      convRule: rule124
  }, {
      start: 3904,
      length: 8,
      convRule: rule14
  }, {
      start: 3913,
      length: 36,
      convRule: rule14
  }, {
      start: 3953,
      length: 14,
      convRule: rule92
  }, {
      start: 3967,
      length: 1,
      convRule: rule124
  }, {
      start: 3968,
      length: 5,
      convRule: rule92
  }, {
      start: 3973,
      length: 1,
      convRule: rule2
  }, {
      start: 3974,
      length: 2,
      convRule: rule92
  }, {
      start: 3976,
      length: 5,
      convRule: rule14
  }, {
      start: 3981,
      length: 11,
      convRule: rule92
  }, {
      start: 3993,
      length: 36,
      convRule: rule92
  }, {
      start: 4030,
      length: 8,
      convRule: rule13
  }, {
      start: 4038,
      length: 1,
      convRule: rule92
  }, {
      start: 4039,
      length: 6,
      convRule: rule13
  }, {
      start: 4046,
      length: 2,
      convRule: rule13
  }, {
      start: 4048,
      length: 5,
      convRule: rule2
  }, {
      start: 4053,
      length: 4,
      convRule: rule13
  }, {
      start: 4057,
      length: 2,
      convRule: rule2
  }, {
      start: 4096,
      length: 43,
      convRule: rule14
  }, {
      start: 4139,
      length: 2,
      convRule: rule124
  }, {
      start: 4141,
      length: 4,
      convRule: rule92
  }, {
      start: 4145,
      length: 1,
      convRule: rule124
  }, {
      start: 4146,
      length: 6,
      convRule: rule92
  }, {
      start: 4152,
      length: 1,
      convRule: rule124
  }, {
      start: 4153,
      length: 2,
      convRule: rule92
  }, {
      start: 4155,
      length: 2,
      convRule: rule124
  }, {
      start: 4157,
      length: 2,
      convRule: rule92
  }, {
      start: 4159,
      length: 1,
      convRule: rule14
  }, {
      start: 4160,
      length: 10,
      convRule: rule8
  }, {
      start: 4170,
      length: 6,
      convRule: rule2
  }, {
      start: 4176,
      length: 6,
      convRule: rule14
  }, {
      start: 4182,
      length: 2,
      convRule: rule124
  }, {
      start: 4184,
      length: 2,
      convRule: rule92
  }, {
      start: 4186,
      length: 4,
      convRule: rule14
  }, {
      start: 4190,
      length: 3,
      convRule: rule92
  }, {
      start: 4193,
      length: 1,
      convRule: rule14
  }, {
      start: 4194,
      length: 3,
      convRule: rule124
  }, {
      start: 4197,
      length: 2,
      convRule: rule14
  }, {
      start: 4199,
      length: 7,
      convRule: rule124
  }, {
      start: 4206,
      length: 3,
      convRule: rule14
  }, {
      start: 4209,
      length: 4,
      convRule: rule92
  }, {
      start: 4213,
      length: 13,
      convRule: rule14
  }, {
      start: 4226,
      length: 1,
      convRule: rule92
  }, {
      start: 4227,
      length: 2,
      convRule: rule124
  }, {
      start: 4229,
      length: 2,
      convRule: rule92
  }, {
      start: 4231,
      length: 6,
      convRule: rule124
  }, {
      start: 4237,
      length: 1,
      convRule: rule92
  }, {
      start: 4238,
      length: 1,
      convRule: rule14
  }, {
      start: 4239,
      length: 1,
      convRule: rule124
  }, {
      start: 4240,
      length: 10,
      convRule: rule8
  }, {
      start: 4250,
      length: 3,
      convRule: rule124
  }, {
      start: 4253,
      length: 1,
      convRule: rule92
  }, {
      start: 4254,
      length: 2,
      convRule: rule13
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4347,
      length: 1,
      convRule: rule2
  }, {
      start: 4348,
      length: 1,
      convRule: rule91
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 4352,
      length: 329,
      convRule: rule14
  }, {
      start: 4682,
      length: 4,
      convRule: rule14
  }, {
      start: 4688,
      length: 7,
      convRule: rule14
  }, {
      start: 4696,
      length: 1,
      convRule: rule14
  }, {
      start: 4698,
      length: 4,
      convRule: rule14
  }, {
      start: 4704,
      length: 41,
      convRule: rule14
  }, {
      start: 4746,
      length: 4,
      convRule: rule14
  }, {
      start: 4752,
      length: 33,
      convRule: rule14
  }, {
      start: 4786,
      length: 4,
      convRule: rule14
  }, {
      start: 4792,
      length: 7,
      convRule: rule14
  }, {
      start: 4800,
      length: 1,
      convRule: rule14
  }, {
      start: 4802,
      length: 4,
      convRule: rule14
  }, {
      start: 4808,
      length: 15,
      convRule: rule14
  }, {
      start: 4824,
      length: 57,
      convRule: rule14
  }, {
      start: 4882,
      length: 4,
      convRule: rule14
  }, {
      start: 4888,
      length: 67,
      convRule: rule14
  }, {
      start: 4957,
      length: 3,
      convRule: rule92
  }, {
      start: 4960,
      length: 9,
      convRule: rule2
  }, {
      start: 4969,
      length: 20,
      convRule: rule17
  }, {
      start: 4992,
      length: 16,
      convRule: rule14
  }, {
      start: 5008,
      length: 10,
      convRule: rule13
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 5120,
      length: 1,
      convRule: rule7
  }, {
      start: 5121,
      length: 620,
      convRule: rule14
  }, {
      start: 5741,
      length: 1,
      convRule: rule13
  }, {
      start: 5742,
      length: 1,
      convRule: rule2
  }, {
      start: 5743,
      length: 17,
      convRule: rule14
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 5761,
      length: 26,
      convRule: rule14
  }, {
      start: 5787,
      length: 1,
      convRule: rule4
  }, {
      start: 5788,
      length: 1,
      convRule: rule5
  }, {
      start: 5792,
      length: 75,
      convRule: rule14
  }, {
      start: 5867,
      length: 3,
      convRule: rule2
  }, {
      start: 5870,
      length: 3,
      convRule: rule128
  }, {
      start: 5873,
      length: 8,
      convRule: rule14
  }, {
      start: 5888,
      length: 13,
      convRule: rule14
  }, {
      start: 5902,
      length: 4,
      convRule: rule14
  }, {
      start: 5906,
      length: 3,
      convRule: rule92
  }, {
      start: 5920,
      length: 18,
      convRule: rule14
  }, {
      start: 5938,
      length: 3,
      convRule: rule92
  }, {
      start: 5941,
      length: 2,
      convRule: rule2
  }, {
      start: 5952,
      length: 18,
      convRule: rule14
  }, {
      start: 5970,
      length: 2,
      convRule: rule92
  }, {
      start: 5984,
      length: 13,
      convRule: rule14
  }, {
      start: 5998,
      length: 3,
      convRule: rule14
  }, {
      start: 6002,
      length: 2,
      convRule: rule92
  }, {
      start: 6016,
      length: 52,
      convRule: rule14
  }, {
      start: 6068,
      length: 2,
      convRule: rule92
  }, {
      start: 6070,
      length: 1,
      convRule: rule124
  }, {
      start: 6071,
      length: 7,
      convRule: rule92
  }, {
      start: 6078,
      length: 8,
      convRule: rule124
  }, {
      start: 6086,
      length: 1,
      convRule: rule92
  }, {
      start: 6087,
      length: 2,
      convRule: rule124
  }, {
      start: 6089,
      length: 11,
      convRule: rule92
  }, {
      start: 6100,
      length: 3,
      convRule: rule2
  }, {
      start: 6103,
      length: 1,
      convRule: rule91
  }, {
      start: 6104,
      length: 3,
      convRule: rule2
  }, {
      start: 6107,
      length: 1,
      convRule: rule3
  }, {
      start: 6108,
      length: 1,
      convRule: rule14
  }, {
      start: 6109,
      length: 1,
      convRule: rule92
  }, {
      start: 6112,
      length: 10,
      convRule: rule8
  }, {
      start: 6128,
      length: 10,
      convRule: rule17
  }, {
      start: 6144,
      length: 6,
      convRule: rule2
  }, {
      start: 6150,
      length: 1,
      convRule: rule7
  }, {
      start: 6151,
      length: 4,
      convRule: rule2
  }, {
      start: 6155,
      length: 3,
      convRule: rule92
  }, {
      start: 6158,
      length: 1,
      convRule: rule16
  }, {
      start: 6160,
      length: 10,
      convRule: rule8
  }, {
      start: 6176,
      length: 35,
      convRule: rule14
  }, {
      start: 6211,
      length: 1,
      convRule: rule91
  }, {
      start: 6212,
      length: 53,
      convRule: rule14
  }, {
      start: 6272,
      length: 5,
      convRule: rule14
  }, {
      start: 6277,
      length: 2,
      convRule: rule92
  }, {
      start: 6279,
      length: 34,
      convRule: rule14
  }, {
      start: 6313,
      length: 1,
      convRule: rule92
  }, {
      start: 6314,
      length: 1,
      convRule: rule14
  }, {
      start: 6320,
      length: 70,
      convRule: rule14
  }, {
      start: 6400,
      length: 31,
      convRule: rule14
  }, {
      start: 6432,
      length: 3,
      convRule: rule92
  }, {
      start: 6435,
      length: 4,
      convRule: rule124
  }, {
      start: 6439,
      length: 2,
      convRule: rule92
  }, {
      start: 6441,
      length: 3,
      convRule: rule124
  }, {
      start: 6448,
      length: 2,
      convRule: rule124
  }, {
      start: 6450,
      length: 1,
      convRule: rule92
  }, {
      start: 6451,
      length: 6,
      convRule: rule124
  }, {
      start: 6457,
      length: 3,
      convRule: rule92
  }, {
      start: 6464,
      length: 1,
      convRule: rule13
  }, {
      start: 6468,
      length: 2,
      convRule: rule2
  }, {
      start: 6470,
      length: 10,
      convRule: rule8
  }, {
      start: 6480,
      length: 30,
      convRule: rule14
  }, {
      start: 6512,
      length: 5,
      convRule: rule14
  }, {
      start: 6528,
      length: 44,
      convRule: rule14
  }, {
      start: 6576,
      length: 26,
      convRule: rule14
  }, {
      start: 6608,
      length: 10,
      convRule: rule8
  }, {
      start: 6618,
      length: 1,
      convRule: rule17
  }, {
      start: 6622,
      length: 34,
      convRule: rule13
  }, {
      start: 6656,
      length: 23,
      convRule: rule14
  }, {
      start: 6679,
      length: 2,
      convRule: rule92
  }, {
      start: 6681,
      length: 2,
      convRule: rule124
  }, {
      start: 6683,
      length: 1,
      convRule: rule92
  }, {
      start: 6686,
      length: 2,
      convRule: rule2
  }, {
      start: 6688,
      length: 53,
      convRule: rule14
  }, {
      start: 6741,
      length: 1,
      convRule: rule124
  }, {
      start: 6742,
      length: 1,
      convRule: rule92
  }, {
      start: 6743,
      length: 1,
      convRule: rule124
  }, {
      start: 6744,
      length: 7,
      convRule: rule92
  }, {
      start: 6752,
      length: 1,
      convRule: rule92
  }, {
      start: 6753,
      length: 1,
      convRule: rule124
  }, {
      start: 6754,
      length: 1,
      convRule: rule92
  }, {
      start: 6755,
      length: 2,
      convRule: rule124
  }, {
      start: 6757,
      length: 8,
      convRule: rule92
  }, {
      start: 6765,
      length: 6,
      convRule: rule124
  }, {
      start: 6771,
      length: 10,
      convRule: rule92
  }, {
      start: 6783,
      length: 1,
      convRule: rule92
  }, {
      start: 6784,
      length: 10,
      convRule: rule8
  }, {
      start: 6800,
      length: 10,
      convRule: rule8
  }, {
      start: 6816,
      length: 7,
      convRule: rule2
  }, {
      start: 6823,
      length: 1,
      convRule: rule91
  }, {
      start: 6824,
      length: 6,
      convRule: rule2
  }, {
      start: 6832,
      length: 14,
      convRule: rule92
  }, {
      start: 6846,
      length: 1,
      convRule: rule119
  }, {
      start: 6847,
      length: 2,
      convRule: rule92
  }, {
      start: 6912,
      length: 4,
      convRule: rule92
  }, {
      start: 6916,
      length: 1,
      convRule: rule124
  }, {
      start: 6917,
      length: 47,
      convRule: rule14
  }, {
      start: 6964,
      length: 1,
      convRule: rule92
  }, {
      start: 6965,
      length: 1,
      convRule: rule124
  }, {
      start: 6966,
      length: 5,
      convRule: rule92
  }, {
      start: 6971,
      length: 1,
      convRule: rule124
  }, {
      start: 6972,
      length: 1,
      convRule: rule92
  }, {
      start: 6973,
      length: 5,
      convRule: rule124
  }, {
      start: 6978,
      length: 1,
      convRule: rule92
  }, {
      start: 6979,
      length: 2,
      convRule: rule124
  }, {
      start: 6981,
      length: 7,
      convRule: rule14
  }, {
      start: 6992,
      length: 10,
      convRule: rule8
  }, {
      start: 7002,
      length: 7,
      convRule: rule2
  }, {
      start: 7009,
      length: 10,
      convRule: rule13
  }, {
      start: 7019,
      length: 9,
      convRule: rule92
  }, {
      start: 7028,
      length: 9,
      convRule: rule13
  }, {
      start: 7040,
      length: 2,
      convRule: rule92
  }, {
      start: 7042,
      length: 1,
      convRule: rule124
  }, {
      start: 7043,
      length: 30,
      convRule: rule14
  }, {
      start: 7073,
      length: 1,
      convRule: rule124
  }, {
      start: 7074,
      length: 4,
      convRule: rule92
  }, {
      start: 7078,
      length: 2,
      convRule: rule124
  }, {
      start: 7080,
      length: 2,
      convRule: rule92
  }, {
      start: 7082,
      length: 1,
      convRule: rule124
  }, {
      start: 7083,
      length: 3,
      convRule: rule92
  }, {
      start: 7086,
      length: 2,
      convRule: rule14
  }, {
      start: 7088,
      length: 10,
      convRule: rule8
  }, {
      start: 7098,
      length: 44,
      convRule: rule14
  }, {
      start: 7142,
      length: 1,
      convRule: rule92
  }, {
      start: 7143,
      length: 1,
      convRule: rule124
  }, {
      start: 7144,
      length: 2,
      convRule: rule92
  }, {
      start: 7146,
      length: 3,
      convRule: rule124
  }, {
      start: 7149,
      length: 1,
      convRule: rule92
  }, {
      start: 7150,
      length: 1,
      convRule: rule124
  }, {
      start: 7151,
      length: 3,
      convRule: rule92
  }, {
      start: 7154,
      length: 2,
      convRule: rule124
  }, {
      start: 7164,
      length: 4,
      convRule: rule2
  }, {
      start: 7168,
      length: 36,
      convRule: rule14
  }, {
      start: 7204,
      length: 8,
      convRule: rule124
  }, {
      start: 7212,
      length: 8,
      convRule: rule92
  }, {
      start: 7220,
      length: 2,
      convRule: rule124
  }, {
      start: 7222,
      length: 2,
      convRule: rule92
  }, {
      start: 7227,
      length: 5,
      convRule: rule2
  }, {
      start: 7232,
      length: 10,
      convRule: rule8
  }, {
      start: 7245,
      length: 3,
      convRule: rule14
  }, {
      start: 7248,
      length: 10,
      convRule: rule8
  }, {
      start: 7258,
      length: 30,
      convRule: rule14
  }, {
      start: 7288,
      length: 6,
      convRule: rule91
  }, {
      start: 7294,
      length: 2,
      convRule: rule2
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7360,
      length: 8,
      convRule: rule2
  }, {
      start: 7376,
      length: 3,
      convRule: rule92
  }, {
      start: 7379,
      length: 1,
      convRule: rule2
  }, {
      start: 7380,
      length: 13,
      convRule: rule92
  }, {
      start: 7393,
      length: 1,
      convRule: rule124
  }, {
      start: 7394,
      length: 7,
      convRule: rule92
  }, {
      start: 7401,
      length: 4,
      convRule: rule14
  }, {
      start: 7405,
      length: 1,
      convRule: rule92
  }, {
      start: 7406,
      length: 6,
      convRule: rule14
  }, {
      start: 7412,
      length: 1,
      convRule: rule92
  }, {
      start: 7413,
      length: 2,
      convRule: rule14
  }, {
      start: 7415,
      length: 1,
      convRule: rule124
  }, {
      start: 7416,
      length: 2,
      convRule: rule92
  }, {
      start: 7418,
      length: 1,
      convRule: rule14
  }, {
      start: 7424,
      length: 44,
      convRule: rule20
  }, {
      start: 7468,
      length: 63,
      convRule: rule91
  }, {
      start: 7531,
      length: 13,
      convRule: rule20
  }, {
      start: 7544,
      length: 1,
      convRule: rule91
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7546,
      length: 3,
      convRule: rule20
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7550,
      length: 16,
      convRule: rule20
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7567,
      length: 12,
      convRule: rule20
  }, {
      start: 7579,
      length: 37,
      convRule: rule91
  }, {
      start: 7616,
      length: 58,
      convRule: rule92
  }, {
      start: 7675,
      length: 5,
      convRule: rule92
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7830,
      length: 5,
      convRule: rule20
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7836,
      length: 2,
      convRule: rule20
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7839,
      length: 1,
      convRule: rule20
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8016,
      length: 1,
      convRule: rule20
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8018,
      length: 1,
      convRule: rule20
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8020,
      length: 1,
      convRule: rule20
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8022,
      length: 1,
      convRule: rule20
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8114,
      length: 1,
      convRule: rule20
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8116,
      length: 1,
      convRule: rule20
  }, {
      start: 8118,
      length: 2,
      convRule: rule20
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8125,
      length: 1,
      convRule: rule10
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8127,
      length: 3,
      convRule: rule10
  }, {
      start: 8130,
      length: 1,
      convRule: rule20
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8132,
      length: 1,
      convRule: rule20
  }, {
      start: 8134,
      length: 2,
      convRule: rule20
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8141,
      length: 3,
      convRule: rule10
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8146,
      length: 2,
      convRule: rule20
  }, {
      start: 8150,
      length: 2,
      convRule: rule20
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8157,
      length: 3,
      convRule: rule10
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8162,
      length: 3,
      convRule: rule20
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8166,
      length: 2,
      convRule: rule20
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8173,
      length: 3,
      convRule: rule10
  }, {
      start: 8178,
      length: 1,
      convRule: rule20
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8180,
      length: 1,
      convRule: rule20
  }, {
      start: 8182,
      length: 2,
      convRule: rule20
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8189,
      length: 2,
      convRule: rule10
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8203,
      length: 5,
      convRule: rule16
  }, {
      start: 8208,
      length: 6,
      convRule: rule7
  }, {
      start: 8214,
      length: 2,
      convRule: rule2
  }, {
      start: 8216,
      length: 1,
      convRule: rule15
  }, {
      start: 8217,
      length: 1,
      convRule: rule19
  }, {
      start: 8218,
      length: 1,
      convRule: rule4
  }, {
      start: 8219,
      length: 2,
      convRule: rule15
  }, {
      start: 8221,
      length: 1,
      convRule: rule19
  }, {
      start: 8222,
      length: 1,
      convRule: rule4
  }, {
      start: 8223,
      length: 1,
      convRule: rule15
  }, {
      start: 8224,
      length: 8,
      convRule: rule2
  }, {
      start: 8232,
      length: 1,
      convRule: rule161
  }, {
      start: 8233,
      length: 1,
      convRule: rule162
  }, {
      start: 8234,
      length: 5,
      convRule: rule16
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8240,
      length: 9,
      convRule: rule2
  }, {
      start: 8249,
      length: 1,
      convRule: rule15
  }, {
      start: 8250,
      length: 1,
      convRule: rule19
  }, {
      start: 8251,
      length: 4,
      convRule: rule2
  }, {
      start: 8255,
      length: 2,
      convRule: rule11
  }, {
      start: 8257,
      length: 3,
      convRule: rule2
  }, {
      start: 8260,
      length: 1,
      convRule: rule6
  }, {
      start: 8261,
      length: 1,
      convRule: rule4
  }, {
      start: 8262,
      length: 1,
      convRule: rule5
  }, {
      start: 8263,
      length: 11,
      convRule: rule2
  }, {
      start: 8274,
      length: 1,
      convRule: rule6
  }, {
      start: 8275,
      length: 1,
      convRule: rule2
  }, {
      start: 8276,
      length: 1,
      convRule: rule11
  }, {
      start: 8277,
      length: 10,
      convRule: rule2
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 8288,
      length: 5,
      convRule: rule16
  }, {
      start: 8294,
      length: 10,
      convRule: rule16
  }, {
      start: 8304,
      length: 1,
      convRule: rule17
  }, {
      start: 8305,
      length: 1,
      convRule: rule91
  }, {
      start: 8308,
      length: 6,
      convRule: rule17
  }, {
      start: 8314,
      length: 3,
      convRule: rule6
  }, {
      start: 8317,
      length: 1,
      convRule: rule4
  }, {
      start: 8318,
      length: 1,
      convRule: rule5
  }, {
      start: 8319,
      length: 1,
      convRule: rule91
  }, {
      start: 8320,
      length: 10,
      convRule: rule17
  }, {
      start: 8330,
      length: 3,
      convRule: rule6
  }, {
      start: 8333,
      length: 1,
      convRule: rule4
  }, {
      start: 8334,
      length: 1,
      convRule: rule5
  }, {
      start: 8336,
      length: 13,
      convRule: rule91
  }, {
      start: 8352,
      length: 32,
      convRule: rule3
  }, {
      start: 8400,
      length: 13,
      convRule: rule92
  }, {
      start: 8413,
      length: 4,
      convRule: rule119
  }, {
      start: 8417,
      length: 1,
      convRule: rule92
  }, {
      start: 8418,
      length: 3,
      convRule: rule119
  }, {
      start: 8421,
      length: 12,
      convRule: rule92
  }, {
      start: 8448,
      length: 2,
      convRule: rule13
  }, {
      start: 8450,
      length: 1,
      convRule: rule107
  }, {
      start: 8451,
      length: 4,
      convRule: rule13
  }, {
      start: 8455,
      length: 1,
      convRule: rule107
  }, {
      start: 8456,
      length: 2,
      convRule: rule13
  }, {
      start: 8458,
      length: 1,
      convRule: rule20
  }, {
      start: 8459,
      length: 3,
      convRule: rule107
  }, {
      start: 8462,
      length: 2,
      convRule: rule20
  }, {
      start: 8464,
      length: 3,
      convRule: rule107
  }, {
      start: 8467,
      length: 1,
      convRule: rule20
  }, {
      start: 8468,
      length: 1,
      convRule: rule13
  }, {
      start: 8469,
      length: 1,
      convRule: rule107
  }, {
      start: 8470,
      length: 2,
      convRule: rule13
  }, {
      start: 8472,
      length: 1,
      convRule: rule6
  }, {
      start: 8473,
      length: 5,
      convRule: rule107
  }, {
      start: 8478,
      length: 6,
      convRule: rule13
  }, {
      start: 8484,
      length: 1,
      convRule: rule107
  }, {
      start: 8485,
      length: 1,
      convRule: rule13
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8487,
      length: 1,
      convRule: rule13
  }, {
      start: 8488,
      length: 1,
      convRule: rule107
  }, {
      start: 8489,
      length: 1,
      convRule: rule13
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8492,
      length: 2,
      convRule: rule107
  }, {
      start: 8494,
      length: 1,
      convRule: rule13
  }, {
      start: 8495,
      length: 1,
      convRule: rule20
  }, {
      start: 8496,
      length: 2,
      convRule: rule107
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8499,
      length: 1,
      convRule: rule107
  }, {
      start: 8500,
      length: 1,
      convRule: rule20
  }, {
      start: 8501,
      length: 4,
      convRule: rule14
  }, {
      start: 8505,
      length: 1,
      convRule: rule20
  }, {
      start: 8506,
      length: 2,
      convRule: rule13
  }, {
      start: 8508,
      length: 2,
      convRule: rule20
  }, {
      start: 8510,
      length: 2,
      convRule: rule107
  }, {
      start: 8512,
      length: 5,
      convRule: rule6
  }, {
      start: 8517,
      length: 1,
      convRule: rule107
  }, {
      start: 8518,
      length: 4,
      convRule: rule20
  }, {
      start: 8522,
      length: 1,
      convRule: rule13
  }, {
      start: 8523,
      length: 1,
      convRule: rule6
  }, {
      start: 8524,
      length: 2,
      convRule: rule13
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8527,
      length: 1,
      convRule: rule13
  }, {
      start: 8528,
      length: 16,
      convRule: rule17
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8576,
      length: 3,
      convRule: rule128
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 8581,
      length: 4,
      convRule: rule128
  }, {
      start: 8585,
      length: 1,
      convRule: rule17
  }, {
      start: 8586,
      length: 2,
      convRule: rule13
  }, {
      start: 8592,
      length: 5,
      convRule: rule6
  }, {
      start: 8597,
      length: 5,
      convRule: rule13
  }, {
      start: 8602,
      length: 2,
      convRule: rule6
  }, {
      start: 8604,
      length: 4,
      convRule: rule13
  }, {
      start: 8608,
      length: 1,
      convRule: rule6
  }, {
      start: 8609,
      length: 2,
      convRule: rule13
  }, {
      start: 8611,
      length: 1,
      convRule: rule6
  }, {
      start: 8612,
      length: 2,
      convRule: rule13
  }, {
      start: 8614,
      length: 1,
      convRule: rule6
  }, {
      start: 8615,
      length: 7,
      convRule: rule13
  }, {
      start: 8622,
      length: 1,
      convRule: rule6
  }, {
      start: 8623,
      length: 31,
      convRule: rule13
  }, {
      start: 8654,
      length: 2,
      convRule: rule6
  }, {
      start: 8656,
      length: 2,
      convRule: rule13
  }, {
      start: 8658,
      length: 1,
      convRule: rule6
  }, {
      start: 8659,
      length: 1,
      convRule: rule13
  }, {
      start: 8660,
      length: 1,
      convRule: rule6
  }, {
      start: 8661,
      length: 31,
      convRule: rule13
  }, {
      start: 8692,
      length: 268,
      convRule: rule6
  }, {
      start: 8960,
      length: 8,
      convRule: rule13
  }, {
      start: 8968,
      length: 1,
      convRule: rule4
  }, {
      start: 8969,
      length: 1,
      convRule: rule5
  }, {
      start: 8970,
      length: 1,
      convRule: rule4
  }, {
      start: 8971,
      length: 1,
      convRule: rule5
  }, {
      start: 8972,
      length: 20,
      convRule: rule13
  }, {
      start: 8992,
      length: 2,
      convRule: rule6
  }, {
      start: 8994,
      length: 7,
      convRule: rule13
  }, {
      start: 9001,
      length: 1,
      convRule: rule4
  }, {
      start: 9002,
      length: 1,
      convRule: rule5
  }, {
      start: 9003,
      length: 81,
      convRule: rule13
  }, {
      start: 9084,
      length: 1,
      convRule: rule6
  }, {
      start: 9085,
      length: 30,
      convRule: rule13
  }, {
      start: 9115,
      length: 25,
      convRule: rule6
  }, {
      start: 9140,
      length: 40,
      convRule: rule13
  }, {
      start: 9180,
      length: 6,
      convRule: rule6
  }, {
      start: 9186,
      length: 69,
      convRule: rule13
  }, {
      start: 9280,
      length: 11,
      convRule: rule13
  }, {
      start: 9312,
      length: 60,
      convRule: rule17
  }, {
      start: 9372,
      length: 26,
      convRule: rule13
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 9450,
      length: 22,
      convRule: rule17
  }, {
      start: 9472,
      length: 183,
      convRule: rule13
  }, {
      start: 9655,
      length: 1,
      convRule: rule6
  }, {
      start: 9656,
      length: 9,
      convRule: rule13
  }, {
      start: 9665,
      length: 1,
      convRule: rule6
  }, {
      start: 9666,
      length: 54,
      convRule: rule13
  }, {
      start: 9720,
      length: 8,
      convRule: rule6
  }, {
      start: 9728,
      length: 111,
      convRule: rule13
  }, {
      start: 9839,
      length: 1,
      convRule: rule6
  }, {
      start: 9840,
      length: 248,
      convRule: rule13
  }, {
      start: 10088,
      length: 1,
      convRule: rule4
  }, {
      start: 10089,
      length: 1,
      convRule: rule5
  }, {
      start: 10090,
      length: 1,
      convRule: rule4
  }, {
      start: 10091,
      length: 1,
      convRule: rule5
  }, {
      start: 10092,
      length: 1,
      convRule: rule4
  }, {
      start: 10093,
      length: 1,
      convRule: rule5
  }, {
      start: 10094,
      length: 1,
      convRule: rule4
  }, {
      start: 10095,
      length: 1,
      convRule: rule5
  }, {
      start: 10096,
      length: 1,
      convRule: rule4
  }, {
      start: 10097,
      length: 1,
      convRule: rule5
  }, {
      start: 10098,
      length: 1,
      convRule: rule4
  }, {
      start: 10099,
      length: 1,
      convRule: rule5
  }, {
      start: 10100,
      length: 1,
      convRule: rule4
  }, {
      start: 10101,
      length: 1,
      convRule: rule5
  }, {
      start: 10102,
      length: 30,
      convRule: rule17
  }, {
      start: 10132,
      length: 44,
      convRule: rule13
  }, {
      start: 10176,
      length: 5,
      convRule: rule6
  }, {
      start: 10181,
      length: 1,
      convRule: rule4
  }, {
      start: 10182,
      length: 1,
      convRule: rule5
  }, {
      start: 10183,
      length: 31,
      convRule: rule6
  }, {
      start: 10214,
      length: 1,
      convRule: rule4
  }, {
      start: 10215,
      length: 1,
      convRule: rule5
  }, {
      start: 10216,
      length: 1,
      convRule: rule4
  }, {
      start: 10217,
      length: 1,
      convRule: rule5
  }, {
      start: 10218,
      length: 1,
      convRule: rule4
  }, {
      start: 10219,
      length: 1,
      convRule: rule5
  }, {
      start: 10220,
      length: 1,
      convRule: rule4
  }, {
      start: 10221,
      length: 1,
      convRule: rule5
  }, {
      start: 10222,
      length: 1,
      convRule: rule4
  }, {
      start: 10223,
      length: 1,
      convRule: rule5
  }, {
      start: 10224,
      length: 16,
      convRule: rule6
  }, {
      start: 10240,
      length: 256,
      convRule: rule13
  }, {
      start: 10496,
      length: 131,
      convRule: rule6
  }, {
      start: 10627,
      length: 1,
      convRule: rule4
  }, {
      start: 10628,
      length: 1,
      convRule: rule5
  }, {
      start: 10629,
      length: 1,
      convRule: rule4
  }, {
      start: 10630,
      length: 1,
      convRule: rule5
  }, {
      start: 10631,
      length: 1,
      convRule: rule4
  }, {
      start: 10632,
      length: 1,
      convRule: rule5
  }, {
      start: 10633,
      length: 1,
      convRule: rule4
  }, {
      start: 10634,
      length: 1,
      convRule: rule5
  }, {
      start: 10635,
      length: 1,
      convRule: rule4
  }, {
      start: 10636,
      length: 1,
      convRule: rule5
  }, {
      start: 10637,
      length: 1,
      convRule: rule4
  }, {
      start: 10638,
      length: 1,
      convRule: rule5
  }, {
      start: 10639,
      length: 1,
      convRule: rule4
  }, {
      start: 10640,
      length: 1,
      convRule: rule5
  }, {
      start: 10641,
      length: 1,
      convRule: rule4
  }, {
      start: 10642,
      length: 1,
      convRule: rule5
  }, {
      start: 10643,
      length: 1,
      convRule: rule4
  }, {
      start: 10644,
      length: 1,
      convRule: rule5
  }, {
      start: 10645,
      length: 1,
      convRule: rule4
  }, {
      start: 10646,
      length: 1,
      convRule: rule5
  }, {
      start: 10647,
      length: 1,
      convRule: rule4
  }, {
      start: 10648,
      length: 1,
      convRule: rule5
  }, {
      start: 10649,
      length: 63,
      convRule: rule6
  }, {
      start: 10712,
      length: 1,
      convRule: rule4
  }, {
      start: 10713,
      length: 1,
      convRule: rule5
  }, {
      start: 10714,
      length: 1,
      convRule: rule4
  }, {
      start: 10715,
      length: 1,
      convRule: rule5
  }, {
      start: 10716,
      length: 32,
      convRule: rule6
  }, {
      start: 10748,
      length: 1,
      convRule: rule4
  }, {
      start: 10749,
      length: 1,
      convRule: rule5
  }, {
      start: 10750,
      length: 258,
      convRule: rule6
  }, {
      start: 11008,
      length: 48,
      convRule: rule13
  }, {
      start: 11056,
      length: 21,
      convRule: rule6
  }, {
      start: 11077,
      length: 2,
      convRule: rule13
  }, {
      start: 11079,
      length: 6,
      convRule: rule6
  }, {
      start: 11085,
      length: 39,
      convRule: rule13
  }, {
      start: 11126,
      length: 32,
      convRule: rule13
  }, {
      start: 11159,
      length: 105,
      convRule: rule13
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11377,
      length: 1,
      convRule: rule20
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11380,
      length: 1,
      convRule: rule20
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11383,
      length: 5,
      convRule: rule20
  }, {
      start: 11388,
      length: 2,
      convRule: rule91
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11492,
      length: 1,
      convRule: rule20
  }, {
      start: 11493,
      length: 6,
      convRule: rule13
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11503,
      length: 3,
      convRule: rule92
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11513,
      length: 4,
      convRule: rule2
  }, {
      start: 11517,
      length: 1,
      convRule: rule17
  }, {
      start: 11518,
      length: 2,
      convRule: rule2
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 11568,
      length: 56,
      convRule: rule14
  }, {
      start: 11631,
      length: 1,
      convRule: rule91
  }, {
      start: 11632,
      length: 1,
      convRule: rule2
  }, {
      start: 11647,
      length: 1,
      convRule: rule92
  }, {
      start: 11648,
      length: 23,
      convRule: rule14
  }, {
      start: 11680,
      length: 7,
      convRule: rule14
  }, {
      start: 11688,
      length: 7,
      convRule: rule14
  }, {
      start: 11696,
      length: 7,
      convRule: rule14
  }, {
      start: 11704,
      length: 7,
      convRule: rule14
  }, {
      start: 11712,
      length: 7,
      convRule: rule14
  }, {
      start: 11720,
      length: 7,
      convRule: rule14
  }, {
      start: 11728,
      length: 7,
      convRule: rule14
  }, {
      start: 11736,
      length: 7,
      convRule: rule14
  }, {
      start: 11744,
      length: 32,
      convRule: rule92
  }, {
      start: 11776,
      length: 2,
      convRule: rule2
  }, {
      start: 11778,
      length: 1,
      convRule: rule15
  }, {
      start: 11779,
      length: 1,
      convRule: rule19
  }, {
      start: 11780,
      length: 1,
      convRule: rule15
  }, {
      start: 11781,
      length: 1,
      convRule: rule19
  }, {
      start: 11782,
      length: 3,
      convRule: rule2
  }, {
      start: 11785,
      length: 1,
      convRule: rule15
  }, {
      start: 11786,
      length: 1,
      convRule: rule19
  }, {
      start: 11787,
      length: 1,
      convRule: rule2
  }, {
      start: 11788,
      length: 1,
      convRule: rule15
  }, {
      start: 11789,
      length: 1,
      convRule: rule19
  }, {
      start: 11790,
      length: 9,
      convRule: rule2
  }, {
      start: 11799,
      length: 1,
      convRule: rule7
  }, {
      start: 11800,
      length: 2,
      convRule: rule2
  }, {
      start: 11802,
      length: 1,
      convRule: rule7
  }, {
      start: 11803,
      length: 1,
      convRule: rule2
  }, {
      start: 11804,
      length: 1,
      convRule: rule15
  }, {
      start: 11805,
      length: 1,
      convRule: rule19
  }, {
      start: 11806,
      length: 2,
      convRule: rule2
  }, {
      start: 11808,
      length: 1,
      convRule: rule15
  }, {
      start: 11809,
      length: 1,
      convRule: rule19
  }, {
      start: 11810,
      length: 1,
      convRule: rule4
  }, {
      start: 11811,
      length: 1,
      convRule: rule5
  }, {
      start: 11812,
      length: 1,
      convRule: rule4
  }, {
      start: 11813,
      length: 1,
      convRule: rule5
  }, {
      start: 11814,
      length: 1,
      convRule: rule4
  }, {
      start: 11815,
      length: 1,
      convRule: rule5
  }, {
      start: 11816,
      length: 1,
      convRule: rule4
  }, {
      start: 11817,
      length: 1,
      convRule: rule5
  }, {
      start: 11818,
      length: 5,
      convRule: rule2
  }, {
      start: 11823,
      length: 1,
      convRule: rule91
  }, {
      start: 11824,
      length: 10,
      convRule: rule2
  }, {
      start: 11834,
      length: 2,
      convRule: rule7
  }, {
      start: 11836,
      length: 4,
      convRule: rule2
  }, {
      start: 11840,
      length: 1,
      convRule: rule7
  }, {
      start: 11841,
      length: 1,
      convRule: rule2
  }, {
      start: 11842,
      length: 1,
      convRule: rule4
  }, {
      start: 11843,
      length: 13,
      convRule: rule2
  }, {
      start: 11856,
      length: 2,
      convRule: rule13
  }, {
      start: 11858,
      length: 1,
      convRule: rule2
  }, {
      start: 11904,
      length: 26,
      convRule: rule13
  }, {
      start: 11931,
      length: 89,
      convRule: rule13
  }, {
      start: 12032,
      length: 214,
      convRule: rule13
  }, {
      start: 12272,
      length: 12,
      convRule: rule13
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  }, {
      start: 12289,
      length: 3,
      convRule: rule2
  }, {
      start: 12292,
      length: 1,
      convRule: rule13
  }, {
      start: 12293,
      length: 1,
      convRule: rule91
  }, {
      start: 12294,
      length: 1,
      convRule: rule14
  }, {
      start: 12295,
      length: 1,
      convRule: rule128
  }, {
      start: 12296,
      length: 1,
      convRule: rule4
  }, {
      start: 12297,
      length: 1,
      convRule: rule5
  }, {
      start: 12298,
      length: 1,
      convRule: rule4
  }, {
      start: 12299,
      length: 1,
      convRule: rule5
  }, {
      start: 12300,
      length: 1,
      convRule: rule4
  }, {
      start: 12301,
      length: 1,
      convRule: rule5
  }, {
      start: 12302,
      length: 1,
      convRule: rule4
  }, {
      start: 12303,
      length: 1,
      convRule: rule5
  }, {
      start: 12304,
      length: 1,
      convRule: rule4
  }, {
      start: 12305,
      length: 1,
      convRule: rule5
  }, {
      start: 12306,
      length: 2,
      convRule: rule13
  }, {
      start: 12308,
      length: 1,
      convRule: rule4
  }, {
      start: 12309,
      length: 1,
      convRule: rule5
  }, {
      start: 12310,
      length: 1,
      convRule: rule4
  }, {
      start: 12311,
      length: 1,
      convRule: rule5
  }, {
      start: 12312,
      length: 1,
      convRule: rule4
  }, {
      start: 12313,
      length: 1,
      convRule: rule5
  }, {
      start: 12314,
      length: 1,
      convRule: rule4
  }, {
      start: 12315,
      length: 1,
      convRule: rule5
  }, {
      start: 12316,
      length: 1,
      convRule: rule7
  }, {
      start: 12317,
      length: 1,
      convRule: rule4
  }, {
      start: 12318,
      length: 2,
      convRule: rule5
  }, {
      start: 12320,
      length: 1,
      convRule: rule13
  }, {
      start: 12321,
      length: 9,
      convRule: rule128
  }, {
      start: 12330,
      length: 4,
      convRule: rule92
  }, {
      start: 12334,
      length: 2,
      convRule: rule124
  }, {
      start: 12336,
      length: 1,
      convRule: rule7
  }, {
      start: 12337,
      length: 5,
      convRule: rule91
  }, {
      start: 12342,
      length: 2,
      convRule: rule13
  }, {
      start: 12344,
      length: 3,
      convRule: rule128
  }, {
      start: 12347,
      length: 1,
      convRule: rule91
  }, {
      start: 12348,
      length: 1,
      convRule: rule14
  }, {
      start: 12349,
      length: 1,
      convRule: rule2
  }, {
      start: 12350,
      length: 2,
      convRule: rule13
  }, {
      start: 12353,
      length: 86,
      convRule: rule14
  }, {
      start: 12441,
      length: 2,
      convRule: rule92
  }, {
      start: 12443,
      length: 2,
      convRule: rule10
  }, {
      start: 12445,
      length: 2,
      convRule: rule91
  }, {
      start: 12447,
      length: 1,
      convRule: rule14
  }, {
      start: 12448,
      length: 1,
      convRule: rule7
  }, {
      start: 12449,
      length: 90,
      convRule: rule14
  }, {
      start: 12539,
      length: 1,
      convRule: rule2
  }, {
      start: 12540,
      length: 3,
      convRule: rule91
  }, {
      start: 12543,
      length: 1,
      convRule: rule14
  }, {
      start: 12549,
      length: 43,
      convRule: rule14
  }, {
      start: 12593,
      length: 94,
      convRule: rule14
  }, {
      start: 12688,
      length: 2,
      convRule: rule13
  }, {
      start: 12690,
      length: 4,
      convRule: rule17
  }, {
      start: 12694,
      length: 10,
      convRule: rule13
  }, {
      start: 12704,
      length: 32,
      convRule: rule14
  }, {
      start: 12736,
      length: 36,
      convRule: rule13
  }, {
      start: 12784,
      length: 16,
      convRule: rule14
  }, {
      start: 12800,
      length: 31,
      convRule: rule13
  }, {
      start: 12832,
      length: 10,
      convRule: rule17
  }, {
      start: 12842,
      length: 30,
      convRule: rule13
  }, {
      start: 12872,
      length: 8,
      convRule: rule17
  }, {
      start: 12880,
      length: 1,
      convRule: rule13
  }, {
      start: 12881,
      length: 15,
      convRule: rule17
  }, {
      start: 12896,
      length: 32,
      convRule: rule13
  }, {
      start: 12928,
      length: 10,
      convRule: rule17
  }, {
      start: 12938,
      length: 39,
      convRule: rule13
  }, {
      start: 12977,
      length: 15,
      convRule: rule17
  }, {
      start: 12992,
      length: 320,
      convRule: rule13
  }, {
      start: 13312,
      length: 6592,
      convRule: rule14
  }, {
      start: 19904,
      length: 64,
      convRule: rule13
  }, {
      start: 19968,
      length: 20989,
      convRule: rule14
  }, {
      start: 40960,
      length: 21,
      convRule: rule14
  }, {
      start: 40981,
      length: 1,
      convRule: rule91
  }, {
      start: 40982,
      length: 1143,
      convRule: rule14
  }, {
      start: 42128,
      length: 55,
      convRule: rule13
  }, {
      start: 42192,
      length: 40,
      convRule: rule14
  }, {
      start: 42232,
      length: 6,
      convRule: rule91
  }, {
      start: 42238,
      length: 2,
      convRule: rule2
  }, {
      start: 42240,
      length: 268,
      convRule: rule14
  }, {
      start: 42508,
      length: 1,
      convRule: rule91
  }, {
      start: 42509,
      length: 3,
      convRule: rule2
  }, {
      start: 42512,
      length: 16,
      convRule: rule14
  }, {
      start: 42528,
      length: 10,
      convRule: rule8
  }, {
      start: 42538,
      length: 2,
      convRule: rule14
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42606,
      length: 1,
      convRule: rule14
  }, {
      start: 42607,
      length: 1,
      convRule: rule92
  }, {
      start: 42608,
      length: 3,
      convRule: rule119
  }, {
      start: 42611,
      length: 1,
      convRule: rule2
  }, {
      start: 42612,
      length: 10,
      convRule: rule92
  }, {
      start: 42622,
      length: 1,
      convRule: rule2
  }, {
      start: 42623,
      length: 1,
      convRule: rule91
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42652,
      length: 2,
      convRule: rule91
  }, {
      start: 42654,
      length: 2,
      convRule: rule92
  }, {
      start: 42656,
      length: 70,
      convRule: rule14
  }, {
      start: 42726,
      length: 10,
      convRule: rule128
  }, {
      start: 42736,
      length: 2,
      convRule: rule92
  }, {
      start: 42738,
      length: 6,
      convRule: rule2
  }, {
      start: 42752,
      length: 23,
      convRule: rule10
  }, {
      start: 42775,
      length: 9,
      convRule: rule91
  }, {
      start: 42784,
      length: 2,
      convRule: rule10
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42800,
      length: 2,
      convRule: rule20
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42864,
      length: 1,
      convRule: rule91
  }, {
      start: 42865,
      length: 8,
      convRule: rule20
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42888,
      length: 1,
      convRule: rule91
  }, {
      start: 42889,
      length: 2,
      convRule: rule10
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42894,
      length: 1,
      convRule: rule20
  }, {
      start: 42895,
      length: 1,
      convRule: rule14
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42901,
      length: 1,
      convRule: rule20
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42927,
      length: 1,
      convRule: rule20
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 42999,
      length: 1,
      convRule: rule14
  }, {
      start: 43000,
      length: 2,
      convRule: rule91
  }, {
      start: 43002,
      length: 1,
      convRule: rule20
  }, {
      start: 43003,
      length: 7,
      convRule: rule14
  }, {
      start: 43010,
      length: 1,
      convRule: rule92
  }, {
      start: 43011,
      length: 3,
      convRule: rule14
  }, {
      start: 43014,
      length: 1,
      convRule: rule92
  }, {
      start: 43015,
      length: 4,
      convRule: rule14
  }, {
      start: 43019,
      length: 1,
      convRule: rule92
  }, {
      start: 43020,
      length: 23,
      convRule: rule14
  }, {
      start: 43043,
      length: 2,
      convRule: rule124
  }, {
      start: 43045,
      length: 2,
      convRule: rule92
  }, {
      start: 43047,
      length: 1,
      convRule: rule124
  }, {
      start: 43048,
      length: 4,
      convRule: rule13
  }, {
      start: 43052,
      length: 1,
      convRule: rule92
  }, {
      start: 43056,
      length: 6,
      convRule: rule17
  }, {
      start: 43062,
      length: 2,
      convRule: rule13
  }, {
      start: 43064,
      length: 1,
      convRule: rule3
  }, {
      start: 43065,
      length: 1,
      convRule: rule13
  }, {
      start: 43072,
      length: 52,
      convRule: rule14
  }, {
      start: 43124,
      length: 4,
      convRule: rule2
  }, {
      start: 43136,
      length: 2,
      convRule: rule124
  }, {
      start: 43138,
      length: 50,
      convRule: rule14
  }, {
      start: 43188,
      length: 16,
      convRule: rule124
  }, {
      start: 43204,
      length: 2,
      convRule: rule92
  }, {
      start: 43214,
      length: 2,
      convRule: rule2
  }, {
      start: 43216,
      length: 10,
      convRule: rule8
  }, {
      start: 43232,
      length: 18,
      convRule: rule92
  }, {
      start: 43250,
      length: 6,
      convRule: rule14
  }, {
      start: 43256,
      length: 3,
      convRule: rule2
  }, {
      start: 43259,
      length: 1,
      convRule: rule14
  }, {
      start: 43260,
      length: 1,
      convRule: rule2
  }, {
      start: 43261,
      length: 2,
      convRule: rule14
  }, {
      start: 43263,
      length: 1,
      convRule: rule92
  }, {
      start: 43264,
      length: 10,
      convRule: rule8
  }, {
      start: 43274,
      length: 28,
      convRule: rule14
  }, {
      start: 43302,
      length: 8,
      convRule: rule92
  }, {
      start: 43310,
      length: 2,
      convRule: rule2
  }, {
      start: 43312,
      length: 23,
      convRule: rule14
  }, {
      start: 43335,
      length: 11,
      convRule: rule92
  }, {
      start: 43346,
      length: 2,
      convRule: rule124
  }, {
      start: 43359,
      length: 1,
      convRule: rule2
  }, {
      start: 43360,
      length: 29,
      convRule: rule14
  }, {
      start: 43392,
      length: 3,
      convRule: rule92
  }, {
      start: 43395,
      length: 1,
      convRule: rule124
  }, {
      start: 43396,
      length: 47,
      convRule: rule14
  }, {
      start: 43443,
      length: 1,
      convRule: rule92
  }, {
      start: 43444,
      length: 2,
      convRule: rule124
  }, {
      start: 43446,
      length: 4,
      convRule: rule92
  }, {
      start: 43450,
      length: 2,
      convRule: rule124
  }, {
      start: 43452,
      length: 2,
      convRule: rule92
  }, {
      start: 43454,
      length: 3,
      convRule: rule124
  }, {
      start: 43457,
      length: 13,
      convRule: rule2
  }, {
      start: 43471,
      length: 1,
      convRule: rule91
  }, {
      start: 43472,
      length: 10,
      convRule: rule8
  }, {
      start: 43486,
      length: 2,
      convRule: rule2
  }, {
      start: 43488,
      length: 5,
      convRule: rule14
  }, {
      start: 43493,
      length: 1,
      convRule: rule92
  }, {
      start: 43494,
      length: 1,
      convRule: rule91
  }, {
      start: 43495,
      length: 9,
      convRule: rule14
  }, {
      start: 43504,
      length: 10,
      convRule: rule8
  }, {
      start: 43514,
      length: 5,
      convRule: rule14
  }, {
      start: 43520,
      length: 41,
      convRule: rule14
  }, {
      start: 43561,
      length: 6,
      convRule: rule92
  }, {
      start: 43567,
      length: 2,
      convRule: rule124
  }, {
      start: 43569,
      length: 2,
      convRule: rule92
  }, {
      start: 43571,
      length: 2,
      convRule: rule124
  }, {
      start: 43573,
      length: 2,
      convRule: rule92
  }, {
      start: 43584,
      length: 3,
      convRule: rule14
  }, {
      start: 43587,
      length: 1,
      convRule: rule92
  }, {
      start: 43588,
      length: 8,
      convRule: rule14
  }, {
      start: 43596,
      length: 1,
      convRule: rule92
  }, {
      start: 43597,
      length: 1,
      convRule: rule124
  }, {
      start: 43600,
      length: 10,
      convRule: rule8
  }, {
      start: 43612,
      length: 4,
      convRule: rule2
  }, {
      start: 43616,
      length: 16,
      convRule: rule14
  }, {
      start: 43632,
      length: 1,
      convRule: rule91
  }, {
      start: 43633,
      length: 6,
      convRule: rule14
  }, {
      start: 43639,
      length: 3,
      convRule: rule13
  }, {
      start: 43642,
      length: 1,
      convRule: rule14
  }, {
      start: 43643,
      length: 1,
      convRule: rule124
  }, {
      start: 43644,
      length: 1,
      convRule: rule92
  }, {
      start: 43645,
      length: 1,
      convRule: rule124
  }, {
      start: 43646,
      length: 50,
      convRule: rule14
  }, {
      start: 43696,
      length: 1,
      convRule: rule92
  }, {
      start: 43697,
      length: 1,
      convRule: rule14
  }, {
      start: 43698,
      length: 3,
      convRule: rule92
  }, {
      start: 43701,
      length: 2,
      convRule: rule14
  }, {
      start: 43703,
      length: 2,
      convRule: rule92
  }, {
      start: 43705,
      length: 5,
      convRule: rule14
  }, {
      start: 43710,
      length: 2,
      convRule: rule92
  }, {
      start: 43712,
      length: 1,
      convRule: rule14
  }, {
      start: 43713,
      length: 1,
      convRule: rule92
  }, {
      start: 43714,
      length: 1,
      convRule: rule14
  }, {
      start: 43739,
      length: 2,
      convRule: rule14
  }, {
      start: 43741,
      length: 1,
      convRule: rule91
  }, {
      start: 43742,
      length: 2,
      convRule: rule2
  }, {
      start: 43744,
      length: 11,
      convRule: rule14
  }, {
      start: 43755,
      length: 1,
      convRule: rule124
  }, {
      start: 43756,
      length: 2,
      convRule: rule92
  }, {
      start: 43758,
      length: 2,
      convRule: rule124
  }, {
      start: 43760,
      length: 2,
      convRule: rule2
  }, {
      start: 43762,
      length: 1,
      convRule: rule14
  }, {
      start: 43763,
      length: 2,
      convRule: rule91
  }, {
      start: 43765,
      length: 1,
      convRule: rule124
  }, {
      start: 43766,
      length: 1,
      convRule: rule92
  }, {
      start: 43777,
      length: 6,
      convRule: rule14
  }, {
      start: 43785,
      length: 6,
      convRule: rule14
  }, {
      start: 43793,
      length: 6,
      convRule: rule14
  }, {
      start: 43808,
      length: 7,
      convRule: rule14
  }, {
      start: 43816,
      length: 7,
      convRule: rule14
  }, {
      start: 43824,
      length: 35,
      convRule: rule20
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43860,
      length: 7,
      convRule: rule20
  }, {
      start: 43867,
      length: 1,
      convRule: rule10
  }, {
      start: 43868,
      length: 4,
      convRule: rule91
  }, {
      start: 43872,
      length: 9,
      convRule: rule20
  }, {
      start: 43881,
      length: 1,
      convRule: rule91
  }, {
      start: 43882,
      length: 2,
      convRule: rule10
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 43968,
      length: 35,
      convRule: rule14
  }, {
      start: 44003,
      length: 2,
      convRule: rule124
  }, {
      start: 44005,
      length: 1,
      convRule: rule92
  }, {
      start: 44006,
      length: 2,
      convRule: rule124
  }, {
      start: 44008,
      length: 1,
      convRule: rule92
  }, {
      start: 44009,
      length: 2,
      convRule: rule124
  }, {
      start: 44011,
      length: 1,
      convRule: rule2
  }, {
      start: 44012,
      length: 1,
      convRule: rule124
  }, {
      start: 44013,
      length: 1,
      convRule: rule92
  }, {
      start: 44016,
      length: 10,
      convRule: rule8
  }, {
      start: 44032,
      length: 11172,
      convRule: rule14
  }, {
      start: 55216,
      length: 23,
      convRule: rule14
  }, {
      start: 55243,
      length: 49,
      convRule: rule14
  }, {
      start: 55296,
      length: 896,
      convRule: rule199
  }, {
      start: 56192,
      length: 128,
      convRule: rule199
  }, {
      start: 56320,
      length: 1024,
      convRule: rule199
  }, {
      start: 57344,
      length: 6400,
      convRule: rule200
  }, {
      start: 63744,
      length: 366,
      convRule: rule14
  }, {
      start: 64112,
      length: 106,
      convRule: rule14
  }, {
      start: 64256,
      length: 7,
      convRule: rule20
  }, {
      start: 64275,
      length: 5,
      convRule: rule20
  }, {
      start: 64285,
      length: 1,
      convRule: rule14
  }, {
      start: 64286,
      length: 1,
      convRule: rule92
  }, {
      start: 64287,
      length: 10,
      convRule: rule14
  }, {
      start: 64297,
      length: 1,
      convRule: rule6
  }, {
      start: 64298,
      length: 13,
      convRule: rule14
  }, {
      start: 64312,
      length: 5,
      convRule: rule14
  }, {
      start: 64318,
      length: 1,
      convRule: rule14
  }, {
      start: 64320,
      length: 2,
      convRule: rule14
  }, {
      start: 64323,
      length: 2,
      convRule: rule14
  }, {
      start: 64326,
      length: 108,
      convRule: rule14
  }, {
      start: 64434,
      length: 16,
      convRule: rule10
  }, {
      start: 64467,
      length: 363,
      convRule: rule14
  }, {
      start: 64830,
      length: 1,
      convRule: rule5
  }, {
      start: 64831,
      length: 1,
      convRule: rule4
  }, {
      start: 64848,
      length: 64,
      convRule: rule14
  }, {
      start: 64914,
      length: 54,
      convRule: rule14
  }, {
      start: 65008,
      length: 12,
      convRule: rule14
  }, {
      start: 65020,
      length: 1,
      convRule: rule3
  }, {
      start: 65021,
      length: 1,
      convRule: rule13
  }, {
      start: 65024,
      length: 16,
      convRule: rule92
  }, {
      start: 65040,
      length: 7,
      convRule: rule2
  }, {
      start: 65047,
      length: 1,
      convRule: rule4
  }, {
      start: 65048,
      length: 1,
      convRule: rule5
  }, {
      start: 65049,
      length: 1,
      convRule: rule2
  }, {
      start: 65056,
      length: 16,
      convRule: rule92
  }, {
      start: 65072,
      length: 1,
      convRule: rule2
  }, {
      start: 65073,
      length: 2,
      convRule: rule7
  }, {
      start: 65075,
      length: 2,
      convRule: rule11
  }, {
      start: 65077,
      length: 1,
      convRule: rule4
  }, {
      start: 65078,
      length: 1,
      convRule: rule5
  }, {
      start: 65079,
      length: 1,
      convRule: rule4
  }, {
      start: 65080,
      length: 1,
      convRule: rule5
  }, {
      start: 65081,
      length: 1,
      convRule: rule4
  }, {
      start: 65082,
      length: 1,
      convRule: rule5
  }, {
      start: 65083,
      length: 1,
      convRule: rule4
  }, {
      start: 65084,
      length: 1,
      convRule: rule5
  }, {
      start: 65085,
      length: 1,
      convRule: rule4
  }, {
      start: 65086,
      length: 1,
      convRule: rule5
  }, {
      start: 65087,
      length: 1,
      convRule: rule4
  }, {
      start: 65088,
      length: 1,
      convRule: rule5
  }, {
      start: 65089,
      length: 1,
      convRule: rule4
  }, {
      start: 65090,
      length: 1,
      convRule: rule5
  }, {
      start: 65091,
      length: 1,
      convRule: rule4
  }, {
      start: 65092,
      length: 1,
      convRule: rule5
  }, {
      start: 65093,
      length: 2,
      convRule: rule2
  }, {
      start: 65095,
      length: 1,
      convRule: rule4
  }, {
      start: 65096,
      length: 1,
      convRule: rule5
  }, {
      start: 65097,
      length: 4,
      convRule: rule2
  }, {
      start: 65101,
      length: 3,
      convRule: rule11
  }, {
      start: 65104,
      length: 3,
      convRule: rule2
  }, {
      start: 65108,
      length: 4,
      convRule: rule2
  }, {
      start: 65112,
      length: 1,
      convRule: rule7
  }, {
      start: 65113,
      length: 1,
      convRule: rule4
  }, {
      start: 65114,
      length: 1,
      convRule: rule5
  }, {
      start: 65115,
      length: 1,
      convRule: rule4
  }, {
      start: 65116,
      length: 1,
      convRule: rule5
  }, {
      start: 65117,
      length: 1,
      convRule: rule4
  }, {
      start: 65118,
      length: 1,
      convRule: rule5
  }, {
      start: 65119,
      length: 3,
      convRule: rule2
  }, {
      start: 65122,
      length: 1,
      convRule: rule6
  }, {
      start: 65123,
      length: 1,
      convRule: rule7
  }, {
      start: 65124,
      length: 3,
      convRule: rule6
  }, {
      start: 65128,
      length: 1,
      convRule: rule2
  }, {
      start: 65129,
      length: 1,
      convRule: rule3
  }, {
      start: 65130,
      length: 2,
      convRule: rule2
  }, {
      start: 65136,
      length: 5,
      convRule: rule14
  }, {
      start: 65142,
      length: 135,
      convRule: rule14
  }, {
      start: 65279,
      length: 1,
      convRule: rule16
  }, {
      start: 65281,
      length: 3,
      convRule: rule2
  }, {
      start: 65284,
      length: 1,
      convRule: rule3
  }, {
      start: 65285,
      length: 3,
      convRule: rule2
  }, {
      start: 65288,
      length: 1,
      convRule: rule4
  }, {
      start: 65289,
      length: 1,
      convRule: rule5
  }, {
      start: 65290,
      length: 1,
      convRule: rule2
  }, {
      start: 65291,
      length: 1,
      convRule: rule6
  }, {
      start: 65292,
      length: 1,
      convRule: rule2
  }, {
      start: 65293,
      length: 1,
      convRule: rule7
  }, {
      start: 65294,
      length: 2,
      convRule: rule2
  }, {
      start: 65296,
      length: 10,
      convRule: rule8
  }, {
      start: 65306,
      length: 2,
      convRule: rule2
  }, {
      start: 65308,
      length: 3,
      convRule: rule6
  }, {
      start: 65311,
      length: 2,
      convRule: rule2
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65339,
      length: 1,
      convRule: rule4
  }, {
      start: 65340,
      length: 1,
      convRule: rule2
  }, {
      start: 65341,
      length: 1,
      convRule: rule5
  }, {
      start: 65342,
      length: 1,
      convRule: rule10
  }, {
      start: 65343,
      length: 1,
      convRule: rule11
  }, {
      start: 65344,
      length: 1,
      convRule: rule10
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 65371,
      length: 1,
      convRule: rule4
  }, {
      start: 65372,
      length: 1,
      convRule: rule6
  }, {
      start: 65373,
      length: 1,
      convRule: rule5
  }, {
      start: 65374,
      length: 1,
      convRule: rule6
  }, {
      start: 65375,
      length: 1,
      convRule: rule4
  }, {
      start: 65376,
      length: 1,
      convRule: rule5
  }, {
      start: 65377,
      length: 1,
      convRule: rule2
  }, {
      start: 65378,
      length: 1,
      convRule: rule4
  }, {
      start: 65379,
      length: 1,
      convRule: rule5
  }, {
      start: 65380,
      length: 2,
      convRule: rule2
  }, {
      start: 65382,
      length: 10,
      convRule: rule14
  }, {
      start: 65392,
      length: 1,
      convRule: rule91
  }, {
      start: 65393,
      length: 45,
      convRule: rule14
  }, {
      start: 65438,
      length: 2,
      convRule: rule91
  }, {
      start: 65440,
      length: 31,
      convRule: rule14
  }, {
      start: 65474,
      length: 6,
      convRule: rule14
  }, {
      start: 65482,
      length: 6,
      convRule: rule14
  }, {
      start: 65490,
      length: 6,
      convRule: rule14
  }, {
      start: 65498,
      length: 3,
      convRule: rule14
  }, {
      start: 65504,
      length: 2,
      convRule: rule3
  }, {
      start: 65506,
      length: 1,
      convRule: rule6
  }, {
      start: 65507,
      length: 1,
      convRule: rule10
  }, {
      start: 65508,
      length: 1,
      convRule: rule13
  }, {
      start: 65509,
      length: 2,
      convRule: rule3
  }, {
      start: 65512,
      length: 1,
      convRule: rule13
  }, {
      start: 65513,
      length: 4,
      convRule: rule6
  }, {
      start: 65517,
      length: 2,
      convRule: rule13
  }, {
      start: 65529,
      length: 3,
      convRule: rule16
  }, {
      start: 65532,
      length: 2,
      convRule: rule13
  }, {
      start: 65536,
      length: 12,
      convRule: rule14
  }, {
      start: 65549,
      length: 26,
      convRule: rule14
  }, {
      start: 65576,
      length: 19,
      convRule: rule14
  }, {
      start: 65596,
      length: 2,
      convRule: rule14
  }, {
      start: 65599,
      length: 15,
      convRule: rule14
  }, {
      start: 65616,
      length: 14,
      convRule: rule14
  }, {
      start: 65664,
      length: 123,
      convRule: rule14
  }, {
      start: 65792,
      length: 3,
      convRule: rule2
  }, {
      start: 65799,
      length: 45,
      convRule: rule17
  }, {
      start: 65847,
      length: 9,
      convRule: rule13
  }, {
      start: 65856,
      length: 53,
      convRule: rule128
  }, {
      start: 65909,
      length: 4,
      convRule: rule17
  }, {
      start: 65913,
      length: 17,
      convRule: rule13
  }, {
      start: 65930,
      length: 2,
      convRule: rule17
  }, {
      start: 65932,
      length: 3,
      convRule: rule13
  }, {
      start: 65936,
      length: 13,
      convRule: rule13
  }, {
      start: 65952,
      length: 1,
      convRule: rule13
  }, {
      start: 66000,
      length: 45,
      convRule: rule13
  }, {
      start: 66045,
      length: 1,
      convRule: rule92
  }, {
      start: 66176,
      length: 29,
      convRule: rule14
  }, {
      start: 66208,
      length: 49,
      convRule: rule14
  }, {
      start: 66272,
      length: 1,
      convRule: rule92
  }, {
      start: 66273,
      length: 27,
      convRule: rule17
  }, {
      start: 66304,
      length: 32,
      convRule: rule14
  }, {
      start: 66336,
      length: 4,
      convRule: rule17
  }, {
      start: 66349,
      length: 20,
      convRule: rule14
  }, {
      start: 66369,
      length: 1,
      convRule: rule128
  }, {
      start: 66370,
      length: 8,
      convRule: rule14
  }, {
      start: 66378,
      length: 1,
      convRule: rule128
  }, {
      start: 66384,
      length: 38,
      convRule: rule14
  }, {
      start: 66422,
      length: 5,
      convRule: rule92
  }, {
      start: 66432,
      length: 30,
      convRule: rule14
  }, {
      start: 66463,
      length: 1,
      convRule: rule2
  }, {
      start: 66464,
      length: 36,
      convRule: rule14
  }, {
      start: 66504,
      length: 8,
      convRule: rule14
  }, {
      start: 66512,
      length: 1,
      convRule: rule2
  }, {
      start: 66513,
      length: 5,
      convRule: rule128
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66640,
      length: 78,
      convRule: rule14
  }, {
      start: 66720,
      length: 10,
      convRule: rule8
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 66816,
      length: 40,
      convRule: rule14
  }, {
      start: 66864,
      length: 52,
      convRule: rule14
  }, {
      start: 66927,
      length: 1,
      convRule: rule2
  }, {
      start: 67072,
      length: 311,
      convRule: rule14
  }, {
      start: 67392,
      length: 22,
      convRule: rule14
  }, {
      start: 67424,
      length: 8,
      convRule: rule14
  }, {
      start: 67584,
      length: 6,
      convRule: rule14
  }, {
      start: 67592,
      length: 1,
      convRule: rule14
  }, {
      start: 67594,
      length: 44,
      convRule: rule14
  }, {
      start: 67639,
      length: 2,
      convRule: rule14
  }, {
      start: 67644,
      length: 1,
      convRule: rule14
  }, {
      start: 67647,
      length: 23,
      convRule: rule14
  }, {
      start: 67671,
      length: 1,
      convRule: rule2
  }, {
      start: 67672,
      length: 8,
      convRule: rule17
  }, {
      start: 67680,
      length: 23,
      convRule: rule14
  }, {
      start: 67703,
      length: 2,
      convRule: rule13
  }, {
      start: 67705,
      length: 7,
      convRule: rule17
  }, {
      start: 67712,
      length: 31,
      convRule: rule14
  }, {
      start: 67751,
      length: 9,
      convRule: rule17
  }, {
      start: 67808,
      length: 19,
      convRule: rule14
  }, {
      start: 67828,
      length: 2,
      convRule: rule14
  }, {
      start: 67835,
      length: 5,
      convRule: rule17
  }, {
      start: 67840,
      length: 22,
      convRule: rule14
  }, {
      start: 67862,
      length: 6,
      convRule: rule17
  }, {
      start: 67871,
      length: 1,
      convRule: rule2
  }, {
      start: 67872,
      length: 26,
      convRule: rule14
  }, {
      start: 67903,
      length: 1,
      convRule: rule2
  }, {
      start: 67968,
      length: 56,
      convRule: rule14
  }, {
      start: 68028,
      length: 2,
      convRule: rule17
  }, {
      start: 68030,
      length: 2,
      convRule: rule14
  }, {
      start: 68032,
      length: 16,
      convRule: rule17
  }, {
      start: 68050,
      length: 46,
      convRule: rule17
  }, {
      start: 68096,
      length: 1,
      convRule: rule14
  }, {
      start: 68097,
      length: 3,
      convRule: rule92
  }, {
      start: 68101,
      length: 2,
      convRule: rule92
  }, {
      start: 68108,
      length: 4,
      convRule: rule92
  }, {
      start: 68112,
      length: 4,
      convRule: rule14
  }, {
      start: 68117,
      length: 3,
      convRule: rule14
  }, {
      start: 68121,
      length: 29,
      convRule: rule14
  }, {
      start: 68152,
      length: 3,
      convRule: rule92
  }, {
      start: 68159,
      length: 1,
      convRule: rule92
  }, {
      start: 68160,
      length: 9,
      convRule: rule17
  }, {
      start: 68176,
      length: 9,
      convRule: rule2
  }, {
      start: 68192,
      length: 29,
      convRule: rule14
  }, {
      start: 68221,
      length: 2,
      convRule: rule17
  }, {
      start: 68223,
      length: 1,
      convRule: rule2
  }, {
      start: 68224,
      length: 29,
      convRule: rule14
  }, {
      start: 68253,
      length: 3,
      convRule: rule17
  }, {
      start: 68288,
      length: 8,
      convRule: rule14
  }, {
      start: 68296,
      length: 1,
      convRule: rule13
  }, {
      start: 68297,
      length: 28,
      convRule: rule14
  }, {
      start: 68325,
      length: 2,
      convRule: rule92
  }, {
      start: 68331,
      length: 5,
      convRule: rule17
  }, {
      start: 68336,
      length: 7,
      convRule: rule2
  }, {
      start: 68352,
      length: 54,
      convRule: rule14
  }, {
      start: 68409,
      length: 7,
      convRule: rule2
  }, {
      start: 68416,
      length: 22,
      convRule: rule14
  }, {
      start: 68440,
      length: 8,
      convRule: rule17
  }, {
      start: 68448,
      length: 19,
      convRule: rule14
  }, {
      start: 68472,
      length: 8,
      convRule: rule17
  }, {
      start: 68480,
      length: 18,
      convRule: rule14
  }, {
      start: 68505,
      length: 4,
      convRule: rule2
  }, {
      start: 68521,
      length: 7,
      convRule: rule17
  }, {
      start: 68608,
      length: 73,
      convRule: rule14
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 68858,
      length: 6,
      convRule: rule17
  }, {
      start: 68864,
      length: 36,
      convRule: rule14
  }, {
      start: 68900,
      length: 4,
      convRule: rule92
  }, {
      start: 68912,
      length: 10,
      convRule: rule8
  }, {
      start: 69216,
      length: 31,
      convRule: rule17
  }, {
      start: 69248,
      length: 42,
      convRule: rule14
  }, {
      start: 69291,
      length: 2,
      convRule: rule92
  }, {
      start: 69293,
      length: 1,
      convRule: rule7
  }, {
      start: 69296,
      length: 2,
      convRule: rule14
  }, {
      start: 69376,
      length: 29,
      convRule: rule14
  }, {
      start: 69405,
      length: 10,
      convRule: rule17
  }, {
      start: 69415,
      length: 1,
      convRule: rule14
  }, {
      start: 69424,
      length: 22,
      convRule: rule14
  }, {
      start: 69446,
      length: 11,
      convRule: rule92
  }, {
      start: 69457,
      length: 4,
      convRule: rule17
  }, {
      start: 69461,
      length: 5,
      convRule: rule2
  }, {
      start: 69552,
      length: 21,
      convRule: rule14
  }, {
      start: 69573,
      length: 7,
      convRule: rule17
  }, {
      start: 69600,
      length: 23,
      convRule: rule14
  }, {
      start: 69632,
      length: 1,
      convRule: rule124
  }, {
      start: 69633,
      length: 1,
      convRule: rule92
  }, {
      start: 69634,
      length: 1,
      convRule: rule124
  }, {
      start: 69635,
      length: 53,
      convRule: rule14
  }, {
      start: 69688,
      length: 15,
      convRule: rule92
  }, {
      start: 69703,
      length: 7,
      convRule: rule2
  }, {
      start: 69714,
      length: 20,
      convRule: rule17
  }, {
      start: 69734,
      length: 10,
      convRule: rule8
  }, {
      start: 69759,
      length: 3,
      convRule: rule92
  }, {
      start: 69762,
      length: 1,
      convRule: rule124
  }, {
      start: 69763,
      length: 45,
      convRule: rule14
  }, {
      start: 69808,
      length: 3,
      convRule: rule124
  }, {
      start: 69811,
      length: 4,
      convRule: rule92
  }, {
      start: 69815,
      length: 2,
      convRule: rule124
  }, {
      start: 69817,
      length: 2,
      convRule: rule92
  }, {
      start: 69819,
      length: 2,
      convRule: rule2
  }, {
      start: 69821,
      length: 1,
      convRule: rule16
  }, {
      start: 69822,
      length: 4,
      convRule: rule2
  }, {
      start: 69837,
      length: 1,
      convRule: rule16
  }, {
      start: 69840,
      length: 25,
      convRule: rule14
  }, {
      start: 69872,
      length: 10,
      convRule: rule8
  }, {
      start: 69888,
      length: 3,
      convRule: rule92
  }, {
      start: 69891,
      length: 36,
      convRule: rule14
  }, {
      start: 69927,
      length: 5,
      convRule: rule92
  }, {
      start: 69932,
      length: 1,
      convRule: rule124
  }, {
      start: 69933,
      length: 8,
      convRule: rule92
  }, {
      start: 69942,
      length: 10,
      convRule: rule8
  }, {
      start: 69952,
      length: 4,
      convRule: rule2
  }, {
      start: 69956,
      length: 1,
      convRule: rule14
  }, {
      start: 69957,
      length: 2,
      convRule: rule124
  }, {
      start: 69959,
      length: 1,
      convRule: rule14
  }, {
      start: 69968,
      length: 35,
      convRule: rule14
  }, {
      start: 70003,
      length: 1,
      convRule: rule92
  }, {
      start: 70004,
      length: 2,
      convRule: rule2
  }, {
      start: 70006,
      length: 1,
      convRule: rule14
  }, {
      start: 70016,
      length: 2,
      convRule: rule92
  }, {
      start: 70018,
      length: 1,
      convRule: rule124
  }, {
      start: 70019,
      length: 48,
      convRule: rule14
  }, {
      start: 70067,
      length: 3,
      convRule: rule124
  }, {
      start: 70070,
      length: 9,
      convRule: rule92
  }, {
      start: 70079,
      length: 2,
      convRule: rule124
  }, {
      start: 70081,
      length: 4,
      convRule: rule14
  }, {
      start: 70085,
      length: 4,
      convRule: rule2
  }, {
      start: 70089,
      length: 4,
      convRule: rule92
  }, {
      start: 70093,
      length: 1,
      convRule: rule2
  }, {
      start: 70094,
      length: 1,
      convRule: rule124
  }, {
      start: 70095,
      length: 1,
      convRule: rule92
  }, {
      start: 70096,
      length: 10,
      convRule: rule8
  }, {
      start: 70106,
      length: 1,
      convRule: rule14
  }, {
      start: 70107,
      length: 1,
      convRule: rule2
  }, {
      start: 70108,
      length: 1,
      convRule: rule14
  }, {
      start: 70109,
      length: 3,
      convRule: rule2
  }, {
      start: 70113,
      length: 20,
      convRule: rule17
  }, {
      start: 70144,
      length: 18,
      convRule: rule14
  }, {
      start: 70163,
      length: 25,
      convRule: rule14
  }, {
      start: 70188,
      length: 3,
      convRule: rule124
  }, {
      start: 70191,
      length: 3,
      convRule: rule92
  }, {
      start: 70194,
      length: 2,
      convRule: rule124
  }, {
      start: 70196,
      length: 1,
      convRule: rule92
  }, {
      start: 70197,
      length: 1,
      convRule: rule124
  }, {
      start: 70198,
      length: 2,
      convRule: rule92
  }, {
      start: 70200,
      length: 6,
      convRule: rule2
  }, {
      start: 70206,
      length: 1,
      convRule: rule92
  }, {
      start: 70272,
      length: 7,
      convRule: rule14
  }, {
      start: 70280,
      length: 1,
      convRule: rule14
  }, {
      start: 70282,
      length: 4,
      convRule: rule14
  }, {
      start: 70287,
      length: 15,
      convRule: rule14
  }, {
      start: 70303,
      length: 10,
      convRule: rule14
  }, {
      start: 70313,
      length: 1,
      convRule: rule2
  }, {
      start: 70320,
      length: 47,
      convRule: rule14
  }, {
      start: 70367,
      length: 1,
      convRule: rule92
  }, {
      start: 70368,
      length: 3,
      convRule: rule124
  }, {
      start: 70371,
      length: 8,
      convRule: rule92
  }, {
      start: 70384,
      length: 10,
      convRule: rule8
  }, {
      start: 70400,
      length: 2,
      convRule: rule92
  }, {
      start: 70402,
      length: 2,
      convRule: rule124
  }, {
      start: 70405,
      length: 8,
      convRule: rule14
  }, {
      start: 70415,
      length: 2,
      convRule: rule14
  }, {
      start: 70419,
      length: 22,
      convRule: rule14
  }, {
      start: 70442,
      length: 7,
      convRule: rule14
  }, {
      start: 70450,
      length: 2,
      convRule: rule14
  }, {
      start: 70453,
      length: 5,
      convRule: rule14
  }, {
      start: 70459,
      length: 2,
      convRule: rule92
  }, {
      start: 70461,
      length: 1,
      convRule: rule14
  }, {
      start: 70462,
      length: 2,
      convRule: rule124
  }, {
      start: 70464,
      length: 1,
      convRule: rule92
  }, {
      start: 70465,
      length: 4,
      convRule: rule124
  }, {
      start: 70471,
      length: 2,
      convRule: rule124
  }, {
      start: 70475,
      length: 3,
      convRule: rule124
  }, {
      start: 70480,
      length: 1,
      convRule: rule14
  }, {
      start: 70487,
      length: 1,
      convRule: rule124
  }, {
      start: 70493,
      length: 5,
      convRule: rule14
  }, {
      start: 70498,
      length: 2,
      convRule: rule124
  }, {
      start: 70502,
      length: 7,
      convRule: rule92
  }, {
      start: 70512,
      length: 5,
      convRule: rule92
  }, {
      start: 70656,
      length: 53,
      convRule: rule14
  }, {
      start: 70709,
      length: 3,
      convRule: rule124
  }, {
      start: 70712,
      length: 8,
      convRule: rule92
  }, {
      start: 70720,
      length: 2,
      convRule: rule124
  }, {
      start: 70722,
      length: 3,
      convRule: rule92
  }, {
      start: 70725,
      length: 1,
      convRule: rule124
  }, {
      start: 70726,
      length: 1,
      convRule: rule92
  }, {
      start: 70727,
      length: 4,
      convRule: rule14
  }, {
      start: 70731,
      length: 5,
      convRule: rule2
  }, {
      start: 70736,
      length: 10,
      convRule: rule8
  }, {
      start: 70746,
      length: 2,
      convRule: rule2
  }, {
      start: 70749,
      length: 1,
      convRule: rule2
  }, {
      start: 70750,
      length: 1,
      convRule: rule92
  }, {
      start: 70751,
      length: 3,
      convRule: rule14
  }, {
      start: 70784,
      length: 48,
      convRule: rule14
  }, {
      start: 70832,
      length: 3,
      convRule: rule124
  }, {
      start: 70835,
      length: 6,
      convRule: rule92
  }, {
      start: 70841,
      length: 1,
      convRule: rule124
  }, {
      start: 70842,
      length: 1,
      convRule: rule92
  }, {
      start: 70843,
      length: 4,
      convRule: rule124
  }, {
      start: 70847,
      length: 2,
      convRule: rule92
  }, {
      start: 70849,
      length: 1,
      convRule: rule124
  }, {
      start: 70850,
      length: 2,
      convRule: rule92
  }, {
      start: 70852,
      length: 2,
      convRule: rule14
  }, {
      start: 70854,
      length: 1,
      convRule: rule2
  }, {
      start: 70855,
      length: 1,
      convRule: rule14
  }, {
      start: 70864,
      length: 10,
      convRule: rule8
  }, {
      start: 71040,
      length: 47,
      convRule: rule14
  }, {
      start: 71087,
      length: 3,
      convRule: rule124
  }, {
      start: 71090,
      length: 4,
      convRule: rule92
  }, {
      start: 71096,
      length: 4,
      convRule: rule124
  }, {
      start: 71100,
      length: 2,
      convRule: rule92
  }, {
      start: 71102,
      length: 1,
      convRule: rule124
  }, {
      start: 71103,
      length: 2,
      convRule: rule92
  }, {
      start: 71105,
      length: 23,
      convRule: rule2
  }, {
      start: 71128,
      length: 4,
      convRule: rule14
  }, {
      start: 71132,
      length: 2,
      convRule: rule92
  }, {
      start: 71168,
      length: 48,
      convRule: rule14
  }, {
      start: 71216,
      length: 3,
      convRule: rule124
  }, {
      start: 71219,
      length: 8,
      convRule: rule92
  }, {
      start: 71227,
      length: 2,
      convRule: rule124
  }, {
      start: 71229,
      length: 1,
      convRule: rule92
  }, {
      start: 71230,
      length: 1,
      convRule: rule124
  }, {
      start: 71231,
      length: 2,
      convRule: rule92
  }, {
      start: 71233,
      length: 3,
      convRule: rule2
  }, {
      start: 71236,
      length: 1,
      convRule: rule14
  }, {
      start: 71248,
      length: 10,
      convRule: rule8
  }, {
      start: 71264,
      length: 13,
      convRule: rule2
  }, {
      start: 71296,
      length: 43,
      convRule: rule14
  }, {
      start: 71339,
      length: 1,
      convRule: rule92
  }, {
      start: 71340,
      length: 1,
      convRule: rule124
  }, {
      start: 71341,
      length: 1,
      convRule: rule92
  }, {
      start: 71342,
      length: 2,
      convRule: rule124
  }, {
      start: 71344,
      length: 6,
      convRule: rule92
  }, {
      start: 71350,
      length: 1,
      convRule: rule124
  }, {
      start: 71351,
      length: 1,
      convRule: rule92
  }, {
      start: 71352,
      length: 1,
      convRule: rule14
  }, {
      start: 71360,
      length: 10,
      convRule: rule8
  }, {
      start: 71424,
      length: 27,
      convRule: rule14
  }, {
      start: 71453,
      length: 3,
      convRule: rule92
  }, {
      start: 71456,
      length: 2,
      convRule: rule124
  }, {
      start: 71458,
      length: 4,
      convRule: rule92
  }, {
      start: 71462,
      length: 1,
      convRule: rule124
  }, {
      start: 71463,
      length: 5,
      convRule: rule92
  }, {
      start: 71472,
      length: 10,
      convRule: rule8
  }, {
      start: 71482,
      length: 2,
      convRule: rule17
  }, {
      start: 71484,
      length: 3,
      convRule: rule2
  }, {
      start: 71487,
      length: 1,
      convRule: rule13
  }, {
      start: 71680,
      length: 44,
      convRule: rule14
  }, {
      start: 71724,
      length: 3,
      convRule: rule124
  }, {
      start: 71727,
      length: 9,
      convRule: rule92
  }, {
      start: 71736,
      length: 1,
      convRule: rule124
  }, {
      start: 71737,
      length: 2,
      convRule: rule92
  }, {
      start: 71739,
      length: 1,
      convRule: rule2
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 71904,
      length: 10,
      convRule: rule8
  }, {
      start: 71914,
      length: 9,
      convRule: rule17
  }, {
      start: 71935,
      length: 8,
      convRule: rule14
  }, {
      start: 71945,
      length: 1,
      convRule: rule14
  }, {
      start: 71948,
      length: 8,
      convRule: rule14
  }, {
      start: 71957,
      length: 2,
      convRule: rule14
  }, {
      start: 71960,
      length: 24,
      convRule: rule14
  }, {
      start: 71984,
      length: 6,
      convRule: rule124
  }, {
      start: 71991,
      length: 2,
      convRule: rule124
  }, {
      start: 71995,
      length: 2,
      convRule: rule92
  }, {
      start: 71997,
      length: 1,
      convRule: rule124
  }, {
      start: 71998,
      length: 1,
      convRule: rule92
  }, {
      start: 71999,
      length: 1,
      convRule: rule14
  }, {
      start: 72000,
      length: 1,
      convRule: rule124
  }, {
      start: 72001,
      length: 1,
      convRule: rule14
  }, {
      start: 72002,
      length: 1,
      convRule: rule124
  }, {
      start: 72003,
      length: 1,
      convRule: rule92
  }, {
      start: 72004,
      length: 3,
      convRule: rule2
  }, {
      start: 72016,
      length: 10,
      convRule: rule8
  }, {
      start: 72096,
      length: 8,
      convRule: rule14
  }, {
      start: 72106,
      length: 39,
      convRule: rule14
  }, {
      start: 72145,
      length: 3,
      convRule: rule124
  }, {
      start: 72148,
      length: 4,
      convRule: rule92
  }, {
      start: 72154,
      length: 2,
      convRule: rule92
  }, {
      start: 72156,
      length: 4,
      convRule: rule124
  }, {
      start: 72160,
      length: 1,
      convRule: rule92
  }, {
      start: 72161,
      length: 1,
      convRule: rule14
  }, {
      start: 72162,
      length: 1,
      convRule: rule2
  }, {
      start: 72163,
      length: 1,
      convRule: rule14
  }, {
      start: 72164,
      length: 1,
      convRule: rule124
  }, {
      start: 72192,
      length: 1,
      convRule: rule14
  }, {
      start: 72193,
      length: 10,
      convRule: rule92
  }, {
      start: 72203,
      length: 40,
      convRule: rule14
  }, {
      start: 72243,
      length: 6,
      convRule: rule92
  }, {
      start: 72249,
      length: 1,
      convRule: rule124
  }, {
      start: 72250,
      length: 1,
      convRule: rule14
  }, {
      start: 72251,
      length: 4,
      convRule: rule92
  }, {
      start: 72255,
      length: 8,
      convRule: rule2
  }, {
      start: 72263,
      length: 1,
      convRule: rule92
  }, {
      start: 72272,
      length: 1,
      convRule: rule14
  }, {
      start: 72273,
      length: 6,
      convRule: rule92
  }, {
      start: 72279,
      length: 2,
      convRule: rule124
  }, {
      start: 72281,
      length: 3,
      convRule: rule92
  }, {
      start: 72284,
      length: 46,
      convRule: rule14
  }, {
      start: 72330,
      length: 13,
      convRule: rule92
  }, {
      start: 72343,
      length: 1,
      convRule: rule124
  }, {
      start: 72344,
      length: 2,
      convRule: rule92
  }, {
      start: 72346,
      length: 3,
      convRule: rule2
  }, {
      start: 72349,
      length: 1,
      convRule: rule14
  }, {
      start: 72350,
      length: 5,
      convRule: rule2
  }, {
      start: 72384,
      length: 57,
      convRule: rule14
  }, {
      start: 72704,
      length: 9,
      convRule: rule14
  }, {
      start: 72714,
      length: 37,
      convRule: rule14
  }, {
      start: 72751,
      length: 1,
      convRule: rule124
  }, {
      start: 72752,
      length: 7,
      convRule: rule92
  }, {
      start: 72760,
      length: 6,
      convRule: rule92
  }, {
      start: 72766,
      length: 1,
      convRule: rule124
  }, {
      start: 72767,
      length: 1,
      convRule: rule92
  }, {
      start: 72768,
      length: 1,
      convRule: rule14
  }, {
      start: 72769,
      length: 5,
      convRule: rule2
  }, {
      start: 72784,
      length: 10,
      convRule: rule8
  }, {
      start: 72794,
      length: 19,
      convRule: rule17
  }, {
      start: 72816,
      length: 2,
      convRule: rule2
  }, {
      start: 72818,
      length: 30,
      convRule: rule14
  }, {
      start: 72850,
      length: 22,
      convRule: rule92
  }, {
      start: 72873,
      length: 1,
      convRule: rule124
  }, {
      start: 72874,
      length: 7,
      convRule: rule92
  }, {
      start: 72881,
      length: 1,
      convRule: rule124
  }, {
      start: 72882,
      length: 2,
      convRule: rule92
  }, {
      start: 72884,
      length: 1,
      convRule: rule124
  }, {
      start: 72885,
      length: 2,
      convRule: rule92
  }, {
      start: 72960,
      length: 7,
      convRule: rule14
  }, {
      start: 72968,
      length: 2,
      convRule: rule14
  }, {
      start: 72971,
      length: 38,
      convRule: rule14
  }, {
      start: 73009,
      length: 6,
      convRule: rule92
  }, {
      start: 73018,
      length: 1,
      convRule: rule92
  }, {
      start: 73020,
      length: 2,
      convRule: rule92
  }, {
      start: 73023,
      length: 7,
      convRule: rule92
  }, {
      start: 73030,
      length: 1,
      convRule: rule14
  }, {
      start: 73031,
      length: 1,
      convRule: rule92
  }, {
      start: 73040,
      length: 10,
      convRule: rule8
  }, {
      start: 73056,
      length: 6,
      convRule: rule14
  }, {
      start: 73063,
      length: 2,
      convRule: rule14
  }, {
      start: 73066,
      length: 32,
      convRule: rule14
  }, {
      start: 73098,
      length: 5,
      convRule: rule124
  }, {
      start: 73104,
      length: 2,
      convRule: rule92
  }, {
      start: 73107,
      length: 2,
      convRule: rule124
  }, {
      start: 73109,
      length: 1,
      convRule: rule92
  }, {
      start: 73110,
      length: 1,
      convRule: rule124
  }, {
      start: 73111,
      length: 1,
      convRule: rule92
  }, {
      start: 73112,
      length: 1,
      convRule: rule14
  }, {
      start: 73120,
      length: 10,
      convRule: rule8
  }, {
      start: 73440,
      length: 19,
      convRule: rule14
  }, {
      start: 73459,
      length: 2,
      convRule: rule92
  }, {
      start: 73461,
      length: 2,
      convRule: rule124
  }, {
      start: 73463,
      length: 2,
      convRule: rule2
  }, {
      start: 73648,
      length: 1,
      convRule: rule14
  }, {
      start: 73664,
      length: 21,
      convRule: rule17
  }, {
      start: 73685,
      length: 8,
      convRule: rule13
  }, {
      start: 73693,
      length: 4,
      convRule: rule3
  }, {
      start: 73697,
      length: 17,
      convRule: rule13
  }, {
      start: 73727,
      length: 1,
      convRule: rule2
  }, {
      start: 73728,
      length: 922,
      convRule: rule14
  }, {
      start: 74752,
      length: 111,
      convRule: rule128
  }, {
      start: 74864,
      length: 5,
      convRule: rule2
  }, {
      start: 74880,
      length: 196,
      convRule: rule14
  }, {
      start: 77824,
      length: 1071,
      convRule: rule14
  }, {
      start: 78896,
      length: 9,
      convRule: rule16
  }, {
      start: 82944,
      length: 583,
      convRule: rule14
  }, {
      start: 92160,
      length: 569,
      convRule: rule14
  }, {
      start: 92736,
      length: 31,
      convRule: rule14
  }, {
      start: 92768,
      length: 10,
      convRule: rule8
  }, {
      start: 92782,
      length: 2,
      convRule: rule2
  }, {
      start: 92880,
      length: 30,
      convRule: rule14
  }, {
      start: 92912,
      length: 5,
      convRule: rule92
  }, {
      start: 92917,
      length: 1,
      convRule: rule2
  }, {
      start: 92928,
      length: 48,
      convRule: rule14
  }, {
      start: 92976,
      length: 7,
      convRule: rule92
  }, {
      start: 92983,
      length: 5,
      convRule: rule2
  }, {
      start: 92988,
      length: 4,
      convRule: rule13
  }, {
      start: 92992,
      length: 4,
      convRule: rule91
  }, {
      start: 92996,
      length: 1,
      convRule: rule2
  }, {
      start: 92997,
      length: 1,
      convRule: rule13
  }, {
      start: 93008,
      length: 10,
      convRule: rule8
  }, {
      start: 93019,
      length: 7,
      convRule: rule17
  }, {
      start: 93027,
      length: 21,
      convRule: rule14
  }, {
      start: 93053,
      length: 19,
      convRule: rule14
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 93824,
      length: 23,
      convRule: rule17
  }, {
      start: 93847,
      length: 4,
      convRule: rule2
  }, {
      start: 93952,
      length: 75,
      convRule: rule14
  }, {
      start: 94031,
      length: 1,
      convRule: rule92
  }, {
      start: 94032,
      length: 1,
      convRule: rule14
  }, {
      start: 94033,
      length: 55,
      convRule: rule124
  }, {
      start: 94095,
      length: 4,
      convRule: rule92
  }, {
      start: 94099,
      length: 13,
      convRule: rule91
  }, {
      start: 94176,
      length: 2,
      convRule: rule91
  }, {
      start: 94178,
      length: 1,
      convRule: rule2
  }, {
      start: 94179,
      length: 1,
      convRule: rule91
  }, {
      start: 94180,
      length: 1,
      convRule: rule92
  }, {
      start: 94192,
      length: 2,
      convRule: rule124
  }, {
      start: 94208,
      length: 6136,
      convRule: rule14
  }, {
      start: 100352,
      length: 1238,
      convRule: rule14
  }, {
      start: 101632,
      length: 9,
      convRule: rule14
  }, {
      start: 110592,
      length: 287,
      convRule: rule14
  }, {
      start: 110928,
      length: 3,
      convRule: rule14
  }, {
      start: 110948,
      length: 4,
      convRule: rule14
  }, {
      start: 110960,
      length: 396,
      convRule: rule14
  }, {
      start: 113664,
      length: 107,
      convRule: rule14
  }, {
      start: 113776,
      length: 13,
      convRule: rule14
  }, {
      start: 113792,
      length: 9,
      convRule: rule14
  }, {
      start: 113808,
      length: 10,
      convRule: rule14
  }, {
      start: 113820,
      length: 1,
      convRule: rule13
  }, {
      start: 113821,
      length: 2,
      convRule: rule92
  }, {
      start: 113823,
      length: 1,
      convRule: rule2
  }, {
      start: 113824,
      length: 4,
      convRule: rule16
  }, {
      start: 118784,
      length: 246,
      convRule: rule13
  }, {
      start: 119040,
      length: 39,
      convRule: rule13
  }, {
      start: 119081,
      length: 60,
      convRule: rule13
  }, {
      start: 119141,
      length: 2,
      convRule: rule124
  }, {
      start: 119143,
      length: 3,
      convRule: rule92
  }, {
      start: 119146,
      length: 3,
      convRule: rule13
  }, {
      start: 119149,
      length: 6,
      convRule: rule124
  }, {
      start: 119155,
      length: 8,
      convRule: rule16
  }, {
      start: 119163,
      length: 8,
      convRule: rule92
  }, {
      start: 119171,
      length: 2,
      convRule: rule13
  }, {
      start: 119173,
      length: 7,
      convRule: rule92
  }, {
      start: 119180,
      length: 30,
      convRule: rule13
  }, {
      start: 119210,
      length: 4,
      convRule: rule92
  }, {
      start: 119214,
      length: 59,
      convRule: rule13
  }, {
      start: 119296,
      length: 66,
      convRule: rule13
  }, {
      start: 119362,
      length: 3,
      convRule: rule92
  }, {
      start: 119365,
      length: 1,
      convRule: rule13
  }, {
      start: 119520,
      length: 20,
      convRule: rule17
  }, {
      start: 119552,
      length: 87,
      convRule: rule13
  }, {
      start: 119648,
      length: 25,
      convRule: rule17
  }, {
      start: 119808,
      length: 26,
      convRule: rule107
  }, {
      start: 119834,
      length: 26,
      convRule: rule20
  }, {
      start: 119860,
      length: 26,
      convRule: rule107
  }, {
      start: 119886,
      length: 7,
      convRule: rule20
  }, {
      start: 119894,
      length: 18,
      convRule: rule20
  }, {
      start: 119912,
      length: 26,
      convRule: rule107
  }, {
      start: 119938,
      length: 26,
      convRule: rule20
  }, {
      start: 119964,
      length: 1,
      convRule: rule107
  }, {
      start: 119966,
      length: 2,
      convRule: rule107
  }, {
      start: 119970,
      length: 1,
      convRule: rule107
  }, {
      start: 119973,
      length: 2,
      convRule: rule107
  }, {
      start: 119977,
      length: 4,
      convRule: rule107
  }, {
      start: 119982,
      length: 8,
      convRule: rule107
  }, {
      start: 119990,
      length: 4,
      convRule: rule20
  }, {
      start: 119995,
      length: 1,
      convRule: rule20
  }, {
      start: 119997,
      length: 7,
      convRule: rule20
  }, {
      start: 120005,
      length: 11,
      convRule: rule20
  }, {
      start: 120016,
      length: 26,
      convRule: rule107
  }, {
      start: 120042,
      length: 26,
      convRule: rule20
  }, {
      start: 120068,
      length: 2,
      convRule: rule107
  }, {
      start: 120071,
      length: 4,
      convRule: rule107
  }, {
      start: 120077,
      length: 8,
      convRule: rule107
  }, {
      start: 120086,
      length: 7,
      convRule: rule107
  }, {
      start: 120094,
      length: 26,
      convRule: rule20
  }, {
      start: 120120,
      length: 2,
      convRule: rule107
  }, {
      start: 120123,
      length: 4,
      convRule: rule107
  }, {
      start: 120128,
      length: 5,
      convRule: rule107
  }, {
      start: 120134,
      length: 1,
      convRule: rule107
  }, {
      start: 120138,
      length: 7,
      convRule: rule107
  }, {
      start: 120146,
      length: 26,
      convRule: rule20
  }, {
      start: 120172,
      length: 26,
      convRule: rule107
  }, {
      start: 120198,
      length: 26,
      convRule: rule20
  }, {
      start: 120224,
      length: 26,
      convRule: rule107
  }, {
      start: 120250,
      length: 26,
      convRule: rule20
  }, {
      start: 120276,
      length: 26,
      convRule: rule107
  }, {
      start: 120302,
      length: 26,
      convRule: rule20
  }, {
      start: 120328,
      length: 26,
      convRule: rule107
  }, {
      start: 120354,
      length: 26,
      convRule: rule20
  }, {
      start: 120380,
      length: 26,
      convRule: rule107
  }, {
      start: 120406,
      length: 26,
      convRule: rule20
  }, {
      start: 120432,
      length: 26,
      convRule: rule107
  }, {
      start: 120458,
      length: 28,
      convRule: rule20
  }, {
      start: 120488,
      length: 25,
      convRule: rule107
  }, {
      start: 120513,
      length: 1,
      convRule: rule6
  }, {
      start: 120514,
      length: 25,
      convRule: rule20
  }, {
      start: 120539,
      length: 1,
      convRule: rule6
  }, {
      start: 120540,
      length: 6,
      convRule: rule20
  }, {
      start: 120546,
      length: 25,
      convRule: rule107
  }, {
      start: 120571,
      length: 1,
      convRule: rule6
  }, {
      start: 120572,
      length: 25,
      convRule: rule20
  }, {
      start: 120597,
      length: 1,
      convRule: rule6
  }, {
      start: 120598,
      length: 6,
      convRule: rule20
  }, {
      start: 120604,
      length: 25,
      convRule: rule107
  }, {
      start: 120629,
      length: 1,
      convRule: rule6
  }, {
      start: 120630,
      length: 25,
      convRule: rule20
  }, {
      start: 120655,
      length: 1,
      convRule: rule6
  }, {
      start: 120656,
      length: 6,
      convRule: rule20
  }, {
      start: 120662,
      length: 25,
      convRule: rule107
  }, {
      start: 120687,
      length: 1,
      convRule: rule6
  }, {
      start: 120688,
      length: 25,
      convRule: rule20
  }, {
      start: 120713,
      length: 1,
      convRule: rule6
  }, {
      start: 120714,
      length: 6,
      convRule: rule20
  }, {
      start: 120720,
      length: 25,
      convRule: rule107
  }, {
      start: 120745,
      length: 1,
      convRule: rule6
  }, {
      start: 120746,
      length: 25,
      convRule: rule20
  }, {
      start: 120771,
      length: 1,
      convRule: rule6
  }, {
      start: 120772,
      length: 6,
      convRule: rule20
  }, {
      start: 120778,
      length: 1,
      convRule: rule107
  }, {
      start: 120779,
      length: 1,
      convRule: rule20
  }, {
      start: 120782,
      length: 50,
      convRule: rule8
  }, {
      start: 120832,
      length: 512,
      convRule: rule13
  }, {
      start: 121344,
      length: 55,
      convRule: rule92
  }, {
      start: 121399,
      length: 4,
      convRule: rule13
  }, {
      start: 121403,
      length: 50,
      convRule: rule92
  }, {
      start: 121453,
      length: 8,
      convRule: rule13
  }, {
      start: 121461,
      length: 1,
      convRule: rule92
  }, {
      start: 121462,
      length: 14,
      convRule: rule13
  }, {
      start: 121476,
      length: 1,
      convRule: rule92
  }, {
      start: 121477,
      length: 2,
      convRule: rule13
  }, {
      start: 121479,
      length: 5,
      convRule: rule2
  }, {
      start: 121499,
      length: 5,
      convRule: rule92
  }, {
      start: 121505,
      length: 15,
      convRule: rule92
  }, {
      start: 122880,
      length: 7,
      convRule: rule92
  }, {
      start: 122888,
      length: 17,
      convRule: rule92
  }, {
      start: 122907,
      length: 7,
      convRule: rule92
  }, {
      start: 122915,
      length: 2,
      convRule: rule92
  }, {
      start: 122918,
      length: 5,
      convRule: rule92
  }, {
      start: 123136,
      length: 45,
      convRule: rule14
  }, {
      start: 123184,
      length: 7,
      convRule: rule92
  }, {
      start: 123191,
      length: 7,
      convRule: rule91
  }, {
      start: 123200,
      length: 10,
      convRule: rule8
  }, {
      start: 123214,
      length: 1,
      convRule: rule14
  }, {
      start: 123215,
      length: 1,
      convRule: rule13
  }, {
      start: 123584,
      length: 44,
      convRule: rule14
  }, {
      start: 123628,
      length: 4,
      convRule: rule92
  }, {
      start: 123632,
      length: 10,
      convRule: rule8
  }, {
      start: 123647,
      length: 1,
      convRule: rule3
  }, {
      start: 124928,
      length: 197,
      convRule: rule14
  }, {
      start: 125127,
      length: 9,
      convRule: rule17
  }, {
      start: 125136,
      length: 7,
      convRule: rule92
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  }, {
      start: 125252,
      length: 7,
      convRule: rule92
  }, {
      start: 125259,
      length: 1,
      convRule: rule91
  }, {
      start: 125264,
      length: 10,
      convRule: rule8
  }, {
      start: 125278,
      length: 2,
      convRule: rule2
  }, {
      start: 126065,
      length: 59,
      convRule: rule17
  }, {
      start: 126124,
      length: 1,
      convRule: rule13
  }, {
      start: 126125,
      length: 3,
      convRule: rule17
  }, {
      start: 126128,
      length: 1,
      convRule: rule3
  }, {
      start: 126129,
      length: 4,
      convRule: rule17
  }, {
      start: 126209,
      length: 45,
      convRule: rule17
  }, {
      start: 126254,
      length: 1,
      convRule: rule13
  }, {
      start: 126255,
      length: 15,
      convRule: rule17
  }, {
      start: 126464,
      length: 4,
      convRule: rule14
  }, {
      start: 126469,
      length: 27,
      convRule: rule14
  }, {
      start: 126497,
      length: 2,
      convRule: rule14
  }, {
      start: 126500,
      length: 1,
      convRule: rule14
  }, {
      start: 126503,
      length: 1,
      convRule: rule14
  }, {
      start: 126505,
      length: 10,
      convRule: rule14
  }, {
      start: 126516,
      length: 4,
      convRule: rule14
  }, {
      start: 126521,
      length: 1,
      convRule: rule14
  }, {
      start: 126523,
      length: 1,
      convRule: rule14
  }, {
      start: 126530,
      length: 1,
      convRule: rule14
  }, {
      start: 126535,
      length: 1,
      convRule: rule14
  }, {
      start: 126537,
      length: 1,
      convRule: rule14
  }, {
      start: 126539,
      length: 1,
      convRule: rule14
  }, {
      start: 126541,
      length: 3,
      convRule: rule14
  }, {
      start: 126545,
      length: 2,
      convRule: rule14
  }, {
      start: 126548,
      length: 1,
      convRule: rule14
  }, {
      start: 126551,
      length: 1,
      convRule: rule14
  }, {
      start: 126553,
      length: 1,
      convRule: rule14
  }, {
      start: 126555,
      length: 1,
      convRule: rule14
  }, {
      start: 126557,
      length: 1,
      convRule: rule14
  }, {
      start: 126559,
      length: 1,
      convRule: rule14
  }, {
      start: 126561,
      length: 2,
      convRule: rule14
  }, {
      start: 126564,
      length: 1,
      convRule: rule14
  }, {
      start: 126567,
      length: 4,
      convRule: rule14
  }, {
      start: 126572,
      length: 7,
      convRule: rule14
  }, {
      start: 126580,
      length: 4,
      convRule: rule14
  }, {
      start: 126585,
      length: 4,
      convRule: rule14
  }, {
      start: 126590,
      length: 1,
      convRule: rule14
  }, {
      start: 126592,
      length: 10,
      convRule: rule14
  }, {
      start: 126603,
      length: 17,
      convRule: rule14
  }, {
      start: 126625,
      length: 3,
      convRule: rule14
  }, {
      start: 126629,
      length: 5,
      convRule: rule14
  }, {
      start: 126635,
      length: 17,
      convRule: rule14
  }, {
      start: 126704,
      length: 2,
      convRule: rule6
  }, {
      start: 126976,
      length: 44,
      convRule: rule13
  }, {
      start: 127024,
      length: 100,
      convRule: rule13
  }, {
      start: 127136,
      length: 15,
      convRule: rule13
  }, {
      start: 127153,
      length: 15,
      convRule: rule13
  }, {
      start: 127169,
      length: 15,
      convRule: rule13
  }, {
      start: 127185,
      length: 37,
      convRule: rule13
  }, {
      start: 127232,
      length: 13,
      convRule: rule17
  }, {
      start: 127245,
      length: 161,
      convRule: rule13
  }, {
      start: 127462,
      length: 29,
      convRule: rule13
  }, {
      start: 127504,
      length: 44,
      convRule: rule13
  }, {
      start: 127552,
      length: 9,
      convRule: rule13
  }, {
      start: 127568,
      length: 2,
      convRule: rule13
  }, {
      start: 127584,
      length: 6,
      convRule: rule13
  }, {
      start: 127744,
      length: 251,
      convRule: rule13
  }, {
      start: 127995,
      length: 5,
      convRule: rule10
  }, {
      start: 128000,
      length: 728,
      convRule: rule13
  }, {
      start: 128736,
      length: 13,
      convRule: rule13
  }, {
      start: 128752,
      length: 13,
      convRule: rule13
  }, {
      start: 128768,
      length: 116,
      convRule: rule13
  }, {
      start: 128896,
      length: 89,
      convRule: rule13
  }, {
      start: 128992,
      length: 12,
      convRule: rule13
  }, {
      start: 129024,
      length: 12,
      convRule: rule13
  }, {
      start: 129040,
      length: 56,
      convRule: rule13
  }, {
      start: 129104,
      length: 10,
      convRule: rule13
  }, {
      start: 129120,
      length: 40,
      convRule: rule13
  }, {
      start: 129168,
      length: 30,
      convRule: rule13
  }, {
      start: 129200,
      length: 2,
      convRule: rule13
  }, {
      start: 129280,
      length: 121,
      convRule: rule13
  }, {
      start: 129402,
      length: 82,
      convRule: rule13
  }, {
      start: 129485,
      length: 135,
      convRule: rule13
  }, {
      start: 129632,
      length: 14,
      convRule: rule13
  }, {
      start: 129648,
      length: 5,
      convRule: rule13
  }, {
      start: 129656,
      length: 3,
      convRule: rule13
  }, {
      start: 129664,
      length: 7,
      convRule: rule13
  }, {
      start: 129680,
      length: 25,
      convRule: rule13
  }, {
      start: 129712,
      length: 7,
      convRule: rule13
  }, {
      start: 129728,
      length: 3,
      convRule: rule13
  }, {
      start: 129744,
      length: 7,
      convRule: rule13
  }, {
      start: 129792,
      length: 147,
      convRule: rule13
  }, {
      start: 129940,
      length: 55,
      convRule: rule13
  }, {
      start: 130032,
      length: 10,
      convRule: rule8
  }, {
      start: 131072,
      length: 42718,
      convRule: rule14
  }, {
      start: 173824,
      length: 4149,
      convRule: rule14
  }, {
      start: 177984,
      length: 222,
      convRule: rule14
  }, {
      start: 178208,
      length: 5762,
      convRule: rule14
  }, {
      start: 183984,
      length: 7473,
      convRule: rule14
  }, {
      start: 194560,
      length: 542,
      convRule: rule14
  }, {
      start: 196608,
      length: 4939,
      convRule: rule14
  }, {
      start: 917505,
      length: 1,
      convRule: rule16
  }, {
      start: 917536,
      length: 96,
      convRule: rule16
  }, {
      start: 917760,
      length: 240,
      convRule: rule92
  }, {
      start: 983040,
      length: 65534,
      convRule: rule200
  }, {
      start: 1048576,
      length: 65534,
      convRule: rule200
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $28 = $$char < 256;
              if ($28) {
                  return numLat1Blocks;
              };
              return numBlocks;
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5628, column 8 - line 5630, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };                                                                                                                                          
  var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);
  var uIswlower = checkAttr([ gencatLL ]);                                                                                                                                                                                                                            
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["uIswupper"] = uIswupper;
  exports["uIswlower"] = uIswlower;
  exports["uIswalpha"] = uIswalpha;
  exports["uIswspace"] = uIswspace;
  exports["uTowupper"] = uTowupper;
  exports["uTowlower"] = uTowlower;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["length"] = length;
  exports["drop"] = drop;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CodePoint.Unicode"] = $PS["Data.CodePoint.Unicode"] || {};
  var exports = $PS["Data.CodePoint.Unicode"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_CodePoint_Unicode_Internal = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                              
  var modify = Unsafe_Coerce.unsafeCoerce;
  var toLowerSimple = modify(Data_CodePoint_Unicode_Internal.uTowlower);
  var toUpperSimple = modify(Data_CodePoint_Unicode_Internal.uTowupper);
  var isUpper = (function () {
      var $54 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($55) {
          return Data_CodePoint_Unicode_Internal.uIswupper($54($55));
      };
  })();
  var isSpace = function (c) {
      var uc = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c);
      var $16 = uc <= 823;
      if ($16) {
          return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
      };
      return Data_CodePoint_Unicode_Internal.uIswspace(uc);
  };   
  var isOctDigit = function (c) {
      var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 7 && diff >= 0;
  };
  var isLower = (function () {
      var $58 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($59) {
          return Data_CodePoint_Unicode_Internal.uIswlower($58($59));
      };
  })();
  var isDecDigit = function (c) {
      var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDecDigit(c) || ((function () {
          var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("A") | 0;
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("a") | 0;
          return diff <= 5 && diff >= 0;
      })());
  };   
  var isAlpha = (function () {
      var $64 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($65) {
          return Data_CodePoint_Unicode_Internal.uIswalpha($64($65));
      };
  })();
  var hexDigitToInt = function (c) {
      var hexUpper = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("A") | 0;
      var hexLower = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("a") | 0;
      var dec = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      var result = (function () {
          if (dec <= 9 && dec >= 0) {
              return new Data_Maybe.Just(dec);
          };
          if (hexLower <= 5 && hexLower >= 0) {
              return Data_Maybe.Just.create(hexLower + 10 | 0);
          };
          if (hexUpper <= 5 && hexUpper >= 0) {
              return Data_Maybe.Just.create(hexUpper + 10 | 0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode (line 585, column 5 - line 585, column 24): " + [  ]);
      })();
      return result;
  };
  exports["isLower"] = isLower;
  exports["isUpper"] = isUpper;
  exports["isAlpha"] = isAlpha;
  exports["isDecDigit"] = isDecDigit;
  exports["isOctDigit"] = isOctDigit;
  exports["isHexDigit"] = isHexDigit;
  exports["isSpace"] = isSpace;
  exports["hexDigitToInt"] = hexDigitToInt;
  exports["toLowerSimple"] = toLowerSimple;
  exports["toUpperSimple"] = toUpperSimple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Coyoneda"] = $PS["Data.Coyoneda"] || {};
  var exports = $PS["Data.Coyoneda"];
  var Control_Category = $PS["Control.Category"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];                        
  var CoyonedaF = (function () {
      function CoyonedaF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoyonedaF.create = function (value0) {
          return function (value1) {
              return new CoyonedaF(value0, value1);
          };
      };
      return CoyonedaF;
  })();
  var Coyoneda = function (x) {
      return x;
  };
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
      };
  };
  var functorCoyoneda = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($84) {
                  return f(v1.value0($84));
              })(v1.value1);
          })(v);
      };
  });
  var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
  exports["unCoyoneda"] = unCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                          
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["foldableMap"] = foldableMap;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                                        
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["replace"] = $foreign.replace;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["global"] = global;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Unicode"] = $PS["Data.String.Unicode"] || {};
  var exports = $PS["Data.String.Unicode"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var convert = function (f) {
      var $2 = Data_Functor.map(Data_Functor.functorArray)(f);
      return function ($3) {
          return Data_String_CodePoints.fromCodePointArray($2(Data_String_CodePoints.toCodePointArray($3)));
      };
  };
  var toLowerSimple = convert(Data_CodePoint_Unicode.toLowerSimple);
  var toUpperSimple = convert(Data_CodePoint_Unicode.toUpperSimple);
  exports["toUpperSimple"] = toUpperSimple;
  exports["toLowerSimple"] = toLowerSimple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.warn = function (s) {
    return function () {
      console.warn(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["warn"] = $foreign.warn;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  exports["readProp"] = readProp;
})(PS);
(function(exports) {
  "use strict";

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["lookup"] = lookup;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Formula"] = $PS["Formula"] || {};
  var exports = $PS["Formula"];
  var Data_Eq = $PS["Data.Eq"];                                
  var Variable = function (x) {
      return x;
  };
  var Var = (function () {
      function Var(value0) {
          this.value0 = value0;
      };
      Var.create = function (value0) {
          return new Var(value0);
      };
      return Var;
  })();
  var App = (function () {
      function App(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      App.create = function (value0) {
          return function (value1) {
              return new App(value0, value1);
          };
      };
      return App;
  })();
  var Predicate = (function () {
      function Predicate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Predicate.create = function (value0) {
          return function (value1) {
              return new Predicate(value0, value1);
          };
      };
      return Predicate;
  })();
  var Not = (function () {
      function Not(value0) {
          this.value0 = value0;
      };
      Not.create = function (value0) {
          return new Not(value0);
      };
      return Not;
  })();
  var And = (function () {
      function And(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      And.create = function (value0) {
          return function (value1) {
              return new And(value0, value1);
          };
      };
      return And;
  })();
  var Or = (function () {
      function Or(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Or.create = function (value0) {
          return function (value1) {
              return new Or(value0, value1);
          };
      };
      return Or;
  })();
  var Implies = (function () {
      function Implies(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Implies.create = function (value0) {
          return function (value1) {
              return new Implies(value0, value1);
          };
      };
      return Implies;
  })();
  var Forall = (function () {
      function Forall(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Forall.create = function (value0) {
          return function (value1) {
              return new Forall(value0, value1);
          };
      };
      return Forall;
  })();
  var Exists = (function () {
      function Exists(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Exists.create = function (value0) {
          return function (value1) {
              return new Exists(value0, value1);
          };
      };
      return Exists;
  })();
  var eqVariable = Data_Eq.eqString;
  var eqTerm = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Var && y instanceof Var) {
              return Data_Eq.eq(eqVariable)(x.value0)(y.value0);
          };
          if (x instanceof App && y instanceof App) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(eqTerm))(x.value1)(y.value1);
          };
          return false;
      };
  });
  var eqFormula = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Predicate && y instanceof Predicate) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(eqTerm))(x.value1)(y.value1);
          };
          if (x instanceof Not && y instanceof Not) {
              return Data_Eq.eq(eqFormula)(x.value0)(y.value0);
          };
          if (x instanceof And && y instanceof And) {
              return Data_Eq.eq(eqFormula)(x.value0)(y.value0) && Data_Eq.eq(eqFormula)(x.value1)(y.value1);
          };
          if (x instanceof Or && y instanceof Or) {
              return Data_Eq.eq(eqFormula)(x.value0)(y.value0) && Data_Eq.eq(eqFormula)(x.value1)(y.value1);
          };
          if (x instanceof Implies && y instanceof Implies) {
              return Data_Eq.eq(eqFormula)(x.value0)(y.value0) && Data_Eq.eq(eqFormula)(x.value1)(y.value1);
          };
          if (x instanceof Forall && y instanceof Forall) {
              return Data_Eq.eq(eqVariable)(x.value0)(y.value0) && Data_Eq.eq(eqFormula)(x.value1)(y.value1);
          };
          if (x instanceof Exists && y instanceof Exists) {
              return Data_Eq.eq(eqVariable)(x.value0)(y.value0) && Data_Eq.eq(eqFormula)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var bottomProp = new Predicate("\u22a5", [  ]);
  exports["Variable"] = Variable;
  exports["Var"] = Var;
  exports["App"] = App;
  exports["Predicate"] = Predicate;
  exports["Not"] = Not;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Implies"] = Implies;
  exports["Forall"] = Forall;
  exports["Exists"] = Exists;
  exports["bottomProp"] = bottomProp;
  exports["eqFormula"] = eqFormula;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.Config.Text"] = $PS["GUI.Config.Text"] || {};
  var exports = $PS["GUI.Config.Text"];
  var panelNotImplemented = "This panel has not been implemented yet.";
  var editorSlogan = "A proof editor";
  var editorName = "\xacConan";
  exports["editorName"] = editorName;
  exports["editorSlogan"] = editorSlogan;
  exports["panelNotImplemented"] = panelNotImplemented;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.Rules"] = $PS["GUI.Rules"] || {};
  var exports = $PS["GUI.Rules"];
  var Data_Show = $PS["Data.Show"];                
  var RtPremise = (function () {
      function RtPremise() {

      };
      RtPremise.value = new RtPremise();
      return RtPremise;
  })();
  var RtAssumption = (function () {
      function RtAssumption() {

      };
      RtAssumption.value = new RtAssumption();
      return RtAssumption;
  })();
  var AndElim1 = (function () {
      function AndElim1() {

      };
      AndElim1.value = new AndElim1();
      return AndElim1;
  })();
  var AndElim2 = (function () {
      function AndElim2() {

      };
      AndElim2.value = new AndElim2();
      return AndElim2;
  })();
  var AndIntro = (function () {
      function AndIntro() {

      };
      AndIntro.value = new AndIntro();
      return AndIntro;
  })();
  var OrElim = (function () {
      function OrElim() {

      };
      OrElim.value = new OrElim();
      return OrElim;
  })();
  var OrIntro1 = (function () {
      function OrIntro1() {

      };
      OrIntro1.value = new OrIntro1();
      return OrIntro1;
  })();
  var OrIntro2 = (function () {
      function OrIntro2() {

      };
      OrIntro2.value = new OrIntro2();
      return OrIntro2;
  })();
  var ImplElim = (function () {
      function ImplElim() {

      };
      ImplElim.value = new ImplElim();
      return ImplElim;
  })();
  var ImplIntro = (function () {
      function ImplIntro() {

      };
      ImplIntro.value = new ImplIntro();
      return ImplIntro;
  })();
  var NegElim = (function () {
      function NegElim() {

      };
      NegElim.value = new NegElim();
      return NegElim;
  })();
  var NegIntro = (function () {
      function NegIntro() {

      };
      NegIntro.value = new NegIntro();
      return NegIntro;
  })();
  var BottomElim = (function () {
      function BottomElim() {

      };
      BottomElim.value = new BottomElim();
      return BottomElim;
  })();
  var DoubleNegElim = (function () {
      function DoubleNegElim() {

      };
      DoubleNegElim.value = new DoubleNegElim();
      return DoubleNegElim;
  })();
  var ModusTollens = (function () {
      function ModusTollens() {

      };
      ModusTollens.value = new ModusTollens();
      return ModusTollens;
  })();
  var DoubleNegIntro = (function () {
      function DoubleNegIntro() {

      };
      DoubleNegIntro.value = new DoubleNegIntro();
      return DoubleNegIntro;
  })();
  var PBC = (function () {
      function PBC() {

      };
      PBC.value = new PBC();
      return PBC;
  })();
  var LEM = (function () {
      function LEM() {

      };
      LEM.value = new LEM();
      return LEM;
  })();
  var RtCopy = (function () {
      function RtCopy() {

      };
      RtCopy.value = new RtCopy();
      return RtCopy;
  })();
  var showRuleType = new Data_Show.Show(function (r) {
      if (r instanceof RtPremise) {
          return "Premise";
      };
      if (r instanceof RtAssumption) {
          return "Ass.";
      };
      if (r instanceof AndElim1) {
          return "\u2227e1";
      };
      if (r instanceof AndElim2) {
          return "\u2227e2";
      };
      if (r instanceof AndIntro) {
          return "\u2227i";
      };
      if (r instanceof OrElim) {
          return "\u2228e";
      };
      if (r instanceof OrIntro1) {
          return "\u2228i1";
      };
      if (r instanceof OrIntro2) {
          return "\u2228i2";
      };
      if (r instanceof ImplElim) {
          return "\u2192e";
      };
      if (r instanceof ImplIntro) {
          return "\u2192i";
      };
      if (r instanceof NegElim) {
          return "\xace";
      };
      if (r instanceof NegIntro) {
          return "\xaci";
      };
      if (r instanceof BottomElim) {
          return "\u22a5e";
      };
      if (r instanceof DoubleNegElim) {
          return "\xac\xace";
      };
      if (r instanceof ModusTollens) {
          return "MT";
      };
      if (r instanceof DoubleNegIntro) {
          return "\xac\xaci";
      };
      if (r instanceof PBC) {
          return "PBC";
      };
      if (r instanceof LEM) {
          return "LEM";
      };
      if (r instanceof RtCopy) {
          return "Copy";
      };
      throw new Error("Failed pattern match at GUI.Rules (line 28, column 12 - line 47, column 21): " + [ r.constructor.name ]);
  });
  var rules = [ RtPremise.value, RtAssumption.value, AndElim1.value, AndElim2.value, AndIntro.value, OrElim.value, OrIntro1.value, OrIntro2.value, ImplElim.value, ImplIntro.value, NegElim.value, NegIntro.value, BottomElim.value, DoubleNegElim.value, ModusTollens.value, DoubleNegIntro.value, PBC.value, LEM.value, RtCopy.value ];
  exports["RtPremise"] = RtPremise;
  exports["RtAssumption"] = RtAssumption;
  exports["AndElim1"] = AndElim1;
  exports["AndElim2"] = AndElim2;
  exports["AndIntro"] = AndIntro;
  exports["OrElim"] = OrElim;
  exports["OrIntro1"] = OrIntro1;
  exports["OrIntro2"] = OrIntro2;
  exports["ImplElim"] = ImplElim;
  exports["ImplIntro"] = ImplIntro;
  exports["NegElim"] = NegElim;
  exports["NegIntro"] = NegIntro;
  exports["BottomElim"] = BottomElim;
  exports["DoubleNegElim"] = DoubleNegElim;
  exports["ModusTollens"] = ModusTollens;
  exports["DoubleNegIntro"] = DoubleNegIntro;
  exports["PBC"] = PBC;
  exports["LEM"] = LEM;
  exports["RtCopy"] = RtCopy;
  exports["rules"] = rules;
  exports["showRuleType"] = showRuleType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.Utils"] = $PS["GUI.Utils"] || {};
  var exports = $PS["GUI.Utils"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var makeRegex = function (s) {
      return Data_Either["fromRight'"](function (v) {
          return Partial_Unsafe.unsafeCrashWith("Bad regex");
      })(Data_String_Regex.regex(s)(Data_String_Regex_Flags.global));
  };
  exports["makeRegex"] = makeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Data.OrdBox"] = $PS["Halogen.Data.OrdBox"] || {};
  var exports = $PS["Halogen.Data.OrdBox"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];                
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Data.Slot"] = $PS["Halogen.Data.Slot"] || {};
  var exports = $PS["Halogen.Data.Slot"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_Data_OrdBox = $PS["Halogen.Data.OrdBox"];
  var pop = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var lookup = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var insert = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (val) {
                          return function (v) {
                              return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                          };
                      };
                  };
              };
          };
      };
  };
  var foreachSlot = function (dictApplicative) {
      return function (v) {
          return function (k) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                  return k($37);
              })(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["pop"] = pop;
  exports["foreachSlot"] = foreachSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Query.ChildQuery"] = $PS["Halogen.Query.ChildQuery"] || {};
  var exports = $PS["Halogen.Query.ChildQuery"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ChildQuery = (function () {
      function ChildQuery(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ChildQuery.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ChildQuery(value0, value1, value2);
              };
          };
      };
      return ChildQuery;
  })();
  var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  exports["ChildQuery"] = ChildQuery;
  exports["mkChildQueryBox"] = mkChildQueryBox;
  exports["unChildQueryBox"] = unChildQueryBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Query.HalogenM"] = $PS["Halogen.Query.HalogenM"] || {};
  var exports = $PS["Halogen.Query.HalogenM"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];        
  var SubscriptionId = function (x) {
      return x;
  };
  var ForkId = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Unsubscribe = (function () {
      function Unsubscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unsubscribe.create = function (value0) {
          return function (value1) {
              return new Unsubscribe(value0, value1);
          };
      };
      return Unsubscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0) {
          this.value0 = value0;
      };
      ChildQuery.create = function (value0) {
          return new ChildQuery(value0);
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fork.create = function (value0) {
          return function (value1) {
              return new Fork(value0, value1);
          };
      };
      return Fork;
  })();
  var Kill = (function () {
      function Kill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Kill.create = function (value0) {
          return function (value1) {
              return new Kill(value0, value1);
          };
      };
      return Kill;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var HalogenM = function (x) {
      return x;
  };
  var raise = function (o) {
      return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
  };
  var query = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (q) {
                          return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                              return function (k) {
                                  var $132 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                                  var $133 = Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p);
                                  return function ($134) {
                                      return $132($133($134));
                                  };
                              };
                          }, q, Control_Category.identity(Control_Category.categoryFn))))));
                      };
                  };
              };
          };
      };
  };
  var ordSubscriptionId = Data_Ord.ordInt;
  var ordForkId = Data_Ord.ordInt;
  var monadHalogenM = Control_Monad_Free.freeMonad;
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($136) {
      return HalogenM(Control_Monad_Free.liftF(State.create($136)));
  });
  var monadEffectHalogenM = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadHalogenM;
      }, (function () {
          var $141 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($142) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($141($142))));
          };
      })());
  };
  var getRef = function (p) {
      return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.identity(Control_Category.categoryFn))));
  };
  var functorHalogenM = Control_Monad_Free.freeFunctor;
  var bindHalogenM = Control_Monad_Free.freeBind;           
  var applicativeHalogenM = Control_Monad_Free.freeApplicative;
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Unsubscribe"] = Unsubscribe;
  exports["Lift"] = Lift;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["Kill"] = Kill;
  exports["GetRef"] = GetRef;
  exports["raise"] = raise;
  exports["query"] = query;
  exports["SubscriptionId"] = SubscriptionId;
  exports["ForkId"] = ForkId;
  exports["getRef"] = getRef;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadEffectHalogenM"] = monadEffectHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
  exports["ordSubscriptionId"] = ordSubscriptionId;
  exports["ordForkId"] = ordForkId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Query.HalogenQ"] = $PS["Halogen.Query.HalogenQ"] || {};
  var exports = $PS["Halogen.Query.HalogenQ"];           
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize(value0) {
          this.value0 = value0;
      };
      Finalize.create = function (value0) {
          return new Finalize(value0);
      };
      return Finalize;
  })();
  var Receive = (function () {
      function Receive(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Receive.create = function (value0) {
          return function (value1) {
              return new Receive(value0, value1);
          };
      };
      return Receive;
  })();
  var Action = (function () {
      function Action(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Action.create = function (value0) {
          return function (value1) {
              return new Action(value0, value1);
          };
      };
      return Action;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  exports["Initialize"] = Initialize;
  exports["Finalize"] = Finalize;
  exports["Receive"] = Receive;
  exports["Action"] = Action;
  exports["Query"] = Query;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Component"] = $PS["Halogen.Component"] || {};
  var exports = $PS["Halogen.Component"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ComponentSlot = (function () {
      function ComponentSlot(value0) {
          this.value0 = value0;
      };
      ComponentSlot.create = function (value0) {
          return new ComponentSlot(value0);
      };
      return ComponentSlot;
  })();
  var ThunkSlot = (function () {
      function ThunkSlot(value0) {
          this.value0 = value0;
      };
      ThunkSlot.create = function (value0) {
          return new ThunkSlot(value0);
      };
      return ThunkSlot;
  })();
  var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkEval = function (args) {
      return function (v) {
          if (v instanceof Halogen_Query_HalogenQ.Initialize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Finalize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Receive) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Action) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Query) {
              return Data_Coyoneda.unCoyoneda(function (g) {
                  var $25 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                  return function ($26) {
                      return $25(args.handleQuery($26));
                  };
              })(v.value0);
          };
          throw new Error("Failed pattern match at Halogen.Component (line 182, column 15 - line 192, column 70): " + [ v.constructor.name ]);
      };
  };
  var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var defaultEval = {
      handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
      handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
      receive: Data_Function["const"](Data_Maybe.Nothing.value),
      initialize: Data_Maybe.Nothing.value,
      finalize: Data_Maybe.Nothing.value
  };
  var componentSlot = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (comp) {
                          return function (input) {
                              return function (output) {
                                  return mkComponentSlot({
                                      get: Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p),
                                      pop: Halogen_Data_Slot.pop()(dictIsSymbol)(dictOrd)(label)(p),
                                      set: Halogen_Data_Slot.insert()(dictIsSymbol)(dictOrd)(label)(p),
                                      component: comp,
                                      input: input,
                                      output: output
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["mkEval"] = mkEval;
  exports["defaultEval"] = defaultEval;
  exports["ComponentSlot"] = ComponentSlot;
  exports["ThunkSlot"] = ThunkSlot;
  exports["componentSlot"] = componentSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.Machine"] = $PS["Halogen.VDom.Machine"] || {};
  var exports = $PS["Halogen.VDom.Machine"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Step = (function () {
      function Step(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Step(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Step;
  })();
  var unStep = Unsafe_Coerce.unsafeCoerce;
  var step = function (v, a) {
      return v.value2(v.value1, a);
  };
  var mkStep = Unsafe_Coerce.unsafeCoerce;
  var halt = function (v) {
      return v.value3(v.value1);
  };
  var extract = unStep(function (v) {
      return v.value0;
  });
  exports["Step"] = Step;
  exports["mkStep"] = mkStep;
  exports["unStep"] = unStep;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
      obj[key] = val;
  };

  exports.forE = function (a, f) {
    var b = [];
    for (var i = 0; i < a.length; i++) {
      b.push(f(i, a[i]));
    }
    return b;
  };

  exports.forEachE = function (a, f) {
    for (var i = 0; i < a.length; i++) {
      f(a[i]);
    }
  };

  exports.forInE = function (o, f) {
    var ks = Object.keys(o);
    for (var i = 0; i < ks.length; i++) {
      var k = ks[i];
      f(k, o[k]);
    }
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    var a3 = [];
    var l1 = a1.length;
    var l2 = a2.length;
    var i  = 0;
    while (1) {
      if (i < l1) {
        if (i < l2) {
          a3.push(f1(i, a1[i], a2[i]));
        } else {
          f2(i, a1[i]);
        }
      } else if (i < l2) {
        a3.push(f3(i, a2[i]));
      } else {
        break;
      }
      i++;
    }
    return a3;
  };

  exports.strMapWithIxE = function (as, fk, f) {
    var o = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      o[k] = f(k, i, a);
    }
    return o;
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    var o2 = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      if (o1.hasOwnProperty(k)) {
        o2[k] = f1(k, i, o1[k], a);
      } else {
        o2[k] = f3(k, i, a);
      }
    }
    for (var k in o1) {
      if (k in o2) {
        continue;
      }
      f2(k, o1[k]);
    }
    return o2;
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return doc.createTextNode(s);
  };

  exports.setTextContent = function (s, n) {
    n.textContent = s;
  };

  exports.createElement = function (ns, name, doc) {
    if (ns != null) {
      return doc.createElementNS(ns, name);
    } else {
      return doc.createElement(name)
    }
  };

  exports.insertChildIx = function (i, a, b) {
    var n = b.childNodes.item(i) || null;
    if (n !== a) {
      b.insertBefore(a, n);
    }
  };

  exports.removeChild = function (a, b) {
    if (b && a.parentNode === b) {
      b.removeChild(a);
    }
  };

  exports.parentNode = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    if (ns != null) {
      el.setAttributeNS(ns, attr, val);
    } else {
      el.setAttribute(attr, val);
    }
  };

  exports.removeAttribute = function (ns, attr, el) {
    if (ns != null) {
      el.removeAttributeNS(ns, attr);
    } else {
      el.removeAttribute(attr);
    }
  };

  exports.hasAttribute = function (ns, attr, el) {
    if (ns != null) {
      return el.hasAttributeNS(ns, attr);
    } else {
      return el.hasAttribute(attr);
    }
  };

  exports.addEventListener = function (ev, listener, el) {
    el.addEventListener(ev, listener, false);
  };

  exports.removeEventListener = function (ev, listener, el) {
    el.removeEventListener(ev, listener, false);
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.Util"] = $PS["Halogen.VDom.Util"] || {};
  var exports = $PS["Halogen.VDom.Util"];
  var $foreign = $PS["Halogen.VDom.Util"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Foreign_Object_ST["new"];
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forEachE"] = $foreign.forEachE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["parentNode"] = $foreign.parentNode;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["hasAttribute"] = $foreign.hasAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.DOM.Prop"] = $PS["Halogen.VDom.DOM.Prop"] || {};
  var exports = $PS["Halogen.VDom.DOM.Prop"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);
      if (v) {
          return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
      };
      var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v1 === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return emit(v.value0)();
              };
              return Data_Unit.unit;
          };
          var haltProp = function (state) {
              var v = Foreign_Object.lookup("ref")(state.props);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Data_Unit.unit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var $56 = v11.value2 === v2.value2;
                      if ($56) {
                          return v2;
                      };
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return v2;
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if ($65) {
                              return v2;
                          };
                          setProperty(v2.value0, v2.value1, el);
                          return v2;
                      };
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                      return v2;
                  };
                  return v2;
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v2 instanceof Property) {
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                          return v2;
                      };
                      var ref = Effect_Ref["new"](v2.value1)();
                      var listener = Web_Event_EventTarget.eventListener(function (ev) {
                          return function __do() {
                              var f$prime = Effect_Ref.read(ref)();
                              return mbEmit(f$prime(ev));
                          };
                      })();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
                      Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
                      return v2;
                  };
                  if (v2 instanceof Ref) {
                      mbEmit(v2.value0(new Created(el)));
                      return v2;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
              };
          };
          var patchProp = function (state, ps2) {
              var events = Halogen_VDom_Util.newMutMap();
              var onThis = removeProp(state.events);
              var onThese = diffProp(state.events, events);
              var onThat = applyProp(events);
              var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
              var nextState = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: props
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
          };
          var renderProp = function (ps1) {
              var events = Halogen_VDom_Util.newMutMap();
              var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
              var state = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: ps1$prime
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
          };
          return renderProp;
      };
  };
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["Ref"] = Ref;
  exports["Created"] = Created;
  exports["Removed"] = Removed;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["buildProp"] = buildProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.Types"] = $PS["Halogen.VDom.Types"] || {};
  var exports = $PS["Halogen.VDom.Types"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Elem(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Keyed(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($52) {
          return f($52);
      };
  }; 
  var graft = Unsafe_Coerce.unsafeCoerce;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($54) {
                  return f(v.value0($54));
              }, function ($55) {
                  return g(v.value1($55));
              }, v.value2));
          });
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["runGraft"] = runGraft;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.HTML.Core"] = $PS["Halogen.HTML.Core"] || {};
  var exports = $PS["Halogen.HTML.Core"];
  var DOM_HTML_Indexed_ButtonType = $PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];          
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  };
  var HTML = function (x) {
      return x;
  };
  var widget = function ($18) {
      return HTML(Halogen_VDom_Types.Widget.create($18));
  };
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($19) {
      return HTML(Halogen_VDom_Types.Text.create($19));
  };
  var ref = function (f) {
      return Halogen_VDom_DOM_Prop.Ref.create(function ($20) {
          return f((function (v) {
              if (v instanceof Halogen_VDom_DOM_Prop.Created) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Halogen.HTML.Core (line 103, column 21 - line 105, column 23): " + [ v.constructor.name ]);
          })($20));
      });
  };
  var prop = function (dictIsProp) {
      return function (v) {
          var $21 = Halogen_VDom_DOM_Prop.Property.create(v);
          var $22 = toPropValue(dictIsProp);
          return function ($23) {
              return $21($22($23));
          };
      };
  }; 
  var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var isPropInputType = new IsProp(function ($37) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($37));
  });
  var isPropButtonType = new IsProp(function ($42) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($42));
  });
  var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(ns, name, props, children);
              };
          };
      };
  };
  exports["widget"] = widget;
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["handler"] = handler;
  exports["ref"] = ref;
  exports["isPropString"] = isPropString;
  exports["isPropBoolean"] = isPropBoolean;
  exports["isPropButtonType"] = isPropButtonType;
  exports["isPropInputType"] = isPropInputType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.HTML.Elements"] = $PS["Halogen.HTML.Elements"] || {};
  var exports = $PS["Halogen.HTML.Elements"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var h4 = element("h4");
  var input = function (props) {
      return element("input")(props)([  ]);
  };                         
  var p = element("p");
  var p_ = p([  ]);          
  var section = element("section");
  var section_ = section([  ]);
  var span = element("span");
  var div = element("div");
  var button = element("button");
  var br = function (props) {
      return element("br")(props)([  ]);
  };
  var br_ = br([  ]);
  exports["br_"] = br_;
  exports["button"] = button;
  exports["div"] = div;
  exports["h4"] = h4;
  exports["input"] = input;
  exports["p"] = p;
  exports["p_"] = p_;
  exports["section"] = section;
  exports["section_"] = section_;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Query.Input"] = $PS["Halogen.Query.Input"] || {};
  var exports = $PS["Halogen.Query.Input"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return new RefUpdate(value0, value1);
          };
      };
      return RefUpdate;
  })();
  var Action = (function () {
      function Action(value0) {
          this.value0 = value0;
      };
      Action.create = function (value0) {
          return new Action(value0);
      };
      return Action;
  })();
  exports["RefUpdate"] = RefUpdate;
  exports["Action"] = Action;
})(PS);
(function(exports) {
  "use strict";

  exports._currentTarget = function (e) {
    return e.currentTarget;
  };

  exports._target = function (e) {
    return e.target;
  };

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };                                 
  var currentTarget = function ($5) {
      return Data_Nullable.toMaybe($foreign["_currentTarget"]($5));
  };
  exports["target"] = target;
  exports["currentTarget"] = currentTarget;
  exports["preventDefault"] = $foreign.preventDefault;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DragEvent.EventTypes"] = $PS["Web.HTML.Event.DragEvent.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.DragEvent.EventTypes"];
  var drop = "drop";
  var dragstart = "dragstart";
  var dragover = "dragover";
  var dragleave = "dragleave";
  var dragenter = "dragenter";
  var dragend = "dragend";
  exports["dragstart"] = dragstart;
  exports["dragenter"] = dragenter;
  exports["dragleave"] = dragleave;
  exports["dragover"] = dragover;
  exports["drop"] = drop;
  exports["dragend"] = dragend;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var input = "input";
  var domcontentloaded = "DOMContentLoaded";
  exports["domcontentloaded"] = domcontentloaded;
  exports["input"] = input;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent.EventTypes"] = $PS["Web.UIEvent.KeyboardEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var keydown = "keydown";
  exports["keydown"] = keydown;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var click = "click";
  exports["click"] = click;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.HTML.Events"] = $PS["Halogen.HTML.Events"] || {};
  var exports = $PS["Halogen.HTML.Events"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_Event_DragEvent_EventTypes = $PS["Web.HTML.Event.DragEvent.EventTypes"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_UIEvent_KeyboardEvent_EventTypes = $PS["Web.UIEvent.KeyboardEvent.EventTypes"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var keyHandler = Unsafe_Coerce.unsafeCoerce;
  var handler$prime = function (et) {
      return function (f) {
          return Halogen_HTML_Core.handler(et)(function (ev) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create)(f(ev));
          });
      };
  };
  var handler = function (et) {
      return function (f) {
          return Halogen_HTML_Core.handler(et)(function (ev) {
              return new Data_Maybe.Just(new Halogen_Query_Input.Action(f(ev)));
          });
      };
  };                                                       
  var onClick = (function () {
      var $1 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
      return function ($2) {
          return $1(mouseHandler($2));
      };
  })();                                                      
  var onKeyDown = (function () {
      var $9 = handler(Web_UIEvent_KeyboardEvent_EventTypes.keydown);
      return function ($10) {
          return $9(keyHandler($10));
      };
  })();
  var dragHandler = Unsafe_Coerce.unsafeCoerce;
  var onDragEnd = (function () {
      var $51 = handler(Web_HTML_Event_DragEvent_EventTypes.dragend);
      return function ($52) {
          return $51(dragHandler($52));
      };
  })();
  var onDragEnter = (function () {
      var $53 = handler(Web_HTML_Event_DragEvent_EventTypes.dragenter);
      return function ($54) {
          return $53(dragHandler($54));
      };
  })();
  var onDragLeave = (function () {
      var $57 = handler(Web_HTML_Event_DragEvent_EventTypes.dragleave);
      return function ($58) {
          return $57(dragHandler($58));
      };
  })();
  var onDragOver = (function () {
      var $59 = handler(Web_HTML_Event_DragEvent_EventTypes.dragover);
      return function ($60) {
          return $59(dragHandler($60));
      };
  })();
  var onDragStart = (function () {
      var $61 = handler(Web_HTML_Event_DragEvent_EventTypes.dragstart);
      return function ($62) {
          return $61(dragHandler($62));
      };
  })();
  var onDrop = (function () {
      var $63 = handler(Web_HTML_Event_DragEvent_EventTypes.drop);
      return function ($64) {
          return $63(dragHandler($64));
      };
  })();
  var addForeignPropHandler = function (key) {
      return function (prop) {
          return function (reader) {
              return function (f) {
                  var go = function (a) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(Data_Identity.monadIdentity)(prop))(Foreign.unsafeToForeign(a));
                  };
                  return handler$prime(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
                      return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function ($71) {
                          return Data_Maybe.Just.create(f($71));
                      })(Control_Monad_Except.runExcept(go(e)));
                  }));
              };
          };
      };
  };                                                                                                                                    
  var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString(Data_Identity.monadIdentity));
  exports["onClick"] = onClick;
  exports["onKeyDown"] = onKeyDown;
  exports["onDragEnd"] = onDragEnd;
  exports["onDragEnter"] = onDragEnter;
  exports["onDragLeave"] = onDragLeave;
  exports["onDragOver"] = onDragOver;
  exports["onDragStart"] = onDragStart;
  exports["onDrop"] = onDrop;
  exports["onValueInput"] = onValueInput;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.HTML.Properties"] = $PS["Halogen.HTML.Properties"] || {};
  var exports = $PS["Halogen.HTML.Properties"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var ref = (function () {
      var go = function (p) {
          return function (mel) {
              return new Data_Maybe.Just(new Halogen_Query_Input.RefUpdate(p, mel));
          };
      };
      return function ($9) {
          return Halogen_HTML_Core.ref(go($9));
      };
  })();
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                          
  var title = prop(Halogen_HTML_Core.isPropString)("title");
  var type_ = function (dictIsProp) {
      return prop(dictIsProp)("type");
  };
  var value = prop(Halogen_HTML_Core.isPropString)("value");  
  var placeholder = prop(Halogen_HTML_Core.isPropString)("placeholder");
  var draggable = prop(Halogen_HTML_Core.isPropBoolean)("draggable");
  var classes = (function () {
      var $12 = prop(Halogen_HTML_Core.isPropString)("className");
      var $13 = Data_String_Common.joinWith(" ");
      var $14 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
      return function ($15) {
          return $12($13($14($15)));
      };
  })();
  var class_ = (function () {
      var $16 = prop(Halogen_HTML_Core.isPropString)("className");
      var $17 = Data_Newtype.unwrap();
      return function ($18) {
          return $16($17($18));
      };
  })();
  exports["ref"] = ref;
  exports["class_"] = class_;
  exports["classes"] = classes;
  exports["title"] = title;
  exports["type_"] = type_;
  exports["value"] = value;
  exports["placeholder"] = placeholder;
  exports["draggable"] = draggable;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  exports.focus = function (elt) {
    return function () {
      return elt.focus();
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toNode"] = toNode;
  exports["focus"] = $foreign.focus;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Query"] = $PS["Halogen.Query"] || {};
  var exports = $PS["Halogen.Query"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var tell = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (slot) {
                  return function (label) {
                      return function (req) {
                          return Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Halogen_Query_HalogenM.query()(dictIsSymbol)(dictOrd)(slot)(label)(req(Data_Unit.unit)));
                      };
                  };
              };
          };
      };
  };
  var getHTMLElementRef = (function () {
      var $13 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (v) {
          return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(v);
      });
      return function ($14) {
          return $13(Halogen_Query_HalogenM.getRef($14));
      };
  })();
  exports["tell"] = tell;
  exports["getHTMLElementRef"] = getHTMLElementRef;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionStart = function (input) {
    return function () {
      return input.selectionStart;
    };
  };

  exports.setSelectionStart = function (selectionStart) {
    return function (input) {
      return function () {
        input.selectionStart = selectionStart;
      };
    };
  };

  exports.setSelectionEnd = function (selectionEnd) {
    return function (input) {
      return function () {
        input.selectionEnd = selectionEnd;
      };
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;                           
  var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromHTMLElement"] = fromHTMLElement;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
  exports["value"] = $foreign.value;
  exports["selectionStart"] = $foreign.selectionStart;
  exports["setSelectionStart"] = $foreign.setSelectionStart;
  exports["setSelectionEnd"] = $foreign.setSelectionEnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.SymbolInput"] = $PS["GUI.SymbolInput"] || {};
  var exports = $PS["GUI.SymbolInput"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var GUI_Utils = $PS["GUI.Utils"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query = $PS["Halogen.Query"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var Focus = (function () {
      function Focus(value0) {
          this.value0 = value0;
      };
      Focus.create = function (value0) {
          return new Focus(value0);
      };
      return Focus;
  })();
  var OnInput = (function () {
      function OnInput(value0) {
          this.value0 = value0;
      };
      OnInput.create = function (value0) {
          return new OnInput(value0);
      };
      return OnInput;
  })();
  var Receive = (function () {
      function Receive(value0) {
          this.value0 = value0;
      };
      Receive.create = function (value0) {
          return new Receive(value0);
      };
      return Receive;
  })();
  var substitute = (function () {
      var ss = [ new Data_Tuple.Tuple("an", "\u2227"), new Data_Tuple.Tuple("or", "\u2228"), new Data_Tuple.Tuple("->", "\u2192"), new Data_Tuple.Tuple("no", "\xac"), new Data_Tuple.Tuple("f[ao]", "\u2200"), new Data_Tuple.Tuple("ex|te", "\u2203"), new Data_Tuple.Tuple("bo", "\u22a5") ];
      return Data_Array.foldl(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return Data_String_Regex.replace(GUI_Utils.makeRegex(v.value0))(v.value1);
      })(ss));
  })();
  var ref = "inputRef";
  var symbolInput = function (dictMonadEffect) {
      return function (placeholder) {
          var setStr = function (s$prime) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                  var cursor$prime = (v.cursor + Data_String_CodePoints.length(s$prime) | 0) - Data_String_CodePoints.length(v.s) | 0;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                      var $15 = {};
                      for (var $16 in v1) {
                          if ({}.hasOwnProperty.call(v1, $16)) {
                              $15[$16] = v1[$16];
                          };
                      };
                      $15.s = s$prime;
                      $15.cursor = cursor$prime;
                      return $15;
                  }))(function () {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(ref))(function (el) {
                          var v1 = Control_Bind.bind(Data_Maybe.bindMaybe)(el)(Web_HTML_HTMLInputElement.fromHTMLElement);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(function __do() {
                                  Web_HTML_HTMLInputElement.setSelectionStart(cursor$prime)(v1.value0)();
                                  return Web_HTML_HTMLInputElement.setSelectionEnd(cursor$prime)(v1.value0)();
                              });
                          };
                          return Partial_Unsafe.unsafeCrashWith("not yet rendered");
                      });
                  });
              });
          };
          var render = function (st) {
              return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.value(st.s), Halogen_HTML_Properties.placeholder(placeholder), Halogen_HTML_Properties.classes([ "input", "is-primary" ]), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.ref(ref), Halogen_HTML_Events.onValueInput(OnInput.create) ]);
          };
          var initialState = function (s) {
              return {
                  s: s,
                  cursor: Data_String_CodePoints.length(s)
              };
          };
          var handleQuery = function (v) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(ref))(function (el) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                      var v1 = Control_Bind.bind(Data_Maybe.bindMaybe)(el)(Web_HTML_HTMLInputElement.fromHTMLElement);
                      if (v1 instanceof Data_Maybe.Just) {
                          return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_HTMLElement.focus(Web_HTML_HTMLInputElement.toHTMLElement(v1.value0)));
                      };
                      return Partial_Unsafe.unsafeCrashWith("not yet rendered");
                  })())(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0));
                  });
              });
          };
          var handleAction = function (v) {
              if (v instanceof OnInput) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(ref))(function (el) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                          var v1 = Control_Bind.bind(Data_Maybe.bindMaybe)(el)(Web_HTML_HTMLInputElement.fromHTMLElement);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_HTMLInputElement.selectionStart(v1.value0)))(function (selectionStart) {
                                  return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                      var $28 = {};
                                      for (var $29 in v2) {
                                          if ({}.hasOwnProperty.call(v2, $29)) {
                                              $28[$29] = v2[$29];
                                          };
                                      };
                                      $28.s = v.value0;
                                      $28.cursor = selectionStart;
                                      return $28;
                                  });
                              });
                          };
                          return Partial_Unsafe.unsafeCrashWith("not yet rendered");
                      })())(function () {
                          var s$prime = substitute(v.value0);
                          return Halogen_Query_HalogenM.raise(s$prime);
                      });
                  });
              };
              if (v instanceof Receive) {
                  return setStr(v.value0);
              };
              throw new Error("Failed pattern match at GUI.SymbolInput (line 95, column 18 - line 106, column 28): " + [ v.constructor.name ]);
          };
          return Halogen_Component.mkComponent({
              initialState: initialState,
              render: render,
              "eval": Halogen_Component.mkEval({
                  handleAction: handleAction,
                  handleQuery: handleQuery,
                  receive: function ($34) {
                      return Data_Maybe.Just.create(Receive.create($34));
                  },
                  initialize: Halogen_Component.defaultEval.initialize,
                  finalize: Halogen_Component.defaultEval.finalize
              })
          });
      };
  };
  exports["Focus"] = Focus;
  exports["symbolInput"] = symbolInput;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.HTML"] = $PS["Halogen.HTML"] || {};
  var exports = $PS["Halogen.HTML"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];        
  var slot_ = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (component) {
                          return function (input) {
                              return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot()(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(Data_Function["const"](Data_Maybe.Nothing.value))));
                          };
                      };
                  };
              };
          };
      };
  };
  var slot = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (component) {
                          return function (input) {
                              return function (outputQuery) {
                                  return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot()(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(function ($6) {
                                      return Data_Maybe.Just.create(outputQuery($6));
                                  })));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["slot"] = slot;
  exports["slot_"] = slot_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Common = $PS["Data.String.Common"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap()(""))(str));
      };
  }; 
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  }; 
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $88 = Data_Newtype.unwrap();
      var $89 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($90) {
          return $88($89($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };   
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((function () {
          var $96 = Data_Newtype.unwrap();
          return function ($97) {
              return Control_Monad_Except_Trans.runExceptT($96(f($97)));
          };
      })());
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (xs) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_NonEmpty["cons'"](a)(as));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                  });
              }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var notFollowedBy = function (dictMonad) {
      return function (p) {
          return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
      };
  };
  var lookAhead = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(s))(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
              });
          })));
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var chainl1$prime = function (dictMonad) {
      return function (p) {
          return function (f) {
              return function (a) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (f$prime) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a$prime) {
                          return chainl1$prime(dictMonad)(p)(f)(f$prime(a)(a$prime));
                      });
                  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
              };
          };
      };
  };
  var chainl1 = function (dictMonad) {
      return function (p) {
          return function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return chainl1$prime(dictMonad)(p)(f)(a);
              });
          };
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  var asErrorMessage = function (dictMonad) {
      return Data_Function.flip(withErrorMessage(dictMonad));
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["asErrorMessage"] = asErrorMessage;
  exports["between"] = between;
  exports["option"] = option;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["lookAhead"] = lookAhead;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["chainl1"] = chainl1;
  exports["choice"] = choice;
  exports["skipMany"] = skipMany;
  exports["skipMany1"] = skipMany1;
  exports["notFollowedBy"] = notFollowedBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser.Expr"] = $PS["Text.Parsing.Parser.Expr"] || {};
  var exports = $PS["Text.Parsing.Parser.Expr"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];                
  var AssocNone = (function () {
      function AssocNone() {

      };
      AssocNone.value = new AssocNone();
      return AssocNone;
  })();
  var AssocLeft = (function () {
      function AssocLeft() {

      };
      AssocLeft.value = new AssocLeft();
      return AssocLeft;
  })();
  var AssocRight = (function () {
      function AssocRight() {

      };
      AssocRight.value = new AssocRight();
      return AssocRight;
  })();
  var Infix = (function () {
      function Infix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Infix.create = function (value0) {
          return function (value1) {
              return new Infix(value0, value1);
          };
      };
      return Infix;
  })();
  var Prefix = (function () {
      function Prefix(value0) {
          this.value0 = value0;
      };
      Prefix.create = function (value0) {
          return new Prefix(value0);
      };
      return Prefix;
  })();
  var Postfix = (function () {
      function Postfix(value0) {
          this.value0 = value0;
      };
      Postfix.create = function (value0) {
          return new Postfix(value0);
      };
      return Postfix;
  })();
  var termP = function (dictMonad) {
      return function (prefixP) {
          return function (term) {
              return function (postfixP) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function (pre) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function (x) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function (post) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(post(pre(x)));
                          });
                      });
                  });
              };
          };
      };
  };
  var splitOp = function (v) {
      return function (accum) {
          if (v instanceof Infix && v.value1 instanceof AssocNone) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: new Data_List_Types.Cons(v.value0, accum.nassoc),
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Infix && v.value1 instanceof AssocLeft) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: new Data_List_Types.Cons(v.value0, accum.lassoc),
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Infix && v.value1 instanceof AssocRight) {
              return {
                  rassoc: new Data_List_Types.Cons(v.value0, accum.rassoc),
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Prefix) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: new Data_List_Types.Cons(v.value0, accum.prefix),
                  postfix: accum.postfix
              };
          };
          if (v instanceof Postfix) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: new Data_List_Types.Cons(v.value0, accum.postfix)
              };
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Expr (line 69, column 1 - line 69, column 80): " + [ v.constructor.name, accum.constructor.name ]);
      };
  };
  var rassocP1 = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var rassocP = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (z) {
                                  return rassocP1(dictMonad)(z)(rassocOp)(prefixP)(term)(postfixP);
                              }))(function (y) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var nassocP = function (dictMonad) {
      return function (x) {
          return function (nassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (y) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var lassocP1 = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var lassocP = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (y) {
                                  return lassocP1(dictMonad)(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var makeParser = function (dictMonad) {
      return function (term) {
          return function (ops) {
              var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                  rassoc: Data_List_Types.Nil.value,
                  lassoc: Data_List_Types.Nil.value,
                  nassoc: Data_List_Types.Nil.value,
                  prefix: Data_List_Types.Nil.value,
                  postfix: Data_List_Types.Nil.value
              })(ops);
              var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.lassoc);
              var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.nassoc);
              var postfixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.postfix))("");
              var postfixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
              var prefixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.prefix))("");
              var prefixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
              var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.rassoc);
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (x) {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(x)(nassocOp)(prefixP)(term)(postfixP)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x)))("operator");
              });
          };
      };
  };
  var buildExprParser = function (dictMonad) {
      return function (operators) {
          return function (simpleExpr) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
          };
      };
  };
  exports["AssocLeft"] = AssocLeft;
  exports["AssocRight"] = AssocRight;
  exports["Infix"] = Infix;
  exports["Prefix"] = Prefix;
  exports["buildExprParser"] = buildExprParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, $$null, stripPrefix, uncons) {
      this.drop = drop;
      this["null"] = $$null;
      this.stripPrefix = stripPrefix;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stripPrefix = function (dict) {
      return dict.stripPrefix;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_Common["null"], Data_String_CodeUnits.stripPrefix, Data_String_CodeUnits.uncons);
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (input) {
                  var v = stripPrefix(dictStringLike)(Data_Newtype.wrap()(str))(input);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(v.value0, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var $$null = function (dict) {
      return dict["null"];
  };
  var eof = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
          });
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
                  var $52 = f(c);
                  if ($52) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["eof"] = eof;
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
  exports["noneOf"] = noneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
  var exports = $PS["Text.Parsing.Parser.Token"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unicode = $PS["Data.String.Unicode"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var $$Math = $PS["Math"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var theReservedNames = function (dictMonad) {
      return function (v) {
          if (v.caseSensitive) {
              return Data_Array.sort(Data_Ord.ordString)(v.reservedNames);
          };
          if (Data_Boolean.otherwise) {
              return Data_Array.sort(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.toLower)(v.reservedNames));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 728, column 1 - line 728, column 82): " + [ v.constructor.name ]);
      };
  };
  var satisfyCP = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function ($117) {
              return p(Data_String_CodePoints.codePointFromChar($117));
          });
      };
  };
  var simpleSpace = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isSpace));
  };
  var space = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isSpace))("space");
  };
  var upper = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isUpper))("uppercase letter");
  };
  var oneLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (v1) {
              return v1 !== "\x0a";
          })));
      };
  };
  var octDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isOctDigit))("oct digit");
  };
  var letter = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isAlpha))("letter");
  };
  var isReserved = function ($copy_names) {
      return function ($copy_name) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, name) {
              var v = Data_Array.uncons(names);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return false;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = Data_Ord.compare(Data_Ord.ordString)(v.value0.head)(name);
                  if (v1 instanceof Data_Ordering.LT) {
                      $tco_var_names = v.value0.tail;
                      $copy_name = name;
                      return;
                  };
                  if (v1 instanceof Data_Ordering.EQ) {
                      $tco_done = true;
                      return true;
                  };
                  if (v1 instanceof Data_Ordering.GT) {
                      $tco_done = true;
                      return false;
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 723, column 39 - line 726, column 53): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 721, column 5 - line 726, column 53): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_name);
          };
          return $tco_result;
      };
  };
  var isReservedName = function (dictMonad) {
      return function (v) {
          return function (name) {
              var caseName = (function () {
                  if (v.caseSensitive) {
                      return name;
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_String_Common.toLower(name);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 716, column 5 - line 717, column 57): " + [  ]);
              })();
              return isReserved(theReservedNames(dictMonad)(v))(caseName);
          };
      };
  };
  var inCommentSingle = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var multiLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
      };
  };
  var inCommentMulti = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var inComment = function (dictMonad) {
      return function (v) {
          if (v.nestedComments) {
              return inCommentMulti(dictMonad)(v);
          };
          return inCommentSingle(dictMonad)(v);
      };
  };
  var whiteSpace$prime = function (dictMonad) {
      return function (v) {
          if (Data_String_Common["null"](v.commentLine) && Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
          };
          if (Data_String_Common["null"](v.commentLine)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
          };
          if (Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
          };
          if (Data_Boolean.otherwise) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 737, column 1 - line 737, column 86): " + [ v.constructor.name ]);
      };
  };
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isHexDigit))("hex digit");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isDecDigit))("digit");
  };
  var makeTokenParser = function (dictMonad) {
      return function (v) {
          var stringLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "\"" && (c !== "\\" && c > "\x1a");
          });
          var sign = function (dictRing) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("+"))(Control_Category.identity(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
          };
          var oper = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
          })();
          var number = function (base) {
              return function (baseDigit) {
                  var folder = function (v1) {
                      return function (v2) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                                  return (base * v1.value0 | 0) + v3 | 0;
                              })(Data_CodePoint_Unicode.hexDigitToInt(Data_String_CodePoints.codePointFromChar(v2)));
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 603, column 9 - line 603, column 49): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(digits));
                  });
              };
          };
          var octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "o", "O" ]))(number(8)(octDigit(dictMonad)));
          var lexeme = function (p) {
              return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
          };
          var reservedOp = function (name) {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(function () {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))("end of " + name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var symbol = function (name) {
              return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name)))(name);
          };
          var parens = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
          };
          var semi = symbol(";");
          var semiSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
          };
          var semiSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
          };
          var isReservedOp = function (name) {
              return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
          };
          var operator = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(function (name) {
                  var $85 = isReservedOp(name);
                  if ($85) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved operator " + name);
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var ident = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identifier");
          })();
          var identifier = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(function (name) {
                  var $86 = isReservedName(dictMonad)(v)(name);
                  if ($86) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved word " + Data_Show.show(Data_Show.showString)(name));
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "x", "X" ]))(number(16)(hexDigit(dictMonad)));
          var fraction = (function () {
              var op = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_CodePoint_Unicode.hexDigitToInt(Data_String_CodePoints.codePointFromChar(v1)))(function (int$prime) {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v2.value0 + Data_Int.toNumber(int$prime)) / 10.0);
                          });
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 553, column 9 - line 553, column 51): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("."))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(digits));
                  });
              }));
          })();
          var escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))("end of string gap");
          var escapeEmpty = Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("&");
          var escMap = Data_Array.zip([ "a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'" ])([ "\x07", "\x08", "\x0c", "\x0a", "\x0d", "\x09", "\x0b", "\\", "\"", "'" ]);
          var dot = symbol(".");
          var decimal = number(10)(digit(dictMonad));
          var exponent$prime = (function () {
              var power = function (e) {
                  if (e < 0) {
                      return 1.0 / power(-e | 0);
                  };
                  if (Data_Boolean.otherwise) {
                      return $$Math.pow(10.0)(Data_Int.toNumber(e));
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 566, column 9 - line 566, column 31): " + [ e.constructor.name ]);
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "e", "E" ]))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(function (f) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(function (e) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(power(f(e)));
                      });
                  });
              }));
          })();
          var fractExponent = function (n) {
              var justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(function (expo) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Int.toNumber(n) * expo);
              });
              var fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(function (fract) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(function (expo) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))((Data_Int.toNumber(n) + fract) * expo);
                  });
              });
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
          };
          var fractFloat = function (n) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Right.create)(fractExponent(n));
          };
          var decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(function (n) {
              return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(n))(fractFloat(n));
          });
          var zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
          var natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(zeroNumFloat))(decimalFloat);
          var naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
          var floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
          var $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
          var zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
          var nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
          var $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(function (n) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(n));
              });
          });
          var integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
          var natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
          var comma = symbol(",");
          var commaSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
          };
          var commaSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
          };
          var colon = symbol(":");
          var charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(function (code) {
              var $91 = code > 1114111;
              if ($91) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
              };
              var v1 = Data_Char.fromCharCode(code);
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 451, column 17 - line 453, column 81): " + [ v1.constructor.name ]);
          });
          var charLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "'" && (c !== "\\" && c > "\x1a");
          });
          var charEsc = (function () {
              var parseEsc = function (v1) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1);
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
          })();
          var charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("^"))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(function (code) {
                  var v1 = Data_Char.fromCharCode((Data_Char.toCharCode(code) - Data_Char.toCharCode("A") | 0) + 1 | 0);
                  if (v1 instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 440, column 9 - line 442, column 73): " + [ v1.constructor.name ]);
              });
          });
          var caseString = function (name) {
              if (v.caseSensitive) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(name);
              };
              if (Data_Boolean.otherwise) {
                  var msg = Data_Show.show(Data_Show.showString)(name);
                  var caseChar = function (c) {
                      var v1 = function (v2) {
                          if (Data_Boolean.otherwise) {
                              return Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c);
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 307, column 1 - line 307, column 92): " + [ c.constructor.name ]);
                      };
                      var $102 = Data_CodePoint_Unicode.isAlpha(Data_String_CodePoints.codePointFromChar(c));
                      if ($102) {
                          var $103 = Data_String_CodeUnits.toChar(Data_String_Unicode.toLowerSimple(Data_String_CodeUnits.singleton(c)));
                          if ($103 instanceof Data_Maybe.Just) {
                              var $104 = Data_String_CodeUnits.toChar(Data_String_Unicode.toUpperSimple(Data_String_CodeUnits.singleton(c)));
                              if ($104 instanceof Data_Maybe.Just) {
                                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)($103.value0))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)($104.value0));
                              };
                              return v1(true);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  var walk = function (name$prime) {
                      var v1 = Data_String_CodeUnits.uncons(name$prime);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 657, column 22 - line 659, column 86): " + [ v1.constructor.name ]);
                  };
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(walk(name))(name);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 652, column 5 - line 652, column 52): " + [ name.constructor.name ]);
          };
          var reserved = function (name) {
              var go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))("end of " + name));
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var brackets = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
          };
          var braces = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
          };
          var ascii3codes = [ "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL" ];
          var ascii3 = [ "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f" ];
          var ascii2codes = [ "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP" ];
          var ascii2 = [ "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " " ];
          var asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
          var charAscii = (function () {
              var parseAscii = function (v1) {
                  return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1));
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
          })();
          var escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
          var charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(escapeCode);
          var characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
          var charLiteral = (function () {
              var go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))("end of character"))(characterChar);
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
          })();
          var stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(function () {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(escapeCode));
          });
          var stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
          var stringLiteral = (function () {
              var folder = function (v1) {
                  return function (chars) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return chars;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v1.value0, chars);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 407, column 9 - line 407, column 55): " + [ v1.constructor.name, chars.constructor.name ]);
                  };
              };
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))("end of string"))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(function (maybeChars) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_List_Types.foldableList)(folder)(Data_List_Types.Nil.value)(maybeChars))));
              });
              return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
          })();
          var angles = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
          };
          return {
              identifier: identifier,
              reserved: reserved,
              operator: operator,
              reservedOp: reservedOp,
              charLiteral: charLiteral,
              stringLiteral: stringLiteral,
              natural: natural,
              integer: integer,
              "float": $$float,
              naturalOrFloat: naturalOrFloat,
              decimal: decimal,
              hexadecimal: hexadecimal,
              octal: octal,
              symbol: symbol,
              lexeme: lexeme,
              whiteSpace: whiteSpace$prime(dictMonad)(v),
              parens: parens,
              braces: braces,
              angles: angles,
              brackets: brackets,
              semi: semi,
              comma: comma,
              colon: colon,
              dot: dot,
              semiSep: semiSep,
              semiSep1: semiSep1,
              commaSep: commaSep,
              commaSep1: commaSep1
          };
      };
  };
  exports["makeTokenParser"] = makeTokenParser;
  exports["upper"] = upper;
  exports["letter"] = letter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Parser"] = $PS["Parser"] || {};
  var exports = $PS["Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Array = $PS["Data.Array"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Formula = $PS["Formula"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Expr = $PS["Text.Parsing.Parser.Expr"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var token = (function () {
      var languageDef = {
          commentStart: "",
          commentEnd: "",
          commentLine: "",
          nestedComments: false,
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\u22a5")),
          identLetter: Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity),
          opStart: Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "\xac", "\u2227", "\u2228", "\u2192", "\u2200", "\u2203" ]),
          opLetter: Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([  ]),
          reservedNames: [  ],
          reservedOpNames: [ "\xac", "\u2227", "\u2228", "\u2192", "\u2200", "\u2203" ],
          caseSensitive: true
      };
      return Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(languageDef);
  })();
  var lower = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function ($1) {
          return Data_CodePoint_Unicode.isLower(Data_String_CodePoints.codePointFromChar($1));
      }))("lowercase letter");
  };
  var variableSymbol = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(lower(Data_Identity.monadIdentity)))(token.identifier);
  var variable = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Formula.Variable)(variableSymbol);
  var argumentList = function (p) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.fromFoldable(Data_List_Types.foldableList))(token.parens(token.commaSep(p)));
  };
  var term = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(variableSymbol)(function (symbol) {
      return Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Formula.Var.create(symbol))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Formula.App.create(symbol))(argumentList(term)));
  });
  var predicate = (function () {
      var predicateSymbol = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(token.symbol("="))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Text_Parsing_Parser_Token.upper(Data_Identity.monadIdentity)))(token.identifier)))(token.symbol("\u22a5"));
      var equality = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(term)(function (x) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(token.symbol("="))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(term)(function (y) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Formula.Predicate("=", [ x, y ]));
              });
          });
      });
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(predicateSymbol)(function (symbol) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)([  ])(argumentList(term)))(function (args) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Formula.Predicate(symbol, args));
          });
      }))(equality);
  })();
  var formula = (function () {
      var forallParser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Formula.Forall.create)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token.reservedOp("\u2200"))(variable));
      var existsParser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Formula.Exists.create)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token.reservedOp("\u2203"))(variable));
      var chained = function (p) {
          return Text_Parsing_Parser_Combinators.chainl1(Data_Identity.monadIdentity)(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)));
      };
      var opTable = [ [ Text_Parsing_Parser_Expr.Prefix.create(chained(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(token.reservedOp("\xac"))(Formula.Not.create), forallParser, existsParser ]))) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(token.reservedOp("\u2227"))(Formula.And.create), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(token.reservedOp("\u2228"))(Formula.Or.create), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(token.reservedOp("\u2192"))(Formula.Implies.create), Text_Parsing_Parser_Expr.AssocRight.value) ] ];
      var allFormulas = function (p) {
          var singleFormula = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(token.parens(p))(predicate);
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(token.whiteSpace)(Text_Parsing_Parser_Expr.buildExprParser(Data_Identity.monadIdentity)(opTable)(singleFormula));
      };
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(allFormulas);
  })();
  var parseFormula = Data_Function.flip(Text_Parsing_Parser.runParser)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(formula)(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)));
  exports["parseFormula"] = parseFormula;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Proof"] = $PS["Proof"] || {};
  var exports = $PS["Proof"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = $PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Formula = $PS["Formula"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var BadRef = (function () {
      function BadRef() {

      };
      BadRef.value = new BadRef();
      return BadRef;
  })();
  var RefDiscarded = (function () {
      function RefDiscarded() {

      };
      RefDiscarded.value = new RefDiscarded();
      return RefDiscarded;
  })();
  var RefOutOfBounds = (function () {
      function RefOutOfBounds() {

      };
      RefOutOfBounds.value = new RefOutOfBounds();
      return RefOutOfBounds;
  })();
  var BadRule = (function () {
      function BadRule() {

      };
      BadRule.value = new BadRule();
      return BadRule;
  })();
  var BadFormula = (function () {
      function BadFormula() {

      };
      BadFormula.value = new BadFormula();
      return BadFormula;
  })();
  var FormulaMismatch = (function () {
      function FormulaMismatch() {

      };
      FormulaMismatch.value = new FormulaMismatch();
      return FormulaMismatch;
  })();
  var InvalidRule = (function () {
      function InvalidRule() {

      };
      InvalidRule.value = new InvalidRule();
      return InvalidRule;
  })();
  var Premise = (function () {
      function Premise() {

      };
      Premise.value = new Premise();
      return Premise;
  })();
  var Assumption = (function () {
      function Assumption() {

      };
      Assumption.value = new Assumption();
      return Assumption;
  })();
  var AndElim1 = (function () {
      function AndElim1(value0) {
          this.value0 = value0;
      };
      AndElim1.create = function (value0) {
          return new AndElim1(value0);
      };
      return AndElim1;
  })();
  var AndElim2 = (function () {
      function AndElim2(value0) {
          this.value0 = value0;
      };
      AndElim2.create = function (value0) {
          return new AndElim2(value0);
      };
      return AndElim2;
  })();
  var AndIntro = (function () {
      function AndIntro(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AndIntro.create = function (value0) {
          return function (value1) {
              return new AndIntro(value0, value1);
          };
      };
      return AndIntro;
  })();
  var OrElim = (function () {
      function OrElim(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrElim.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrElim(value0, value1, value2);
              };
          };
      };
      return OrElim;
  })();
  var OrIntro1 = (function () {
      function OrIntro1(value0) {
          this.value0 = value0;
      };
      OrIntro1.create = function (value0) {
          return new OrIntro1(value0);
      };
      return OrIntro1;
  })();
  var OrIntro2 = (function () {
      function OrIntro2(value0) {
          this.value0 = value0;
      };
      OrIntro2.create = function (value0) {
          return new OrIntro2(value0);
      };
      return OrIntro2;
  })();
  var ImplElim = (function () {
      function ImplElim(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImplElim.create = function (value0) {
          return function (value1) {
              return new ImplElim(value0, value1);
          };
      };
      return ImplElim;
  })();
  var ImplIntro = (function () {
      function ImplIntro(value0) {
          this.value0 = value0;
      };
      ImplIntro.create = function (value0) {
          return new ImplIntro(value0);
      };
      return ImplIntro;
  })();
  var NegElim = (function () {
      function NegElim(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NegElim.create = function (value0) {
          return function (value1) {
              return new NegElim(value0, value1);
          };
      };
      return NegElim;
  })();
  var NegIntro = (function () {
      function NegIntro(value0) {
          this.value0 = value0;
      };
      NegIntro.create = function (value0) {
          return new NegIntro(value0);
      };
      return NegIntro;
  })();
  var BottomElim = (function () {
      function BottomElim(value0) {
          this.value0 = value0;
      };
      BottomElim.create = function (value0) {
          return new BottomElim(value0);
      };
      return BottomElim;
  })();
  var DoubleNegElim = (function () {
      function DoubleNegElim(value0) {
          this.value0 = value0;
      };
      DoubleNegElim.create = function (value0) {
          return new DoubleNegElim(value0);
      };
      return DoubleNegElim;
  })();
  var ModusTollens = (function () {
      function ModusTollens(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ModusTollens.create = function (value0) {
          return function (value1) {
              return new ModusTollens(value0, value1);
          };
      };
      return ModusTollens;
  })();
  var DoubleNegIntro = (function () {
      function DoubleNegIntro(value0) {
          this.value0 = value0;
      };
      DoubleNegIntro.create = function (value0) {
          return new DoubleNegIntro(value0);
      };
      return DoubleNegIntro;
  })();
  var PBC = (function () {
      function PBC(value0) {
          this.value0 = value0;
      };
      PBC.create = function (value0) {
          return new PBC(value0);
      };
      return PBC;
  })();
  var LEM = (function () {
      function LEM() {

      };
      LEM.value = new LEM();
      return LEM;
  })();
  var Copy = (function () {
      function Copy(value0) {
          this.value0 = value0;
      };
      Copy.create = function (value0) {
          return new Copy(value0);
      };
      return Copy;
  })();
  var newScope = function (n) {
      return {
          lines: Data_Set.empty,
          boxes: [  ],
          vars: [  ],
          boxStart: new Data_Maybe.Just(n)
      };
  };
  var monadStateND = Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity);
  var openBox = Control_Monad_State_Class.modify_(monadStateND)(function (proof) {
      var $106 = {};
      for (var $107 in proof) {
          if ({}.hasOwnProperty.call(proof, $107)) {
              $106[$107] = proof[$107];
          };
      };
      $106.scopes = new Data_List_Types.Cons(newScope(Data_Array.length(proof.rows) + 1 | 0), proof.scopes);
      return $106;
  });
  var monadND = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);
  var lineInScope = function (l) {
      return function (ss) {
          return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (s) {
              return Data_Set.member(Data_Ord.ordInt)(l)(s.lines);
          })(ss);
      };
  };
  var innerBoxStart = function (ss) {
      return (function (s) {
          return s.boxStart;
      })(Data_Maybe.fromJust()(Data_List.head(ss)));
  };
  var functorND = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
  var fullScope = {
      lines: Data_Set.empty,
      boxes: [  ],
      vars: [  ],
      boxStart: Data_Maybe.Nothing.value
  };
  var runND = function (conclusion) {
      return function (v) {
          var initialState = {
              rows: [  ],
              scopes: new Data_List_Types.Cons(fullScope, Data_List_Types.Nil.value)
          };
          var checkCompleteness = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Maybe.isJust)(Control_Monad_Maybe_Trans.runMaybeT(Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Maybe_Trans.monadStateMaybeT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Applicative.unless(Control_Monad_Maybe_Trans.applicativeMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.isNothing(innerBoxStart(v1.scopes)))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Applicative.when(Control_Monad_Maybe_Trans.applicativeMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function ($292) {
                      return Data_Maybe.isJust((function (v2) {
                          return v2.error;
                      })($292));
                  })(v1.rows))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)))(function () {
                      return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(v1.rows))(function (v2) {
                          return v2.formula;
                      }))))(function (lastRow) {
                          return Control_Applicative.unless(Control_Monad_Maybe_Trans.applicativeMaybeT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Eq.eq(Data_Maybe.eqMaybe(Formula.eqFormula))(new Data_Maybe.Just(lastRow))(conclusion))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value));
                      });
                  });
              });
          })));
          return Control_Monad_State.runState(Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(v)(checkCompleteness))(initialState);
      };
  };
  var eqRule = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Premise && y instanceof Premise) {
              return true;
          };
          if (x instanceof Assumption && y instanceof Assumption) {
              return true;
          };
          if (x instanceof AndElim1 && y instanceof AndElim1) {
              return x.value0 === y.value0;
          };
          if (x instanceof AndElim2 && y instanceof AndElim2) {
              return x.value0 === y.value0;
          };
          if (x instanceof AndIntro && y instanceof AndIntro) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof OrElim && y instanceof OrElim) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(x.value1)(y.value1) && Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(x.value2)(y.value2);
          };
          if (x instanceof OrIntro1 && y instanceof OrIntro1) {
              return x.value0 === y.value0;
          };
          if (x instanceof OrIntro2 && y instanceof OrIntro2) {
              return x.value0 === y.value0;
          };
          if (x instanceof ImplElim && y instanceof ImplElim) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof ImplIntro && y instanceof ImplIntro) {
              return Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(x.value0)(y.value0);
          };
          if (x instanceof NegElim && y instanceof NegElim) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof NegIntro && y instanceof NegIntro) {
              return Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(x.value0)(y.value0);
          };
          if (x instanceof BottomElim && y instanceof BottomElim) {
              return x.value0 === y.value0;
          };
          if (x instanceof DoubleNegElim && y instanceof DoubleNegElim) {
              return x.value0 === y.value0;
          };
          if (x instanceof ModusTollens && y instanceof ModusTollens) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof DoubleNegIntro && y instanceof DoubleNegIntro) {
              return x.value0 === y.value0;
          };
          if (x instanceof PBC && y instanceof PBC) {
              return Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(x.value0)(y.value0);
          };
          if (x instanceof LEM && y instanceof LEM) {
              return true;
          };
          if (x instanceof Copy && y instanceof Copy) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var isPremise = function (r) {
      return Data_Eq.eq(Data_Maybe.eqMaybe(eqRule))(r.rule)(new Data_Maybe.Just(Premise.value));
  };
  var eqNdError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof BadRef && y instanceof BadRef) {
              return true;
          };
          if (x instanceof RefDiscarded && y instanceof RefDiscarded) {
              return true;
          };
          if (x instanceof RefOutOfBounds && y instanceof RefOutOfBounds) {
              return true;
          };
          if (x instanceof BadRule && y instanceof BadRule) {
              return true;
          };
          if (x instanceof BadFormula && y instanceof BadFormula) {
              return true;
          };
          if (x instanceof FormulaMismatch && y instanceof FormulaMismatch) {
              return true;
          };
          if (x instanceof InvalidRule && y instanceof InvalidRule) {
              return true;
          };
          return false;
      };
  });
  var boxInScope = function (b) {
      return function (ss) {
          return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (s) {
              return Data_Array.elem(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(b)(s.boxes);
          })(ss);
      };
  };
  var bindND = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);  
  var applicativeND = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
  var boxRef = function (v) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(monadStateND)))(function (v1) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(RefOutOfBounds.value)(Data_Array.index(v1.rows)(v.value0 - 1 | 0))))(function (v2) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(RefOutOfBounds.value)(Data_Array.index(v1.rows)(v.value1 - 1 | 0))))(function (v3) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(monadND))(!boxInScope(v)(v1.scopes))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(RefDiscarded.value)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(monadND))(Data_Eq.eq(Data_Maybe.eqMaybe(eqNdError))(v2.error)(new Data_Maybe.Just(BadFormula.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(eqNdError))(v3.error)(new Data_Maybe.Just(BadFormula.value)))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRef.value)))(function () {
                          var maybeBox = (function () {
                              if (v2.formula instanceof Data_Maybe.Just && v3.formula instanceof Data_Maybe.Just) {
                                  return Data_Maybe.Just.create(new Data_Tuple.Tuple(v2.formula.value0, v3.formula.value0));
                              };
                              return Data_Maybe.Nothing.value;
                          })();
                          return Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(BadRef.value)(maybeBox));
                      });
                  });
              });
          });
      });
  };
  var proofRef = function (i) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(monadStateND)))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(RefOutOfBounds.value)(Data_Array.index(v.rows)(i - 1 | 0))))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(monadND))(!lineInScope(i)(v.scopes))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(RefDiscarded.value)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(monadND))(Data_Eq.eq(Data_Maybe.eqMaybe(eqNdError))(v1.error)(new Data_Maybe.Just(BadFormula.value)))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRef.value)))(function () {
                      return Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(BadRef.value)(v1.formula));
                  });
              });
          });
      });
  };
  var applyRule = function (rule) {
      return function (formula) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(monadStateND)))(function (v) {
              if (rule instanceof Premise) {
                  var $186 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isPremise)(v.rows);
                  if ($186) {
                      return Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(BadFormula.value)(formula));
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
              };
              if (rule instanceof Assumption) {
                  return Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(BadFormula.value)(formula));
              };
              if (rule instanceof AndElim1) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      if (a instanceof Formula.And) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(a.value0);
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof AndElim2) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      if (a instanceof Formula.And) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(a.value1);
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof AndIntro) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value1))(function (b) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(new Formula.And(a, b));
                      });
                  });
              };
              if (rule instanceof OrElim) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(boxRef(rule.value1))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(boxRef(rule.value2))(function (v2) {
                              if (a instanceof Formula.Or) {
                                  var $200 = Data_Eq.eq(Formula.eqFormula)(a.value0)(v1.value0) && (Data_Eq.eq(Formula.eqFormula)(a.value1)(v2.value0) && Data_Eq.eq(Formula.eqFormula)(v1.value1)(v2.value1));
                                  if ($200) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(v1.value1);
                                  };
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                              };
                              return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                          });
                      });
                  });
              };
              if (rule instanceof OrIntro1) {
                  if (formula instanceof Data_Maybe.Just && formula.value0 instanceof Formula.Or) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                          var $211 = Data_Eq.eq(Formula.eqFormula)(a)(formula.value0.value0);
                          if ($211) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(formula.value0);
                          };
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadFormula.value);
                      });
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
              };
              if (rule instanceof OrIntro2) {
                  if (formula instanceof Data_Maybe.Just && formula.value0 instanceof Formula.Or) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                          var $217 = Data_Eq.eq(Formula.eqFormula)(a)(formula.value0.value1);
                          if ($217) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(formula.value0);
                          };
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadFormula.value);
                      });
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
              };
              if (rule instanceof ImplElim) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value1))(function (b) {
                          if (a instanceof Formula.Implies && Data_Eq.eq(Formula.eqFormula)(a.value0)(b)) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(a.value1);
                          };
                          if (b instanceof Formula.Implies && Data_Eq.eq(Formula.eqFormula)(b.value0)(a)) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(b.value1);
                          };
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                      });
                  });
              };
              if (rule instanceof ImplIntro) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(boxRef(rule.value0))(function (v1) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(new Formula.Implies(v1.value0, v1.value1));
                  });
              };
              if (rule instanceof NegElim) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value1))(function (b) {
                          var $234 = Data_Eq.eq(Formula.eqFormula)(a)(new Formula.Not(b)) || Data_Eq.eq(Formula.eqFormula)(new Formula.Not(a))(b);
                          if ($234) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(Formula.bottomProp);
                          };
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                      });
                  });
              };
              if (rule instanceof NegIntro) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(boxRef(rule.value0))(function (v1) {
                      var $238 = Data_Eq.eq(Formula.eqFormula)(v1.value1)(Formula.bottomProp);
                      if ($238) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(new Formula.Not(v1.value0));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof BottomElim) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      var $242 = Data_Eq.eq(Formula.eqFormula)(a)(Formula.bottomProp);
                      if ($242) {
                          return Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(BadFormula.value)(formula));
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof DoubleNegElim) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(proofRef(rule.value0))(function (a) {
                      if (a instanceof Formula.Not && a.value0 instanceof Formula.Not) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(a.value0.value0);
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof ModusTollens) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
              };
              if (rule instanceof DoubleNegIntro) {
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(functorND))(function ($293) {
                      return Formula.Not.create(Formula.Not.create($293));
                  })(proofRef(rule.value0));
              };
              if (rule instanceof PBC) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(boxRef(rule.value0))(function (v1) {
                      if (v1.value0 instanceof Formula.Not) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(v1.value0.value0);
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
                  });
              };
              if (rule instanceof LEM) {
                  if (formula instanceof Data_Maybe.Just && (formula.value0 instanceof Formula.Or && (Data_Eq.eq(Formula.eqFormula)(formula.value0.value0)(new Formula.Not(formula.value0.value1)) || Data_Eq.eq(Formula.eqFormula)(formula.value0.value1)(new Formula.Not(formula.value0.value0))))) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(monadND))(formula.value0);
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(monadND))(BadRule.value);
              };
              if (rule instanceof Copy) {
                  return proofRef(rule.value0);
              };
              throw new Error("Failed pattern match at Proof (line 209, column 3 - line 286, column 25): " + [ rule.constructor.name ]);
          });
      };
  };
  var addLine = function (l) {
      return function (s) {
          return {
              lines: Data_Set.insert(Data_Ord.ordInt)(l)(s.lines),
              boxes: s.boxes,
              vars: s.vars,
              boxStart: s.boxStart
          };
      };
  };
  var addLineToInnermost = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(addLine(v)(v1.value0), v1.value1);
          };
          return Partial_Unsafe.unsafeCrashWith("Cannot add to an empty list of scopes.");
      };
  };
  var addProof = function (v) {
      return Control_Bind.bind(bindND)(Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(monadND))(Control_Monad_Except_Trans.except(applicativeND)(Data_Either.note(InvalidRule.value)(v.rule)))(Data_Function.flip(applyRule)(v.formula))))(function (result) {
          var formula = Control_Alt.alt(Data_Maybe.altMaybe)(v.formula)(Data_Either.hush(result));
          var error = (function () {
              if (result instanceof Data_Either.Left) {
                  return new Data_Maybe.Just(result.value0);
              };
              if (v.formula instanceof Data_Maybe.Nothing && result instanceof Data_Either.Right) {
                  return new Data_Maybe.Just(BadFormula.value);
              };
              if (v.formula instanceof Data_Maybe.Just && result instanceof Data_Either.Right) {
                  if (Data_Eq.eq(Formula.eqFormula)(v.formula.value0)(result.value0)) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Maybe.Just(FormulaMismatch.value);
                  };
              };
              throw new Error("Failed pattern match at Proof (line 301, column 13 - line 306, column 44): " + [ v.formula.constructor.name, result.constructor.name ]);
          })();
          return Control_Monad_State_Class.modify_(monadStateND)(function (proof) {
              var $280 = {};
              for (var $281 in proof) {
                  if ({}.hasOwnProperty.call(proof, $281)) {
                      $280[$281] = proof[$281];
                  };
              };
              $280.rows = Data_Array.snoc(proof.rows)({
                  formula: formula,
                  rule: v.rule,
                  error: error
              });
              $280.scopes = addLineToInnermost(Data_Array.length(proof.rows) + 1 | 0)(proof.scopes);
              return $280;
          });
      });
  };
  var addBox = function (b) {
      return function (s) {
          return {
              lines: s.lines,
              boxes: Data_Array.cons(b)(s.boxes),
              vars: s.vars,
              boxStart: s.boxStart
          };
      };
  };
  var addBoxToInnermost = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(addBox(v)(v1.value0), v1.value1);
          };
          return Partial_Unsafe.unsafeCrashWith("Cannot add to an empty list of scopes.");
      };
  };
  var closeBox = Control_Monad_State_Class.modify_(monadStateND)(function (proof) {
      var boxStart = Data_Maybe.fromJust()(innerBoxStart(proof.scopes));
      var boxEnd = Data_Array.length(proof.rows);
      var justClosed = new Data_Tuple.Tuple(boxStart, boxEnd);
      var $289 = {};
      for (var $290 in proof) {
          if ({}.hasOwnProperty.call(proof, $290)) {
              $289[$290] = proof[$290];
          };
      };
      $289.scopes = addBoxToInnermost(justClosed)(Data_Maybe.fromJust()(Data_List.tail(proof.scopes)));
      return $289;
  });
  exports["BadRef"] = BadRef;
  exports["RefDiscarded"] = RefDiscarded;
  exports["RefOutOfBounds"] = RefOutOfBounds;
  exports["BadRule"] = BadRule;
  exports["BadFormula"] = BadFormula;
  exports["FormulaMismatch"] = FormulaMismatch;
  exports["InvalidRule"] = InvalidRule;
  exports["Premise"] = Premise;
  exports["Assumption"] = Assumption;
  exports["AndElim1"] = AndElim1;
  exports["AndElim2"] = AndElim2;
  exports["AndIntro"] = AndIntro;
  exports["OrElim"] = OrElim;
  exports["OrIntro1"] = OrIntro1;
  exports["OrIntro2"] = OrIntro2;
  exports["ImplElim"] = ImplElim;
  exports["ImplIntro"] = ImplIntro;
  exports["NegElim"] = NegElim;
  exports["NegIntro"] = NegIntro;
  exports["BottomElim"] = BottomElim;
  exports["DoubleNegElim"] = DoubleNegElim;
  exports["ModusTollens"] = ModusTollens;
  exports["DoubleNegIntro"] = DoubleNegIntro;
  exports["PBC"] = PBC;
  exports["LEM"] = LEM;
  exports["Copy"] = Copy;
  exports["runND"] = runND;
  exports["addProof"] = addProof;
  exports["openBox"] = openBox;
  exports["closeBox"] = closeBox;
  exports["applicativeND"] = applicativeND;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Util"] = $PS["Util"] || {};
  var exports = $PS["Util"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var moveWithin = function (target) {
      return function (start) {
          return function (end) {
              var go = function (i) {
                  return function (j) {
                      return function (k) {
                          return function (xs) {
                              return Data_Array.concat([ Data_Array.take(i)(xs), Data_Array.slice(j)(k)(xs), Data_Array.slice(i)(j)(xs), Data_Array.drop(k)(xs) ]);
                          };
                      };
                  };
              };
              var $7 = target === start;
              if ($7) {
                  return Control_Category.identity(Control_Category.categoryFn);
              };
              var $8 = target < start;
              if ($8) {
                  return go(target)(start)(end);
              };
              return go(start)(end)(target);
          };
      };
  };
  var enumerate = function (dictFunctorWithIndex) {
      return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(Data_Tuple.Tuple.create);
  };
  exports["enumerate"] = enumerate;
  exports["moveWithin"] = moveWithin;
})(PS);
(function(exports) {
  "use strict";

  exports._getData = function (format) {
    return function (dataTransfer) {
      return function () {
        return dataTransfer.getData(format);
      };
    };
  };

  exports._setData = function (format) {
    return function (data) {
      return function (dataTransfer) {
        return function () {
          return dataTransfer.setData(format, data);
        };
      };
    };
  };

  exports._setDropEffect = function (e) {
    return function (dataTransfer) {
      return function () {
        dataTransfer.dropEffect = e;
      };
    };
  };
})(PS["Web.HTML.Event.DataTransfer"] = PS["Web.HTML.Event.DataTransfer"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DataTransfer"] = $PS["Web.HTML.Event.DataTransfer"] || {};
  var exports = $PS["Web.HTML.Event.DataTransfer"];
  var $foreign = $PS["Web.HTML.Event.DataTransfer"];
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Link = (function () {
      function Link() {

      };
      Link.value = new Link();
      return Link;
  })();
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var setDropEffect = function (de) {
      return $foreign["_setDropEffect"]((function () {
          if (de instanceof Copy) {
              return "copy";
          };
          if (de instanceof Link) {
              return "link";
          };
          if (de instanceof Move) {
              return "move";
          };
          if (de instanceof None) {
              return "none";
          };
          throw new Error("Failed pattern match at Web.HTML.Event.DataTransfer (line 81, column 35 - line 85, column 17): " + [ de.constructor.name ]);
      })());
  };
  var setData = function (v) {
      return function (dat) {
          return function (dt) {
              return $foreign["_setData"](v)(dat)(dt);
          };
      };
  };
  var getData = function (v) {
      return function (dt) {
          return $foreign["_getData"](v)(dt);
      };
  };
  exports["getData"] = getData;
  exports["setData"] = setData;
  exports["Move"] = Move;
  exports["None"] = None;
  exports["setDropEffect"] = setDropEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.dataTransfer = function (e) {
    return e.dataTransfer;
  };
})(PS["Web.HTML.Event.DragEvent"] = PS["Web.HTML.Event.DragEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Event.DragEvent"] = $PS["Web.HTML.Event.DragEvent"] || {};
  var exports = $PS["Web.HTML.Event.DragEvent"];
  var $foreign = $PS["Web.HTML.Event.DragEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  exports["toEvent"] = toEvent;
  exports["dataTransfer"] = $foreign.dataTransfer;
})(PS);
(function(exports) {
  "use strict";

  exports.key = function (e) {
    return e.key;
  };

  exports.shiftKey = function (e) {
    return e.shiftKey;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];  
  var toEvent = Unsafe_Coerce.unsafeCoerce;
  exports["toEvent"] = toEvent;
  exports["key"] = $foreign.key;
  exports["shiftKey"] = $foreign.shiftKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.Proof"] = $PS["GUI.Proof"] || {};
  var exports = $PS["GUI.Proof"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var GUI_Rules = $PS["GUI.Rules"];
  var GUI_SymbolInput = $PS["GUI.SymbolInput"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query = $PS["Halogen.Query"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Parser = $PS["Parser"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Proof = $PS["Proof"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Util = $PS["Util"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_Event_DataTransfer = $PS["Web.HTML.Event.DataTransfer"];
  var Web_HTML_Event_DragEvent = $PS["Web.HTML.Event.DragEvent"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];                
  var RowIdx = (function () {
      function RowIdx(value0) {
          this.value0 = value0;
      };
      RowIdx.create = function (value0) {
          return new RowIdx(value0);
      };
      return RowIdx;
  })();
  var BoxRange = (function () {
      function BoxRange(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BoxRange.create = function (value0) {
          return function (value1) {
              return new BoxRange(value0, value1);
          };
      };
      return BoxRange;
  })();
  var Rule = (function () {
      function Rule(value0) {
          this.value0 = value0;
      };
      Rule.create = function (value0) {
          return new Rule(value0);
      };
      return Rule;
  })();
  var Premise = (function () {
      function Premise() {

      };
      Premise.value = new Premise();
      return Premise;
  })();
  var Assumption = (function () {
      function Assumption(value0) {
          this.value0 = value0;
      };
      Assumption.create = function (value0) {
          return new Assumption(value0);
      };
      return Assumption;
  })();
  var Copy = (function () {
      function Copy(value0) {
          this.value0 = value0;
      };
      Copy.create = function (value0) {
          return new Copy(value0);
      };
      return Copy;
  })();
  var Subproof = (function () {
      function Subproof(value0) {
          this.value0 = value0;
      };
      Subproof.create = function (value0) {
          return new Subproof(value0);
      };
      return Subproof;
  })();
  var RowNode = (function () {
      function RowNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RowNode.create = function (value0) {
          return function (value1) {
              return new RowNode(value0, value1);
          };
      };
      return RowNode;
  })();
  var UpdateFormula = (function () {
      function UpdateFormula(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateFormula.create = function (value0) {
          return function (value1) {
              return new UpdateFormula(value0, value1);
          };
      };
      return UpdateFormula;
  })();
  var UpdateRule = (function () {
      function UpdateRule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateRule.create = function (value0) {
          return function (value1) {
              return new UpdateRule(value0, value1);
          };
      };
      return UpdateRule;
  })();
  var RowKeyEvent = (function () {
      function RowKeyEvent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RowKeyEvent.create = function (value0) {
          return function (value1) {
              return new RowKeyEvent(value0, value1);
          };
      };
      return RowKeyEvent;
  })();
  var DragStart = (function () {
      function DragStart(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DragStart.create = function (value0) {
          return function (value1) {
              return new DragStart(value0, value1);
          };
      };
      return DragStart;
  })();
  var DragOver = (function () {
      function DragOver(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DragOver.create = function (value0) {
          return function (value1) {
              return new DragOver(value0, value1);
          };
      };
      return DragOver;
  })();
  var DragEnter = (function () {
      function DragEnter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DragEnter.create = function (value0) {
          return function (value1) {
              return new DragEnter(value0, value1);
          };
      };
      return DragEnter;
  })();
  var DragLeave = (function () {
      function DragLeave(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DragLeave.create = function (value0) {
          return function (value1) {
              return new DragLeave(value0, value1);
          };
      };
      return DragLeave;
  })();
  var DragEnd = (function () {
      function DragEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DragEnd.create = function (value0) {
          return function (value1) {
              return new DragEnd(value0, value1);
          };
      };
      return DragEnd;
  })();
  var Drop = (function () {
      function Drop(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Drop.create = function (value0) {
          return function (value1) {
              return new Drop(value0, value1);
          };
      };
      return Drop;
  })();
  var UpdateConclusion = (function () {
      function UpdateConclusion(value0) {
          this.value0 = value0;
      };
      UpdateConclusion.create = function (value0) {
          return new UpdateConclusion(value0);
      };
      return UpdateConclusion;
  })();
  var UpdateRuleArg = (function () {
      function UpdateRuleArg(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      UpdateRuleArg.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new UpdateRuleArg(value0, value1, value2);
              };
          };
      };
      return UpdateRuleArg;
  })();
  var FormulaKeyDown = (function () {
      function FormulaKeyDown(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormulaKeyDown.create = function (value0) {
          return function (value1) {
              return new FormulaKeyDown(value0, value1);
          };
      };
      return FormulaKeyDown;
  })();
  var ruleText = function (v) {
      if (v instanceof Rule) {
          return v.value0;
      };
      if (v instanceof Premise) {
          return "Premise";
      };
      if (v instanceof Assumption) {
          return "Ass.";
      };
      if (v instanceof Copy) {
          return "Copy";
      };
      throw new Error("Failed pattern match at GUI.Proof (line 159, column 1 - line 159, column 27): " + [ v.constructor.name ]);
  };
  var ruleFromString = function (s) {
      return function (rowIdx) {
          if (s === "Ass." || s === "as") {
              return new Assumption({
                  boxEndIdx: rowIdx
              });
          };
          if (s === "pr" || s === "Premise") {
              return Premise.value;
          };
          if (s === "cp" || s === "Copy") {
              return new Copy(rowIdx);
          };
          if (Data_Boolean.otherwise) {
              return new Rule(s);
          };
          throw new Error("Failed pattern match at GUI.Proof (line 624, column 1 - line 624, column 40): " + [ s.constructor.name, rowIdx.constructor.name ]);
      };
  };
  var rowMediaType = "application/x.row";
  var proofTree = function (v) {
      var closeBoxesIfPossible = function ($copy_i) {
          return function ($copy_v1) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, v1) {
                  if (v1.value0.endIdx < i) {
                      $tco_done = true;
                      return Partial_Unsafe.unsafeCrashWith("Unreachable (nested box ended outside of parent)");
                  };
                  if (v1.value1 instanceof Data_List_Types.Cons && v1.value0.endIdx === i) {
                      $tco_var_i = i;
                      $copy_v1 = new Data_NonEmpty.NonEmpty({
                          elems: Data_Array.snoc(v1.value1.value0.elems)(new Subproof(v1.value0.elems)),
                          endIdx: v1.value1.value0.endIdx
                      }, v1.value1.value1);
                      return;
                  };
                  $tco_done = true;
                  return v1;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_i, $copy_v1);
              };
              return $tco_result;
          };
      };
      var result = Data_FoldableWithIndex.foldlWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(function (i) {
          return function (v1) {
              return function (proofRow) {
                  return closeBoxesIfPossible(i)((function () {
                      if (proofRow.rule instanceof Assumption) {
                          return new Data_NonEmpty.NonEmpty({
                              elems: [ new RowNode(i, proofRow) ],
                              endIdx: proofRow.rule.value0.boxEndIdx
                          }, new Data_List_Types.Cons(v1.value0, v1.value1));
                      };
                      return new Data_NonEmpty.NonEmpty({
                          elems: Data_Array.snoc(v1.value0.elems)(new RowNode(i, proofRow)),
                          endIdx: v1.value0.endIdx
                      }, v1.value1);
                  })());
              };
          };
      })(new Data_NonEmpty.NonEmpty({
          elems: [  ],
          endIdx: Data_Array.length(v.rows)
      }, Data_List_Types.Nil.value))(v.rows);
      if (result.value1 instanceof Data_List_Types.Nil) {
          return result.value0.elems;
      };
      return Partial_Unsafe.unsafeCrashWith("Unclosed boxes");
  };
  var parseRuleText = function (v) {
      if (v === "Premise") {
          return new Data_Maybe.Just(GUI_Rules.RtPremise.value);
      };
      if (v === "Ass.") {
          return new Data_Maybe.Just(GUI_Rules.RtAssumption.value);
      };
      if (v === "\u2227e1") {
          return new Data_Maybe.Just(GUI_Rules.AndElim1.value);
      };
      if (v === "\u2227e2") {
          return new Data_Maybe.Just(GUI_Rules.AndElim2.value);
      };
      if (v === "\u2227i") {
          return new Data_Maybe.Just(GUI_Rules.AndIntro.value);
      };
      if (v === "\u2228e") {
          return new Data_Maybe.Just(GUI_Rules.OrElim.value);
      };
      if (v === "\u2228i1") {
          return new Data_Maybe.Just(GUI_Rules.OrIntro1.value);
      };
      if (v === "\u2228i2") {
          return new Data_Maybe.Just(GUI_Rules.OrIntro2.value);
      };
      if (v === "\u2192e") {
          return new Data_Maybe.Just(GUI_Rules.ImplElim.value);
      };
      if (v === "\u2192i") {
          return new Data_Maybe.Just(GUI_Rules.ImplIntro.value);
      };
      if (v === "\xace") {
          return new Data_Maybe.Just(GUI_Rules.NegElim.value);
      };
      if (v === "\xaci") {
          return new Data_Maybe.Just(GUI_Rules.NegIntro.value);
      };
      if (v === "\u22a5e") {
          return new Data_Maybe.Just(GUI_Rules.BottomElim.value);
      };
      if (v === "\xac\xace") {
          return new Data_Maybe.Just(GUI_Rules.DoubleNegElim.value);
      };
      if (v === "MT") {
          return new Data_Maybe.Just(GUI_Rules.ModusTollens.value);
      };
      if (v === "\xac\xaci") {
          return new Data_Maybe.Just(GUI_Rules.DoubleNegIntro.value);
      };
      if (v === "PBC") {
          return new Data_Maybe.Just(GUI_Rules.PBC.value);
      };
      if (v === "LEM") {
          return new Data_Maybe.Just(GUI_Rules.LEM.value);
      };
      if (v === "Copy") {
          return new Data_Maybe.Just(GUI_Rules.RtCopy.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var parseRowIdx = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(RowIdx.create)(Data_Int.fromString(s));
  };
  var parseBoxRange = function (s) {
      var args = Data_Functor.map(Data_Functor.functorArray)(Data_Int.fromString)(Data_String_Common.split("-")(s));
      if (args.length === 2 && (args[0] instanceof Data_Maybe.Just && args[1] instanceof Data_Maybe.Just)) {
          return Data_Maybe.Just.create(new BoxRange(args[0].value0, args[1].value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var ruleArgTypes = function (v) {
      if (v instanceof GUI_Rules.RtPremise) {
          return [  ];
      };
      if (v instanceof GUI_Rules.RtAssumption) {
          return [  ];
      };
      if (v instanceof GUI_Rules.AndElim1) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.AndElim2) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.AndIntro) {
          return [ parseRowIdx, parseRowIdx ];
      };
      if (v instanceof GUI_Rules.OrElim) {
          return [ parseRowIdx, parseBoxRange, parseBoxRange ];
      };
      if (v instanceof GUI_Rules.OrIntro1) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.OrIntro2) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.ImplElim) {
          return [ parseRowIdx, parseRowIdx ];
      };
      if (v instanceof GUI_Rules.ImplIntro) {
          return [ parseBoxRange ];
      };
      if (v instanceof GUI_Rules.NegElim) {
          return [ parseRowIdx, parseRowIdx ];
      };
      if (v instanceof GUI_Rules.NegIntro) {
          return [ parseBoxRange ];
      };
      if (v instanceof GUI_Rules.BottomElim) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.DoubleNegElim) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.ModusTollens) {
          return [ parseRowIdx, parseRowIdx ];
      };
      if (v instanceof GUI_Rules.DoubleNegIntro) {
          return [ parseRowIdx ];
      };
      if (v instanceof GUI_Rules.PBC) {
          return [ parseBoxRange ];
      };
      if (v instanceof GUI_Rules.LEM) {
          return [  ];
      };
      if (v instanceof GUI_Rules.RtCopy) {
          return [ parseRowIdx ];
      };
      throw new Error("Failed pattern match at GUI.Proof (line 82, column 16 - line 101, column 28): " + [ v.constructor.name ]);
  };
  var parseRuleArgs = function (ruleType) {
      return function (ruleArgs) {
          var argTypes = ruleArgTypes(ruleType);
          return Data_Array.zipWith(Data_Function.apply)(argTypes)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ruleArgs)(Data_Array.replicate(Data_Array.length(argTypes))("")));
      };
  };
  var parseRule = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(parseRuleText(ruleText(v.rule)))(function (ruleType) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(parseRuleArgs(ruleType)(v.ruleArgs)))(function (args) {
              if (ruleType instanceof GUI_Rules.RtAssumption && args.length === 0) {
                  return new Data_Maybe.Just(Proof.Assumption.value);
              };
              if (ruleType instanceof GUI_Rules.RtPremise && args.length === 0) {
                  return new Data_Maybe.Just(Proof.Premise.value);
              };
              if (ruleType instanceof GUI_Rules.AndElim1 && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.AndElim1(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.AndElim2 && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.AndElim2(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.AndIntro && (args.length === 2 && (args[0] instanceof RowIdx && args[1] instanceof RowIdx))) {
                  return Data_Maybe.Just.create(new Proof.AndIntro(args[0].value0, args[1].value0));
              };
              if (ruleType instanceof GUI_Rules.OrElim && (args.length === 3 && (args[0] instanceof RowIdx && (args[1] instanceof BoxRange && args[2] instanceof BoxRange)))) {
                  return Data_Maybe.Just.create(new Proof.OrElim(args[0].value0, new Data_Tuple.Tuple(args[1].value0, args[1].value1), new Data_Tuple.Tuple(args[2].value0, args[2].value1)));
              };
              if (ruleType instanceof GUI_Rules.OrIntro1 && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.OrIntro1(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.OrIntro2 && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.OrIntro2(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.ImplElim && (args.length === 2 && (args[0] instanceof RowIdx && args[1] instanceof RowIdx))) {
                  return Data_Maybe.Just.create(new Proof.ImplElim(args[0].value0, args[1].value0));
              };
              if (ruleType instanceof GUI_Rules.ImplIntro && (args.length === 1 && args[0] instanceof BoxRange)) {
                  return Data_Maybe.Just.create(new Proof.ImplIntro(new Data_Tuple.Tuple(args[0].value0, args[0].value1)));
              };
              if (ruleType instanceof GUI_Rules.NegElim && (args.length === 2 && (args[0] instanceof RowIdx && args[1] instanceof RowIdx))) {
                  return Data_Maybe.Just.create(new Proof.NegElim(args[0].value0, args[1].value0));
              };
              if (ruleType instanceof GUI_Rules.NegIntro && (args.length === 1 && args[0] instanceof BoxRange)) {
                  return Data_Maybe.Just.create(new Proof.NegIntro(new Data_Tuple.Tuple(args[0].value0, args[0].value1)));
              };
              if (ruleType instanceof GUI_Rules.BottomElim && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.BottomElim(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.DoubleNegElim && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.DoubleNegElim(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.ModusTollens && (args.length === 2 && (args[0] instanceof RowIdx && args[1] instanceof RowIdx))) {
                  return Data_Maybe.Just.create(new Proof.ModusTollens(args[0].value0, args[1].value0));
              };
              if (ruleType instanceof GUI_Rules.DoubleNegIntro && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.DoubleNegIntro(args[0].value0));
              };
              if (ruleType instanceof GUI_Rules.PBC && (args.length === 1 && args[0] instanceof BoxRange)) {
                  return Data_Maybe.Just.create(new Proof.PBC(new Data_Tuple.Tuple(args[0].value0, args[0].value1)));
              };
              if (ruleType instanceof GUI_Rules.LEM && args.length === 0) {
                  return new Data_Maybe.Just(Proof.LEM.value);
              };
              if (ruleType instanceof GUI_Rules.RtCopy && (args.length === 1 && args[0] instanceof RowIdx)) {
                  return Data_Maybe.Just.create(new Proof.Copy(args[0].value0));
              };
              return Data_Maybe.Nothing.value;
          });
      });
  };
  var isBox = function (r) {
      if (r.rule instanceof Assumption) {
          return true;
      };
      return false;
  };
  var scopeStart = function (i) {
      return function (st) {
          var indexedBoxes = function (st1) {
              return Data_Array.filter(function (v) {
                  return isBox(v.value1);
              })(Util.enumerate(Data_FunctorWithIndex.functorWithIndexArray)(st1.rows));
          };
          var inBox = function (i1) {
              return function (v) {
                  return i1 >= v.value0 && i1 <= v.value1;
              };
          };
          var inBoxes = function (i1) {
              return function (bs) {
                  return Data_Array.filter(inBox(i1))(bs);
              };
          };
          var boxLimits = function (v) {
              if (v.value1.rule instanceof Assumption) {
                  return new Data_Tuple.Tuple(v.value0, v.value1.rule.value0.boxEndIdx);
              };
              return Partial_Unsafe.unsafeCrashWith("Not a box.");
          };
          var allBoxLimits = function (st1) {
              return Data_Functor.map(Data_Functor.functorArray)(boxLimits)(indexedBoxes(st1));
          };
          var innermostScope = function (i1) {
              return function (st1) {
                  return Data_Maybe.fromJust()(Data_Array.last(inBoxes(i1)(allBoxLimits(st1))));
              };
          };
          return Data_Tuple.fst(innermostScope(i)(st));
      };
  };
  var errorText = function (v) {
      if (v instanceof Proof.BadRef) {
          return "Reference to invalid row";
      };
      if (v instanceof Proof.RefDiscarded) {
          return "Reference to row in discarded box";
      };
      if (v instanceof Proof.RefOutOfBounds) {
          return "Reference to non-existent row";
      };
      if (v instanceof Proof.BadRule) {
          return "Bad rule application";
      };
      if (v instanceof Proof.BadFormula) {
          return "Bad inputed formula";
      };
      if (v instanceof Proof.FormulaMismatch) {
          return "Formula does not match output from rule";
      };
      if (v instanceof Proof.InvalidRule) {
          return "Non-existent rule";
      };
      throw new Error("Failed pattern match at GUI.Proof (line 169, column 13 - line 176, column 39): " + [ v.constructor.name ]);
  };
  var eqRule = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Rule && y instanceof Rule) {
              return x.value0 === y.value0;
          };
          if (x instanceof Premise && y instanceof Premise) {
              return true;
          };
          if (x instanceof Assumption && y instanceof Assumption) {
              return x.value0.boxEndIdx === y.value0.boxEndIdx;
          };
          if (x instanceof Copy && y instanceof Copy) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var emptyRow = {
      formulaText: "",
      rule: new Rule(""),
      ruleArgs: [  ]
  };
  var initialState = function (v) {
      return {
          conclusion: "",
          rows: [ emptyRow ],
          draggingOver: Data_Maybe.Nothing.value
      };
  };
  var boxes = function (st) {
      return Data_Array.filter(isBox)(st.rows);
  };
  var getAllEndings = function (st) {
      var rToE = function (r) {
          if (r.rule instanceof Assumption) {
              return r.rule.value0.boxEndIdx;
          };
          return Partial_Unsafe.unsafeCrashWith("Row is not a box.");
      };
      return Data_Functor.map(Data_Functor.functorArray)(rToE)(boxes(st));
  };
  var _symbolInput = Type_Proxy["Proxy"].value;
  var handleAction = function (dictMonadEffect) {
      var modifyBoxEnds = function (off) {
          return function (i) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  if (v.rule instanceof Assumption && i <= v.rule.value0.boxEndIdx) {
                      return {
                          rule: new Assumption({
                              boxEndIdx: v.rule.value0.boxEndIdx + off | 0
                          }),
                          formulaText: v.formulaText,
                          ruleArgs: v.ruleArgs
                      };
                  };
                  return v;
              });
          };
      };
      var incrBoxEndsWithEx = function (i) {
          return function (e) {
              return function (rs) {
                  return Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      var $215 = v.value0 === e;
                      if ($215) {
                          return v.value1;
                      };
                      if (v.value1.rule instanceof Assumption && i <= v.value1.rule.value0.boxEndIdx) {
                          return {
                              rule: new Assumption({
                                  boxEndIdx: v.value1.rule.value0.boxEndIdx + 1 | 0
                              }),
                              formulaText: v.value1.formulaText,
                              ruleArgs: v.value1.ruleArgs
                          };
                      };
                      return v.value1;
                  })(Util.enumerate(Data_FunctorWithIndex.functorWithIndexArray)(rs));
              };
          };
      };
      var incrBoxEnds = modifyBoxEnds(1);
      var exitBox = function (i) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
              return {
                  rows: Data_Maybe.fromJust()(Data_Array.insertAt(i + 1 | 0)(emptyRow)((function () {
                      var $222 = Data_Array.elem(Data_Eq.eqInt)(i)(getAllEndings(st));
                      if ($222) {
                          return incrBoxEndsWithEx(i)(scopeStart(i)(st));
                      };
                      return incrBoxEnds(i);
                  })()(st.rows))),
                  conclusion: st.conclusion,
                  draggingOver: st.draggingOver
              };
          }))(function () {
              return Halogen_Query.tell()(new Data_Symbol.IsSymbol(function () {
                  return "symbolInput";
              }))(Data_Ord.ordInt)(_symbolInput)(2 * (i + 1 | 0) | 0)(GUI_SymbolInput.Focus.create);
          });
      };
      var draggedRows = function (ev) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (s) {
              return Data_Maybe.fromJust()(Data_Int.fromString(s));
          })(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_Event_DataTransfer.getData(rowMediaType)(Web_HTML_Event_DragEvent.dataTransfer(ev)))))(function (start) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
                  return v.rows;
              }))(function (rows) {
                  var startRow = Data_Maybe.fromJust()(Data_Array.index(rows)(start));
                  var end = (function () {
                      if (startRow.rule instanceof Assumption) {
                          return startRow.rule.value0.boxEndIdx + 1 | 0;
                      };
                      return start + 1 | 0;
                  })();
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)({
                      start: start,
                      end: end
                  });
              });
          });
      };
      var isValidDropZone = function (i) {
          return function (ev) {
              return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (v) {
                  return !(v.start <= i && i < v.end);
              })(draggedRows(ev));
          };
      };
      var decrBoxEnds = modifyBoxEnds(-1 | 0);
      var deleteRow = function (i) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Array.length)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
              return v.rows;
          })))(function (rowCount) {
              return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(rowCount > 1)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $229 = {};
                  for (var $230 in st) {
                      if ({}.hasOwnProperty.call(st, $230)) {
                          $229[$230] = st[$230];
                      };
                  };
                  $229.rows = Data_Maybe.fromJust()(Data_Array.deleteAt(i)(decrBoxEnds(i)(st.rows)));
                  return $229;
              }))(function () {
                  return Halogen_Query.tell()(new Data_Symbol.IsSymbol(function () {
                      return "symbolInput";
                  }))(Data_Ord.ordInt)(_symbolInput)(2 * (i - 1 | 0) | 0)(GUI_SymbolInput.Focus.create);
              }));
          });
      };
      var addRowBelow = function (i) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
              var $232 = {};
              for (var $233 in st) {
                  if ({}.hasOwnProperty.call(st, $233)) {
                      $232[$233] = st[$233];
                  };
              };
              $232.rows = Data_Maybe.fromJust()(Data_Array.insertAt(i + 1 | 0)(emptyRow)(incrBoxEnds(i)(st.rows)));
              return $232;
          }))(function () {
              return Halogen_Query.tell()(new Data_Symbol.IsSymbol(function () {
                  return "symbolInput";
              }))(Data_Ord.ordInt)(_symbolInput)(2 * (i + 1 | 0) | 0)(GUI_SymbolInput.Focus.create);
          });
      };
      return function (v) {
          if (v instanceof UpdateFormula) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $239 = {};
                  for (var $240 in st) {
                      if ({}.hasOwnProperty.call(st, $240)) {
                          $239[$240] = st[$240];
                      };
                  };
                  $239.rows = Data_Maybe.fromJust()(Data_Array.modifyAt(v.value0)(function (v2) {
                      var $236 = {};
                      for (var $237 in v2) {
                          if ({}.hasOwnProperty.call(v2, $237)) {
                              $236[$237] = v2[$237];
                          };
                      };
                      $236.formulaText = v.value1;
                      return $236;
                  })(st.rows));
                  return $239;
              });
          };
          if (v instanceof UpdateRule) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $247 = {};
                  for (var $248 in st) {
                      if ({}.hasOwnProperty.call(st, $248)) {
                          $247[$248] = st[$248];
                      };
                  };
                  $247.rows = Data_Maybe.fromJust()(Data_Array.modifyAt(v.value0)(function (v2) {
                      var $244 = {};
                      for (var $245 in v2) {
                          if ({}.hasOwnProperty.call(v2, $245)) {
                              $244[$245] = v2[$245];
                          };
                      };
                      $244.rule = ruleFromString(v.value1)(v.value0);
                      return $244;
                  })(st.rows));
                  return $247;
              }))(function () {
                  return Halogen_Query.tell()(new Data_Symbol.IsSymbol(function () {
                      return "symbolInput";
                  }))(Data_Ord.ordInt)(_symbolInput)((2 * v.value0 | 0) + 1 | 0)(GUI_SymbolInput.Focus.create);
              });
          };
          if (v instanceof UpdateRuleArg) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $255 = {};
                  for (var $256 in st) {
                      if ({}.hasOwnProperty.call(st, $256)) {
                          $255[$256] = st[$256];
                      };
                  };
                  $255.rows = Data_Maybe.fromJust()(Data_Array.modifyAt(v.value0)(function (row) {
                      var $252 = {};
                      for (var $253 in row) {
                          if ({}.hasOwnProperty.call(row, $253)) {
                              $252[$253] = row[$253];
                          };
                      };
                      $252.ruleArgs = Data_Maybe.fromJust()(Data_Array.modifyAt(v.value1)(Data_Function["const"](v.value2))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(row.ruleArgs)(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(0)((v.value1 + 1 | 0) - Data_Array.length(row.ruleArgs) | 0))(""))));
                      return $252;
                  })(st.rows));
                  return $255;
              });
          };
          if (v instanceof RowKeyEvent) {
              var v1 = Web_UIEvent_KeyboardEvent.key(v.value1);
              if (v1 === "Enter" && Web_UIEvent_KeyboardEvent.shiftKey(v.value1)) {
                  return exitBox(v.value0);
              };
              if (v1 === "Enter") {
                  return addRowBelow(v.value0);
              };
              if (v1 === "Delete" && Web_UIEvent_KeyboardEvent.shiftKey(v.value1)) {
                  return deleteRow(v.value0);
              };
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
          };
          if (v instanceof FormulaKeyDown) {
              var v1 = Web_UIEvent_KeyboardEvent.key(v.value1);
              if (v1 === "Backspace" && v.value0 >= 0) {
                  var target = Data_Maybe.fromJust()(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Event_Event.target(Web_UIEvent_KeyboardEvent.toEvent(v.value1)))(Web_HTML_HTMLInputElement.fromEventTarget));
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_HTMLInputElement.value(target)))(function (value) {
                      return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_String_Common["null"](value))(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(deleteRow(v.value0))(function () {
                          return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_Event_Event.preventDefault(Web_UIEvent_KeyboardEvent.toEvent(v.value1)));
                      }));
                  });
              };
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
          };
          if (v instanceof DragStart) {
              return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_Event_DataTransfer.setData(rowMediaType)(Data_Show.show(Data_Show.showInt)(v.value0))(Web_HTML_Event_DragEvent.dataTransfer(v.value1)));
          };
          if (v instanceof DragOver) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(isValidDropZone(v.value0)(v.value1))(function (validDropZone) {
                  return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(validDropZone)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                      var $269 = {};
                      for (var $270 in st) {
                          if ({}.hasOwnProperty.call(st, $270)) {
                              $269[$270] = st[$270];
                          };
                      };
                      $269.draggingOver = new Data_Maybe.Just(v.value0);
                      return $269;
                  }))(function () {
                      return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_Event_Event.preventDefault(Web_HTML_Event_DragEvent.toEvent(v.value1)));
                  }));
              });
          };
          if (v instanceof DragEnter) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(isValidDropZone(v.value0)(v.value1))(function (validDropZone) {
                  return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(validDropZone)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_Event_DataTransfer.setDropEffect(Web_HTML_Event_DataTransfer.Move.value)(Web_HTML_Event_DragEvent.dataTransfer(v.value1))))(function () {
                      return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                          var $274 = {};
                          for (var $275 in st) {
                              if ({}.hasOwnProperty.call(st, $275)) {
                                  $274[$275] = st[$275];
                              };
                          };
                          $274.draggingOver = new Data_Maybe.Just(v.value0);
                          return $274;
                      });
                  }));
              });
          };
          if (v instanceof DragLeave) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  return v1.draggingOver;
              }))(function (draggingOver) {
                  return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(draggingOver)(new Data_Maybe.Just(v.value0)))(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_HTML_Event_DataTransfer.setDropEffect(Web_HTML_Event_DataTransfer.None.value)(Web_HTML_Event_DragEvent.dataTransfer(v.value1))))(function () {
                      return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                          var $279 = {};
                          for (var $280 in st) {
                              if ({}.hasOwnProperty.call(st, $280)) {
                                  $279[$280] = st[$280];
                              };
                          };
                          $279.draggingOver = Data_Maybe.Nothing.value;
                          return $279;
                      });
                  }));
              });
          };
          if (v instanceof DragEnd) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $284 = {};
                  for (var $285 in st) {
                      if ({}.hasOwnProperty.call(st, $285)) {
                          $284[$285] = st[$285];
                      };
                  };
                  $284.draggingOver = Data_Maybe.Nothing.value;
                  return $284;
              });
          };
          if (v instanceof Drop) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_Event_Event.preventDefault(Web_HTML_Event_DragEvent.toEvent(v.value1))))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                      var $289 = {};
                      for (var $290 in st) {
                          if ({}.hasOwnProperty.call(st, $290)) {
                              $289[$290] = st[$290];
                          };
                      };
                      $289.draggingOver = Data_Maybe.Nothing.value;
                      return $289;
                  }))(function () {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(draggedRows(v.value1))(function (v1) {
                          return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                              var target = v.value0 + 1 | 0;
                              var newStart = target - (function () {
                                  var $293 = v1.start < target;
                                  if ($293) {
                                      return v1.end - v1.start | 0;
                                  };
                                  return 0;
                              })() | 0;
                              var updateBoxes = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (j) {
                                  return function (v2) {
                                      var v3 = function (v4) {
                                          var v5 = function (v6) {
                                              var v7 = function (v8) {
                                                  return v2;
                                              };
                                              if (v2.rule instanceof Assumption) {
                                                  var $296 = v1.start <= v2.rule.value0.boxEndIdx;
                                                  if ($296) {
                                                      var $297 = v2.rule.value0.boxEndIdx < v.value0;
                                                      if ($297) {
                                                          var $298 = {};
                                                          for (var $299 in v2) {
                                                              if ({}.hasOwnProperty.call(v2, $299)) {
                                                                  $298[$299] = v2[$299];
                                                              };
                                                          };
                                                          $298.rule = new Assumption({
                                                              boxEndIdx: v2.rule.value0.boxEndIdx - (v1.end - v1.start | 0) | 0
                                                          });
                                                          return $298;
                                                      };
                                                      return v7(true);
                                                  };
                                                  return v7(true);
                                              };
                                              return v7(true);
                                          };
                                          if (v2.rule instanceof Assumption) {
                                              var $305 = v.value0 <= v2.rule.value0.boxEndIdx;
                                              if ($305) {
                                                  var $306 = v2.rule.value0.boxEndIdx < v1.start;
                                                  if ($306) {
                                                      var $307 = {};
                                                      for (var $308 in v2) {
                                                          if ({}.hasOwnProperty.call(v2, $308)) {
                                                              $307[$308] = v2[$308];
                                                          };
                                                      };
                                                      $307.rule = new Assumption({
                                                          boxEndIdx: v2.rule.value0.boxEndIdx + (v1.end - v1.start | 0) | 0
                                                      });
                                                      return $307;
                                                  };
                                                  return v5(true);
                                              };
                                              return v5(true);
                                          };
                                          return v5(true);
                                      };
                                      if (v2.rule instanceof Assumption) {
                                          var $314 = v1.start <= j;
                                          if ($314) {
                                              var $315 = j < v1.end;
                                              if ($315) {
                                                  var $316 = {};
                                                  for (var $317 in v2) {
                                                      if ({}.hasOwnProperty.call(v2, $317)) {
                                                          $316[$317] = v2[$317];
                                                      };
                                                  };
                                                  $316.rule = new Assumption({
                                                      boxEndIdx: v2.rule.value0.boxEndIdx + (newStart - v1.start | 0) | 0
                                                  });
                                                  return $316;
                                              };
                                              return v3(true);
                                          };
                                          return v3(true);
                                      };
                                      return v3(true);
                                  };
                              });
                              var rows$prime = Util.moveWithin(target)(v1.start)(v1.end)(updateBoxes(st.rows));
                              var $322 = {};
                              for (var $323 in st) {
                                  if ({}.hasOwnProperty.call(st, $323)) {
                                      $322[$323] = st[$323];
                                  };
                              };
                              $322.rows = rows$prime;
                              return $322;
                          });
                      });
                  });
              });
          };
          if (v instanceof UpdateConclusion) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $329 = {};
                  for (var $330 in st) {
                      if ({}.hasOwnProperty.call(st, $330)) {
                          $329[$330] = st[$330];
                      };
                  };
                  $329.conclusion = v.value0;
                  return $329;
              });
          };
          throw new Error("Failed pattern match at GUI.Proof (line 405, column 16 - line 488, column 63): " + [ v.constructor.name ]);
      };
  };
  var render = function (dictMonadEffect) {
      return function (st) {
          var verification$prime = (function () {
              var proofTreeAction = function (v) {
                  if (v instanceof Subproof) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Proof.openBox ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Control_Bind.bind(Control_Bind.bindArray)(v.value0)(proofTreeAction))([ Proof.closeBox ]));
                  };
                  if (v instanceof RowNode) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(Proof.addProof({
                          formula: Data_Either.hush(Parser.parseFormula(v.value1.formulaText)),
                          rule: parseRule(v.value1)
                      }));
                  };
                  throw new Error("Failed pattern match at GUI.Proof (line 311, column 25 - line 318, column 18): " + [ v.constructor.name ]);
              };
              var conclusion = Data_Either.hush(Parser.parseFormula(st.conclusion));
              return Proof.runND(conclusion)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Proof.applicativeND)(Control_Bind.bind(Control_Bind.bindArray)(proofTree(st))(proofTreeAction)));
          })();
          var verification = Data_Tuple.snd(verification$prime);
          var premises = Data_String_Common.joinWith(", ")(Data_Array.nub(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.formulaText;
          })(Data_Array.filter(function ($356) {
              return (function (v) {
                  return Data_Eq.eq(eqRule)(v)(Premise.value);
              })((function (v) {
                  return v.rule;
              })($356));
          })(st.rows))));
          var formulaField = function (i) {
              return function (placeholder) {
                  return function (text) {
                      return function (outputMap) {
                          var isOk = Data_Either.isRight(Parser.parseFormula(text));
                          return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "column", "formula-field" ])((function () {
                              if (isOk) {
                                  return [  ];
                              };
                              return [ "invalid" ];
                          })())), Halogen_HTML_Events.onKeyDown(FormulaKeyDown.create(i)) ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                              return "symbolInput";
                          }))(Data_Ord.ordInt)(_symbolInput)(2 * i | 0)(GUI_SymbolInput.symbolInput(dictMonadEffect)(placeholder))(text)(outputMap) ]);
                      };
                  };
              };
          };
          var proofHeader = Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "proof-header" ]) ])([ Halogen_HTML_Elements.span([  ])([ Halogen_HTML_Core.text(premises), Halogen_HTML_Core.text(" \u22a2 ") ]), formulaField(-1 | 0)("Conclusion")(st.conclusion)(UpdateConclusion.create) ]);
          var row = function (i) {
              return function (v) {
                  var argField = function (v1) {
                      return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ "column", "is-narrow" ]) ])([ Halogen_HTML_Elements.input([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "input", "rule-arg-input" ])((function () {
                          var $341 = Data_Maybe.isNothing(v1.value1.value0);
                          if ($341) {
                              return [ "invalid" ];
                          };
                          return [  ];
                      })())), Halogen_HTML_Properties.value(v1.value1.value1), Halogen_HTML_Properties.placeholder("Row"), Halogen_HTML_Events.onValueInput(UpdateRuleArg.create(i)(v1.value0)) ]) ]);
                  };
                  var argFields = Data_Maybe.fromMaybe([  ])(Control_Bind.bind(Data_Maybe.bindMaybe)(parseRuleText(ruleText(v.rule)))(function (ruleType) {
                      var argResults = parseRuleArgs(ruleType)(v.ruleArgs);
                      var argStrings = Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.ruleArgs)(Data_Array.replicate(Data_Array.length(argResults))(""));
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Functor.map(Data_Functor.functorArray)(argField)(Util.enumerate(Data_FunctorWithIndex.functorWithIndexArray)(Data_Array.zip(argResults)(argStrings))));
                  }));
                  return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "columns", "is-mobile", "proof-row" ])(Data_Maybe.maybe([  ])(function (j) {
                      var $346 = i === j;
                      if ($346) {
                          return [ "dragged-over" ];
                      };
                      return [  ];
                  })(st.draggingOver))), Halogen_HTML_Properties.draggable(true), Halogen_HTML_Events.onKeyDown(RowKeyEvent.create(i)), Halogen_HTML_Events.onDragStart(DragStart.create(i)), Halogen_HTML_Events.onDragOver(DragOver.create(i)), Halogen_HTML_Events.onDragEnter(DragEnter.create(i)), Halogen_HTML_Events.onDragLeave(DragLeave.create(i)), Halogen_HTML_Events.onDrop(Drop.create(i)), Halogen_HTML_Events.onDragEnd(DragEnd.create(i)) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ "column", "is-narrow" ]) ])([ Halogen_HTML_Elements.h4([ Halogen_HTML_Properties.classes([ "title", "row-index" ]) ])([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(1 + i | 0)) ]) ]), formulaField(i)("Enter formula")(v.formulaText)(UpdateFormula.create(i)), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ "column", "is-narrow" ]) ])([ Halogen_HTML_Elements.span(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "rule-field" ])((function () {
                      var $347 = Data_Maybe.isJust(verification["rows"][i].error);
                      if ($347) {
                          return [ "invalid" ];
                      };
                      return [  ];
                  })())) ])(Data_Maybe.maybe([  ])(function (e) {
                      return [ Halogen_HTML_Properties.title(errorText(e)) ];
                  })(verification["rows"][i].error)))([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                      return "symbolInput";
                  }))(Data_Ord.ordInt)(_symbolInput)((2 * i | 0) + 1 | 0)(GUI_SymbolInput.symbolInput(dictMonadEffect)("Rule"))(ruleText(v.rule))(UpdateRule.create(i)) ]) ]) ])(argFields));
              };
          };
          var proofRows = (function () {
              var renderProofTree = function (v) {
                  if (v instanceof Subproof) {
                      return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "proof-box" ]) ])(Data_Functor.map(Data_Functor.functorArray)(renderProofTree)(v.value0));
                  };
                  if (v instanceof RowNode) {
                      return row(v.value0)(v.value1);
                  };
                  throw new Error("Failed pattern match at GUI.Proof (line 331, column 25 - line 333, column 31): " + [ v.constructor.name ]);
              };
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "proof-rows" ]) ])(Data_Functor.map(Data_Functor.functorArray)(renderProofTree)(proofTree(st)));
          })();
          var complete = Data_Tuple.fst(verification$prime);
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "proof" ])((function () {
              if (complete) {
                  return [ "complete" ];
              };
              return [  ];
          })())) ])([ proofHeader, proofRows ]);
      };
  };
  var proof = function (dictMonadEffect) {
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render(dictMonadEffect),
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(dictMonadEffect),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: Halogen_Component.defaultEval.initialize,
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  exports["proof"] = proof;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.ProofPanel"] = $PS["GUI.ProofPanel"] || {};
  var exports = $PS["GUI.ProofPanel"];
  var Control_Category = $PS["Control.Category"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var GUI_Proof = $PS["GUI.Proof"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Type_Proxy = $PS["Type.Proxy"];         
  var _proof = Type_Proxy["Proxy"].value;
  var proofPanel = function (dictMonadEffect) {
      var render = function (v) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "panel", "is-primary" ]) ])([ Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "panel-heading" ]) ])([ Halogen_HTML_Core.text("Proof") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "panel-block" ]) ])([ Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
              return "proof";
          }))(Data_Ord.ordInt)(_proof)(0)(GUI_Proof.proof(dictMonadEffect))({}) ]) ]);
      };
      return Halogen_Component.mkComponent({
          initialState: Control_Category.identity(Control_Category.categoryFn),
          render: render,
          "eval": Halogen_Component.mkEval(Halogen_Component.defaultEval)
      });
  };
  exports["proofPanel"] = proofPanel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.RulesPanel"] = $PS["GUI.RulesPanel"] || {};
  var exports = $PS["GUI.RulesPanel"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var DOM_HTML_Indexed_ButtonType = $PS["DOM.HTML.Indexed.ButtonType"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var GUI_Rules = $PS["GUI.Rules"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var ruleButtonPanel = function (dictMonadEffect) {
      var textualHint = function (r) {
          if (r instanceof GUI_Rules.RtPremise) {
              return "A premise is something that is assumed to be universally true, " + "and therefore need no justification.";
          };
          if (r instanceof GUI_Rules.RtAssumption) {
              return "An assumption introduces a new fact without justification, " + ("but does so inside a new scope. The assumption or any conclusions " + "drawn from it is not allowed to escape this scope.");
          };
          if (r instanceof GUI_Rules.AndElim1) {
              return "The left conjunction elimination rule concludes " + "the formula A from the premise A\u2227B.";
          };
          if (r instanceof GUI_Rules.AndElim2) {
              return "The right conjunction elimination rule concludes " + "the formula B from the premise A\u2227B.";
          };
          if (r instanceof GUI_Rules.AndIntro) {
              return "The conjunction introduction rule concludes the " + "formula A \u2227 B from the premises A, B.";
          };
          if (r instanceof GUI_Rules.OrElim) {
              return "To eliminate a disjunction we must show that we can conclude " + ("C regardless of which of A or B holds. We show this by assuming, " + "in turn, A and B respectively and showing that they both will lead to C");
          };
          if (r instanceof GUI_Rules.OrIntro1) {
              return "The left disjunction introduction rule concludes A \u2228 B from the " + "knowledge that A holds.";
          };
          if (r instanceof GUI_Rules.OrIntro2) {
              return "The right disjunction introduction rule concludes A \u2228 B from the " + "knowledge that B holds.";
          };
          if (r instanceof GUI_Rules.ImplElim) {
              return "If A\u2192B and A are both known facts, the implication elimination " + "rule can conclude that B also hold.";
          };
          if (r instanceof GUI_Rules.ImplIntro) {
              return "The implication introduction rule can conclude that A implies B " + ("from a box where the initial assumption is A and the final " + "conclusion is B.");
          };
          if (r instanceof GUI_Rules.NegElim) {
              return "The negation elimination rule concludes absurdity from the knowledge " + "that both A and \xacA hold.";
          };
          if (r instanceof GUI_Rules.NegIntro) {
              return "The negation introduction rule can conclude that A does not hold if " + "from the assumption that A does hold absurdity is concluded.";
          };
          if (r instanceof GUI_Rules.BottomElim) {
              return "The absurdity elimination rule can conclude anything from the " + "knowledge of absurdity.";
          };
          if (r instanceof GUI_Rules.DoubleNegElim) {
              return "Double negation elimination concludes A from \xac\xacA.";
          };
          if (r instanceof GUI_Rules.ModusTollens) {
              return "The Modus Tollens rule concludes that A does not hold from the " + "knowledge that A \u2192 B and \xacB.";
          };
          if (r instanceof GUI_Rules.DoubleNegIntro) {
              return "Double negation introduction concludes \xac\xacA from A.";
          };
          if (r instanceof GUI_Rules.PBC) {
              return "To prove something by contradiction we open a box with the assumption " + ("that that which we want to prove does not hold. If we can conclude " + ("absurdity within the box, the assumption is clearly false and the " + "opposite must be true."));
          };
          if (r instanceof GUI_Rules.LEM) {
              return "The Law of Excluded Middle concludes that either A must hold or " + "\xacA must hold.";
          };
          if (r instanceof GUI_Rules.RtCopy) {
              return "A proven formula can always be copied if it is in scope.";
          };
          throw new Error("Failed pattern match at GUI.RulesPanel (line 125, column 19 - line 181, column 73): " + [ r.constructor.name ]);
      };
      var sequent = function (r) {
          if (r instanceof GUI_Rules.RtPremise) {
              return "\u22a2 A";
          };
          if (r instanceof GUI_Rules.RtAssumption) {
              return "(\u22a2 A)";
          };
          if (r instanceof GUI_Rules.AndElim1) {
              return "A \u2227 B \u22a2 A";
          };
          if (r instanceof GUI_Rules.AndElim2) {
              return "A \u2227 B \u22a2 B";
          };
          if (r instanceof GUI_Rules.AndIntro) {
              return "A,B \u22a2 A \u2227 B";
          };
          if (r instanceof GUI_Rules.OrElim) {
              return "(A \u22a2 C), (B \u22a2 C), A \u2228 B \u22a2 C";
          };
          if (r instanceof GUI_Rules.OrIntro1) {
              return "A \u22a2 A \u2228 B";
          };
          if (r instanceof GUI_Rules.OrIntro2) {
              return "B \u22a2 A \u2228 B";
          };
          if (r instanceof GUI_Rules.ImplElim) {
              return "A \u2192 B, A \u22a2 B";
          };
          if (r instanceof GUI_Rules.ImplIntro) {
              return "(A \u22a2 B) \u22a2 A \u2192 B";
          };
          if (r instanceof GUI_Rules.NegElim) {
              return "A,\xacA \u22a2 \u22a5";
          };
          if (r instanceof GUI_Rules.NegIntro) {
              return "(A \u22a2 \u22a5) \u22a2 \xacA";
          };
          if (r instanceof GUI_Rules.BottomElim) {
              return "\u22a5 \u22a2 A";
          };
          if (r instanceof GUI_Rules.DoubleNegElim) {
              return "\xac\xacA \u22a2 A";
          };
          if (r instanceof GUI_Rules.ModusTollens) {
              return "A \u2192 B, \xacB \u22a2 \xacA";
          };
          if (r instanceof GUI_Rules.DoubleNegIntro) {
              return "A \u22a2 \xac\xacA";
          };
          if (r instanceof GUI_Rules.PBC) {
              return "(\xacA \u22a2 \u22a5) \u22a2 A";
          };
          if (r instanceof GUI_Rules.LEM) {
              return "\u22a2 A \u2228 \xacA";
          };
          if (r instanceof GUI_Rules.RtCopy) {
              return "A \u22a2 A";
          };
          throw new Error("Failed pattern match at GUI.RulesPanel (line 102, column 15 - line 122, column 22): " + [ r.constructor.name ]);
      };
      var initialState = function (v) {
          return Data_Maybe.Nothing.value;
      };
      var hintBox = function (st) {
          var hintString = "Please click one of the rules above to " + "get a description of the rule.";
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "box" ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "has-text-centered" ]) ])([ Halogen_HTML_Core.text(Data_Maybe.maybe(hintString)(sequent)(st)) ]), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "has-text-centered" ]) ])([ Halogen_HTML_Core.text(Data_Maybe.maybe("")(textualHint)(st)) ]) ]);
      };
      var handleAction = function (rule) {
          return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
              return new Data_Maybe.Just(rule);
          });
      };
      var createButton = function (rule) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "column", "is-half" ]) ])([ Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ "button", "is-fullwidth" ]), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropButtonType)(DOM_HTML_Indexed_ButtonType.ButtonSubmit.value), Halogen_HTML_Events.onClick(function (v) {
              return rule;
          }) ])([ Halogen_HTML_Core.text(Data_Show.show(GUI_Rules.showRuleType)(rule)) ]) ]);
      };
      var createButtons = Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "columns", "is-multiline", "is-gapless" ]) ])(Data_Functor.map(Data_Functor.functorArray)(createButton)(GUI_Rules.rules));
      var render = function (st) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "panel", "is-primary" ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "panel-heading" ]) ])([ Halogen_HTML_Core.text("Rules") ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ createButtons ])([ hintBox(st) ])));
      };
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction,
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: Halogen_Component.defaultEval.initialize,
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  exports["ruleButtonPanel"] = ruleButtonPanel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.SettingsPanel"] = $PS["GUI.SettingsPanel"] || {};
  var exports = $PS["GUI.SettingsPanel"];
  var Control_Category = $PS["Control.Category"];
  var GUI_Config_Text = $PS["GUI.Config.Text"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];                
  var settingsPanel = (function () {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "panel", "is-primary" ]) ])([ Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "panel-heading" ]) ])([ Halogen_HTML_Core.text("Settings") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "panel-block" ]) ])([ Halogen_HTML_Core.text(GUI_Config_Text.panelNotImplemented) ]) ]);
      };
      return Halogen_Component.mkComponent({
          initialState: Control_Category.identity(Control_Category.categoryFn),
          render: render,
          "eval": Halogen_Component.mkEval(Halogen_Component.defaultEval)
      });
  })();
  exports["settingsPanel"] = settingsPanel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI.StaticElements"] = $PS["GUI.StaticElements"] || {};
  var exports = $PS["GUI.StaticElements"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];                
  var siteHeader = function (title) {
      return function (subtitle) {
          return Halogen_HTML_Elements.section([ Halogen_HTML_Properties.classes([ "hero", "is-primary" ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("hero-body") ])([ Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "title", "is-1" ]) ])([ Halogen_HTML_Core.text(title) ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "subtitle" ]) ])([ Halogen_HTML_Core.text(subtitle) ]) ]) ]);
      };
  };
  var siteFooter = Halogen_HTML_Elements.section_([ Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under GPLv3") ]) ]);
  exports["siteHeader"] = siteHeader;
  exports["siteFooter"] = siteFooter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GUI"] = $PS["GUI"] || {};
  var exports = $PS["GUI"];
  var Control_Category = $PS["Control.Category"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var GUI_Config_Text = $PS["GUI.Config.Text"];
  var GUI_ProofPanel = $PS["GUI.ProofPanel"];
  var GUI_RulesPanel = $PS["GUI.RulesPanel"];
  var GUI_SettingsPanel = $PS["GUI.SettingsPanel"];
  var GUI_StaticElements = $PS["GUI.StaticElements"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var _settingsPanel = Type_Proxy["Proxy"].value;
  var _ruleButtonPanel = Type_Proxy["Proxy"].value;
  var _proofPanel = Type_Proxy["Proxy"].value;
  var siteBody = function (dictMonadEffect) {
      var render = function (v) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "container" ]) ])([ GUI_StaticElements.siteHeader(GUI_Config_Text.editorName)(GUI_Config_Text.editorSlogan), Halogen_HTML_Elements.section([ Halogen_HTML_Properties.classes([ "section" ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "columns" ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "column", "is-three-quarters" ]) ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "proofPanel";
          }))(Data_Ord.ordInt)(_proofPanel)(0)(GUI_ProofPanel.proofPanel(dictMonadEffect))(0)(Control_Category.identity(Control_Category.categoryFn)) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "column" ]) ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "ruleButtonPanel";
          }))(Data_Ord.ordInt)(_ruleButtonPanel)(1)(GUI_RulesPanel.ruleButtonPanel(dictMonadEffect))(0)(Control_Category.identity(Control_Category.categoryFn)), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "settingsPanel";
          }))(Data_Ord.ordInt)(_settingsPanel)(2)(GUI_SettingsPanel.settingsPanel)(0)(Control_Category.identity(Control_Category.categoryFn)) ]) ]) ]), GUI_StaticElements.siteFooter ]);
      };
      return Halogen_Component.mkComponent({
          initialState: Control_Category.identity(Control_Category.categoryFn),
          render: render,
          "eval": Halogen_Component.mkEval(Halogen_Component.defaultEval)
      });
  };
  exports["siteBody"] = siteBody;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Aff.Driver.State"] = $PS["Halogen.Aff.Driver.State"] || {};
  var exports = $PS["Halogen.Aff.Driver.State"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var mapDriverState = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (lchs) {
                  return function __do() {
                      var selfRef = Effect_Ref["new"]({})();
                      var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var handlerRef = Effect_Ref["new"](handler)();
                      var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var fresh = Effect_Ref["new"](1)();
                      var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                      var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
                      var ds = {
                          component: component,
                          state: component.initialState(input),
                          refs: Data_Map_Internal.empty,
                          children: Halogen_Data_Slot.empty,
                          childrenIn: childrenIn,
                          childrenOut: childrenOut,
                          selfRef: selfRef,
                          handlerRef: handlerRef,
                          pendingQueries: pendingQueries,
                          pendingOuts: pendingOuts,
                          pendingHandlers: pendingHandlers,
                          rendering: Data_Maybe.Nothing.value,
                          fresh: fresh,
                          subscriptions: subscriptions,
                          forks: forks,
                          lifecycleHandlers: lchs
                      };
                      Effect_Ref.write(ds)(selfRef)();
                      return mkDriverStateXRef(selfRef);
                  };
              };
          };
      };
  };
  exports["mapDriverState"] = mapDriverState;
  exports["unDriverStateX"] = unDriverStateX;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Subscription"] = $PS["Halogen.Subscription"] || {};
  var exports = $PS["Halogen.Subscription"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var unsubscribe = function (v) {
      return v;
  };
  var subscribe = function (v) {
      return function (k) {
          return v((function () {
              var $55 = Data_Functor["void"](Effect.functorEffect);
              return function ($56) {
                  return $55(k($56));
              };
          })());
      };
  };                                                                               
  var notify = function (v) {
      return function (a) {
          return v(a);
      };
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          emitter: function (k) {
              return function __do() {
                  Effect_Ref.modify_(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return Effect_Ref.modify_(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers);
              };
          },
          listener: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  exports["create"] = create;
  exports["notify"] = notify;
  exports["subscribe"] = subscribe;
  exports["unsubscribe"] = unsubscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Aff.Driver.Eval"] = $PS["Halogen.Aff.Driver.Eval"] || {};
  var exports = $PS["Halogen.Aff.Driver.Eval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Applicative_Free = $PS["Control.Applicative.Free"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var unsubscribe = function (sid) {
      return function (ref) {
          return function __do() {
              var v = Effect_Ref.read(ref)();
              var subs = Effect_Ref.read(v.subscriptions)();
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Halogen_Subscription.unsubscribe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))();
          };
      };
  };
  var queueOrRun = function (ref) {
      return function (au) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return au;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 182, column 33 - line 184, column 57): " + [ v.constructor.name ]);
          });
      };
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })(lchs)))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                          });
                      });
                  });
              });
          });
      };
  };
  var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var fresh = function (f) {
      return function (ref) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                  return {
                      state: i + 1 | 0,
                      value: f(i)
                  };
              })(v.fresh));
          });
      };
  };
  var evalQ = function (render) {
      return function (ref) {
          return function (q) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                  return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
              });
          };
      };
  };
  var evalM = function (render) {
      return function (initRef) {
          return function (v) {
              var evalChildQuery = function (ref) {
                  return function (cqb) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                          return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                              var evalChild = function (v3) {
                                  return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          return evalQ(render)(ds.selfRef)(v2.value1);
                                      })(dsx);
                                  }));
                              };
                              return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                          })(cqb);
                      });
                  };
              };
              var go = function (ref) {
                  return function (v1) {
                      if (v1 instanceof Halogen_Query_HalogenM.State) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              var v3 = v1.value0(v2.state);
                              if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                      component: v2.component,
                                      state: v3.value1,
                                      refs: v2.refs,
                                      children: v2.children,
                                      childrenIn: v2.childrenIn,
                                      childrenOut: v2.childrenOut,
                                      selfRef: v2.selfRef,
                                      handlerRef: v2.handlerRef,
                                      pendingQueries: v2.pendingQueries,
                                      pendingOuts: v2.pendingOuts,
                                      pendingHandlers: v2.pendingHandlers,
                                      rendering: v2.rendering,
                                      fresh: v2.fresh,
                                      subscriptions: v2.subscriptions,
                                      forks: v2.forks,
                                      lifecycleHandlers: v2.lifecycleHandlers
                                  })(ref)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 86, column 7 - line 92, column 21): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Halogen_Subscription.subscribe(v1.value0(sid))(function (act) {
                                  return handleAff(evalF(render)(ref)(new Halogen_Query_Input.Action(act)));
                              })))(function (finalize) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(finalize)))(v2.subscriptions)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(unsubscribe(v1.value0)(ref)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                          return v1.value0;
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                          return evalChildQuery(ref)(v1.value0);
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Par) {
                          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                              var $79 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                              var $80 = evalM(render)(ref);
                              return function ($81) {
                                  return $79($80($81));
                              };
                          })())(v1.value0)));
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                                          return Effect_Ref.write(true)(doneRef)();
                                      }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                          });
                      };
                      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 83, column 12 - line 133, column 33): " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
          };
      };
  };
  var evalF = function (render) {
      return function (ref) {
          return function (v) {
              if (v instanceof Halogen_Query_Input.RefUpdate) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                      return {
                          component: st.component,
                          state: st.state,
                          refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                          children: st.children,
                          childrenIn: st.childrenIn,
                          childrenOut: st.childrenOut,
                          selfRef: st.selfRef,
                          handlerRef: st.handlerRef,
                          pendingQueries: st.pendingQueries,
                          pendingOuts: st.pendingOuts,
                          pendingHandlers: st.pendingHandlers,
                          rendering: st.rendering,
                          fresh: st.fresh,
                          subscriptions: st.subscriptions,
                          forks: st.forks,
                          lifecycleHandlers: st.lifecycleHandlers
                      };
                  })));
              };
              if (v instanceof Halogen_Query_Input.Action) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                      return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                  });
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 52, column 20 - line 58, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  exports["evalF"] = evalF;
  exports["evalQ"] = evalQ;
  exports["evalM"] = evalM;
  exports["handleLifecycle"] = handleLifecycle;
  exports["queueOrRun"] = queueOrRun;
  exports["handleAff"] = handleAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Aff.Driver"] = $PS["Halogen.Aff.Driver"] || {};
  var exports = $PS["Halogen.Aff.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_Eval = $PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];                
  var newLifecycleHandlers = Effect_Ref["new"]({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handlePending = function (ref) {
      return function __do() {
          var queue = Effect_Ref.read(ref)();
          Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)((function () {
              var $28 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
              return function ($29) {
                  return Halogen_Aff_Driver_Eval.handleAff($28(Data_List.reverse($29)));
              };
          })())();
      };
  };
  var cleanupSubscriptionsAndForks = function (v) {
      return function __do() {
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Halogen_Subscription.unsubscribe)))(Effect_Ref.read(v.subscriptions))();
          Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
              var $30 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
              return function ($31) {
                  return Halogen_Aff_Driver_Eval.handleAff($30($31));
              };
          })()))(Effect_Ref.read(v.forks))();
          return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
      };
  };
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                          return Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          })(lchs);
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return Halogen_Component.unComponent(function (c) {
                              return function __do() {
                                  var lchs$prime = newLifecycleHandlers();
                                  var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                                  var pre = Effect_Ref.read(lchs)();
                                  Effect_Ref.write({
                                      initializers: Data_List_Types.Nil.value,
                                      finalizers: pre.finalizers
                                  })(lchs)();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                      var $32 = render(lchs);
                                      return function ($33) {
                                          return $32((function (v) {
                                              return v.selfRef;
                                          })($33));
                                      };
                                  })()))(Effect_Ref.read($$var))();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                                  return $$var;
                              };
                          });
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (childrenInRef) {
                          return function (childrenOutRef) {
                              return Halogen_Component.unComponentSlot(function (slot) {
                                  return function __do() {
                                      var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                      var $$var = (function () {
                                          if (childrenIn instanceof Data_Maybe.Just) {
                                              Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                                              var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                                              Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                  return function __do() {
                                                      Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                          var $34 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                          return function ($35) {
                                                              return $34(slot.output($35));
                                                          };
                                                      })())();
                                                      return Halogen_Aff_Driver_Eval.handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                                                  };
                                              })(dsx)();
                                              return childrenIn.value0.value0;
                                          };
                                          if (childrenIn instanceof Data_Maybe.Nothing) {
                                              return runComponent(lchs)((function () {
                                                  var $36 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                  return function ($37) {
                                                      return $36(slot.output($37));
                                                  };
                                              })())(slot.input)(slot.component)();
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 211, column 14 - line 220, column 98): " + [ childrenIn.constructor.name ]);
                                      })();
                                      var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($38) {
                                          return Data_Maybe.isJust(slot.get($38));
                                      })(Effect_Ref.read(childrenOutRef))();
                                      Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                      Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 225, column 37 - line 227, column 50): " + [ v.constructor.name ]);
                                      }))();
                                  };
                              });
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Effect_Ref.read($$var)();
                          var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                          Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                          Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                          Effect_Ref.write(v.children)(v.childrenIn)();
                          var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                          var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                          var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                          var handler = (function () {
                              var $39 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
                              var $40 = Data_Functor["void"](Effect_Aff.functorAff);
                              var $41 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
                              return function ($42) {
                                  return $39($40($41($42)));
                              };
                          })();
                          var childHandler = (function () {
                              var $43 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
                              return function ($44) {
                                  return $43(handler(Halogen_Query_Input.Action.create($44)));
                              };
                          })();
                          var rendering = renderSpec.render(function ($45) {
                              return Halogen_Aff_Driver_Eval.handleAff(handler($45));
                          })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var children = Effect_Ref.read(v.childrenOut)();
                          var childrenIn = Effect_Ref.read(v.childrenIn)();
                          Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
                              return function __do() {
                                  var childDS = Effect_Ref.read(v1)();
                                  Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                                  return finalize(lchs)(childDS)();
                              };
                          })();
                          Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                              return {
                                  component: ds$prime.component,
                                  state: ds$prime.state,
                                  refs: ds$prime.refs,
                                  children: children,
                                  childrenIn: ds$prime.childrenIn,
                                  childrenOut: ds$prime.childrenOut,
                                  selfRef: ds$prime.selfRef,
                                  handlerRef: ds$prime.handlerRef,
                                  pendingQueries: ds$prime.pendingQueries,
                                  pendingOuts: ds$prime.pendingOuts,
                                  pendingHandlers: ds$prime.pendingHandlers,
                                  rendering: new Data_Maybe.Just(rendering),
                                  fresh: ds$prime.fresh,
                                  subscriptions: ds$prime.subscriptions,
                                  forks: ds$prime.forks,
                                  lifecycleHandlers: ds$prime.lifecycleHandlers
                              };
                          }))();
                          return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
                              return function __do() {
                                  var handlers = Effect_Ref.read(pendingHandlers)();
                                  Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                      var $46 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                      return function ($47) {
                                          return Halogen_Aff_Driver_Eval.handleAff($46(Data_List.reverse($47)));
                                      };
                                  })())(handlers)();
                                  var mmore = Effect_Ref.read(pendingHandlers)();
                                  var $21 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);
                                  if ($21) {
                                      return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptionsAndForks(st)();
                          var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                          Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: handlers.initializers,
                                  finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                              };
                          })(lchs)();
                          return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                              return function __do() {
                                  var dsx = Effect_Ref.read(v)();
                                  return finalize(lchs)(dsx)();
                              };
                          })();
                      };
                  });
              };
              var evalDriver = function (disposed) {
                  return function (ref) {
                      return function (q) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                              if (v) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                              };
                              return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                          });
                      };
                  };
              };
              var dispose = function (disposed) {
                  return function (lchs) {
                      return function (dsx) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var v = Effect_Ref.read(disposed)();
                              if (v) {
                                  return Data_Unit.unit;
                              };
                              Effect_Ref.write(true)(disposed)();
                              finalize(lchs)(dsx)();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (v1) {
                                  return function __do() {
                                      var v2 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(v1.selfRef))();
                                      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.rendering)(renderSpec.dispose)();
                                  };
                              })(dsx)();
                          });
                      };
                  };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var sio = Halogen_Subscription.create();
                              var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)((function () {
                                  var $48 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                                  var $49 = Halogen_Subscription.notify(sio.listener);
                                  return function ($50) {
                                      return $48($49($50));
                                  };
                              })())(i)(component))();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)({
                                      query: evalDriver(disposed)(st.selfRef),
                                      messages: sio.emitter,
                                      dispose: dispose(disposed)(lchs)(dsx)
                                  });
                              })(dsx)();
                          });
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDocument.ReadyState"] = $PS["Web.HTML.HTMLDocument.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var parse = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Loading"] = Loading;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var toParentNode = Unsafe_Coerce.unsafeCoerce; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var readyState = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
      })());
      return function ($1) {
          return $0($foreign["_readyState"]($1));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
  exports["readyState"] = readyState;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.Aff.Util"] = $PS["Halogen.Aff.Util"] || {};
  var exports = $PS["Halogen.Aff.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var selectElement = function (query) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
          var $2 = Web_DOM_ParentNode.querySelector(query);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument.toParentNode($3));
          };
      })())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
      });
  };
  var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var awaitLoad = Effect_Aff.makeAff(function (callback) {
      return function __do() {
          var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
          if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
              var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
              var listener = Web_Event_EventTarget.eventListener(function (v) {
                  return callback(new Data_Either.Right(Data_Unit.unit));
              })();
              Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
              return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
          };
          callback(new Data_Either.Right(Data_Unit.unit))();
          return Effect_Aff.nonCanceler;
      };
  });
  var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (body) {
          return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(body);
      });
  });
  exports["awaitBody"] = awaitBody;
  exports["runHalogenAff"] = runHalogenAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.DOM"] = $PS["Halogen.VDom.DOM"] || {};
  var exports = $PS["Halogen.VDom.DOM"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var haltWidget = function (v) {
      return Halogen_VDom_Machine.halt(v.widget);
  };
  var patchWidget = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Widget) {
          var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
          var res$prime = Halogen_VDom_Machine.unStep(function (v) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
                  build: state.build,
                  widget: res
              }, patchWidget, haltWidget));
          })(res);
          return res$prime;
      };
      haltWidget(state);
      return state.build(vdom);
  };
  var haltText = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      return Halogen_VDom_Util.removeChild(v.node, parent);
  };
  var patchText = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Text) {
          if (state.value === vdom.value0) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
          };
          if (Data_Boolean.otherwise) {
              var nextState = {
                  build: state.build,
                  node: state.node,
                  value: vdom.value0
              };
              Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
          };
      };
      haltText(state);
      return state.build(vdom);
  };
  var haltKeyed = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forInE(v.children, function (v1, s) {
          return Halogen_VDom_Machine.halt(s);
      });
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var haltElem = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var eqElemSpec = function (ns1, v, ns2, v1) {
      var $56 = v === v1;
      if ($56) {
          if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
              return true;
          };
          if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var patchElem = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          var v1 = Data_Array.length(state.children);
          if (v1 === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
          };
          var onThis = function (ix, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (ix, s, v2) {
              var res = Halogen_VDom_Machine.step(s, v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (ix, v2) {
              var res = state.build(v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
      };
      haltElem(state);
      return state.build(vdom);
  };
  var patchKeyed = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          if (state.length === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children,
                  length: 0
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
          };
          var onThis = function (v2, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (v2, ix$prime, s, v3) {
              var res = Halogen_VDom_Machine.step(s, v3.value1);
              Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (v2, ix, v3) {
              var res = state.build(v3.value1);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2,
              length: v
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
      };
      haltKeyed(state);
      return state.build(vdom);
  };
  var buildWidget = function (v, build, w) {
      var res = v.buildWidget(v)(w);
      var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
              build: build,
              widget: res
          }, patchWidget, haltWidget));
      })(res);
      return res$prime;
  };
  var buildText = function (v, build, s) {
      var node = Halogen_VDom_Util.createTextNode(s, v.document);
      var state = {
          build: build,
          node: node,
          value: s
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
  };
  var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (k, ix, v1) {
          var res = build(v1.value1);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children,
          length: Data_Array.length(ch1)
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
  };
  var buildElem = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (ix, child) {
          var res = build(child);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.forE(ch1, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
  };
  var buildVDom = function (spec) {
      var build = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return build(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
      };
      return build;
  };
  exports["buildVDom"] = buildVDom;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.Thunk"] = $PS["Halogen.VDom.Thunk"] || {};
  var exports = $PS["Halogen.VDom.Thunk"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];        
  var Thunk = (function () {
      function Thunk(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Thunk.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Thunk(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Thunk;
  })();                                          
  var unsafeEqThunk = function (v, v1) {
      return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3));
  };
  var thunk = function (tid, eqFn, f, a) {
      return new Thunk(tid, eqFn, f, a);
  };
  var runThunk = function (v) {
      return v.value2(v.value3);
  };
  var buildThunk = function (toVDom) {
      var haltThunk = function (state) {
          return Halogen_VDom_Machine.halt(state.vdom);
      };
      var patchThunk = function (state, t2) {
          var $43 = unsafeEqThunk(state.thunk, t2);
          if ($43) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
          };
          var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
              vdom: vdom,
              thunk: t2
          }, patchThunk, haltThunk));
      };
      var renderThunk = function (spec) {
          return function (t) {
              var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
                  thunk: t,
                  vdom: vdom
              }, patchThunk, haltThunk));
          };
      };
      return renderThunk;
  };
  exports["buildThunk"] = buildThunk;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  var nextSibling = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_nextSibling"]($15));
      };
  })();
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Halogen.VDom.Driver"] = $PS["Halogen.VDom.Driver"] || {};
  var exports = $PS["Halogen.VDom.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver = $PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Thunk = $PS["Halogen.VDom.Thunk"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var npn = Web_DOM_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
              return Web_DOM_Node.removeChild(v.node)(pn);
          })(npn)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = function (st) {
                  if (st instanceof Data_Maybe.Just) {
                      return Halogen_VDom_Machine.halt(st.value0);
                  };
                  return Data_Unit.unit;
              };
              var buildWidget = function (spec) {
                  var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap())(spec);
                  var renderComponentSlot = function (cs) {
                      var renderChild = Effect_Ref.read(renderChildRef)();
                      var rsx = renderChild(cs)();
                      var node = getNode(rsx);
                      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                  };
                  var render = function (slot) {
                      if (slot instanceof Halogen_Component.ComponentSlot) {
                          return renderComponentSlot(slot.value0);
                      };
                      if (slot instanceof Halogen_Component.ThunkSlot) {
                          var step = buildThunk(slot.value0);
                          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
                      };
                      throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                  };
                  var patch = function (st, slot) {
                      if (st instanceof Data_Maybe.Just) {
                          if (slot instanceof Halogen_Component.ComponentSlot) {
                              Halogen_VDom_Machine.halt(st.value0);
                              return renderComponentSlot(slot.value0);
                          };
                          if (slot instanceof Halogen_Component.ThunkSlot) {
                              var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
                              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                      };
                      return render(slot);
                  };
                  return render;
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var renderChildRef = Effect_Ref["new"](child)();
                                  var spec = mkSpec(handler)(renderChildRef)(document);
                                  var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                                  var node = Halogen_VDom_Machine.extract(machine);
                                  Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                  return {
                                      machine: machine,
                                      node: node,
                                      renderChildRef: renderChildRef
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                  var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                                  var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                                  var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                  var newNode = Halogen_VDom_Machine.extract(machine$prime);
                                  Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                                  return {
                                      machine: machine$prime,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.identity(Control_Category.categoryFn),
              removeChild: removeChild,
              dispose: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
                  return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var GUI = $PS["GUI"];
  var Halogen_Aff_Util = $PS["Halogen.Aff.Util"];
  var Halogen_VDom_Driver = $PS["Halogen.VDom.Driver"];                
  var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (body) {
      return Halogen_VDom_Driver.runUI(GUI.siteBody(Effect_Aff.monadEffectAff))(Data_Unit.unit)(body);
  }));
  exports["main"] = main;
})(PS);
PS["Main"].main();